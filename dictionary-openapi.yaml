openapi: 3.0.0
info:
  title: REST API for B2Dictionary
  version: 1.0.0
servers:
  - url: http://localhost:8084
  - url: http://54.37.199.51:8084/api
tags:
  - name: Auth
  - name: Activities
  - name: Admin Access
  - name: Complaints
  - name: Files
  - name: Folders
  - name: Providers
  - name: Tags
  - name: Units
  - name: Users
  - name: Words
  - name: Available Public
    description: This methods does not require authorization
  - name: Available Providers
    description: "description: This methods requires Authorizations by `client-id` +
      `client-secret` + `user-id`"
paths:
  /auth/start:
    post:
      tags:
        - Auth
      summary: Start authentication process
      operationId: startAuth
      requestBody:
        $ref: "#/components/requestBodies/EmptyBody"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - proof
                properties:
                  proof:
                    type: string
  /auth/verify:
    post:
      tags:
        - Auth
      summary: Verify authentication wallet
      operationId: verifyAuth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - proof
                - account
              properties:
                spaceId:
                  type: string
                  description: Selected Space ID
                proof:
                  type: object
                  required:
                    - payload
                    - signature
                    - timestamp
                  properties:
                    payload:
                      type: string
                      description: TON Connect payload
                    signature:
                      type: string
                      description: TON Connect signature
                    timestamp:
                      type: number
                      description: Timestamp of authentication
                account:
                  type: object
                  required:
                    - address
                    - chain
                  properties:
                    address:
                      type: string
                      description: Wallet Address
                      example: 0:c424531feb64afeb46607e0aff5609628207213308b62c123891d817389fc35b
                    chain:
                      type: string
                      description: Blockchain chain
                    publicKey:
                      type: string
                      description: Wallet Public Key
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - accessToken
                  - refreshToken
                  - profile
                properties:
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
                  profile:
                    $ref: "#/components/schemas/User"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                errorCode: auth:404
                message: The proof has not found
  /auth/refresh:
    post:
      tags:
        - Auth
      summary: Refresh Access Token by Refresh token
      operationId: refreshToken
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - accessToken
                - refreshToken
              properties:
                spaceId:
                  type: string
                  description: Selected Space ID
                accessToken:
                  type: string
                refreshToken:
                  type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - accessToken
                  - refreshToken
                  - profile
                properties:
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
                  profile:
                    $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/UserNotFound"
  /auth/profile:
    get:
      tags:
        - Auth
      security:
        - BearerAuth: []
      summary: Get Profile
      operationId: getProfile
      responses:
        "200":
          $ref: "#/components/responses/UserData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/UserNotFound"
    patch:
      tags:
        - Auth
      security:
        - BearerAuth: []
      summary: Update Profile
      operationId: updateProfile
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  description: First Name
                lastName:
                  type: string
                  description: Last Name
                middleName:
                  type: string
                  description: Middle Name
                avatar:
                  type: string
                  description: Avatar
      responses:
        "200":
          $ref: "#/components/responses/UserData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/UserNotFound"
  /providers/my:
    get:
      tags:
        - Providers
        - Available Providers
      security:
        - ProviderClientId: []
          ProviderClientSecret: []
      summary: Get provider data
      operationId: getProvider
      responses:
        "200":
          $ref: "#/components/responses/ProviderData"
        "404":
          $ref: "#/components/responses/ProviderNotFound"
    patch:
      tags:
        - Providers
        - Available Providers
      security:
        - ProviderClientId: []
          ProviderClientSecret: []
      summary: Update provider data
      operationId: updateProvider
      requestBody:
        $ref: "#/components/requestBodies/ProviderRequestBody"
      responses:
        "200":
          $ref: "#/components/responses/ProviderData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "404":
          $ref: "#/components/responses/ProviderNotFound"
    delete:
      tags:
        - Providers
        - Available Providers
      security:
        - ProviderClientId: []
          ProviderClientSecret: []
      summary: Delete provider
      operationId: deleteProvider
      responses:
        "200":
          $ref: "#/components/responses/ProviderData"
        "404":
          $ref: "#/components/responses/ProviderNotFound"
  /providers/register:
    post:
      tags:
        - Providers
        - Available Public
      summary: Register new provider
      operationId: registerProvider
      requestBody:
        $ref: "#/components/requestBodies/ProviderRequestBody"
      responses:
        "200":
          $ref: "#/components/responses/ProviderWithSecretData"
        "400":
          $ref: "#/components/responses/InvalidData"
  /providers/search:
    post:
      tags:
        - Providers
      security:
        - BearerAuth: []
      summary: Search providers
      operationId: searchProviders
      description: Required `Admin` access
      requestBody:
        $ref: "#/components/requestBodies/SearchProvidersBody"
      responses:
        "200":
          $ref: "#/components/responses/SearchProvidersData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  "/providers/{id}/block":
    post:
      tags:
        - Providers
      security:
        - BearerAuth: []
      summary: Block provider
      operationId: blockProvider
      description: Required `Admin` access
      parameters:
        - $ref: "#/components/parameters/providerIdParam"
      requestBody:
        $ref: "#/components/requestBodies/EmptyBody"
      responses:
        "200":
          $ref: "#/components/responses/ProviderData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/ProviderNotFound"
  "/providers/{id}/unblock":
    post:
      tags:
        - Providers
      security:
        - BearerAuth: []
      summary: Unblock provider
      operationId: unblockProvider
      description: Required `Admin` access
      parameters:
        - $ref: "#/components/parameters/providerIdParam"
      requestBody:
        $ref: "#/components/requestBodies/EmptyBody"
      responses:
        "200":
          $ref: "#/components/responses/ProviderData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/ProviderNotFound"
  /activities/search:
    post:
      tags:
        - Activities
        - Available Providers
      security:
        - BearerAuth: []
        - ProviderClientId: []
          ProviderClientSecret: []
          ProviderUserId: []
      summary: Search activities
      operationId: searchActivities
      requestBody:
        $ref: "#/components/requestBodies/SearchActivitiesBody"
      responses:
        "200":
          $ref: "#/components/responses/SearchActivitiesData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
  /admin-access/check:
    get:
      tags:
        - Admin Access
      security:
        - BearerAuth: []
      summary: Check Admin Access
      operationId: checkAdminAccess
      responses:
        "200":
          $ref: "#/components/responses/CheckUserAccess"
        "401":
          $ref: "#/components/responses/Unauthorized"
  /admin-access/search:
    post:
      tags:
        - Admin Access
      security:
        - BearerAuth: []
      summary: Search System Admins
      description: Required `Wallet Admin` access
      operationId: searchAdminAccess
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchModel"
      responses:
        "200":
          $ref: "#/components/responses/SearchAdminAccess"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  /admin-access:
    post:
      tags:
        - Admin Access
      security:
        - BearerAuth: []
      summary: Add System Admin
      description: Required `Wallet Admin` access
      operationId: addAdminAccess
      requestBody:
        $ref: "#/components/requestBodies/CreateAdminAccessBody"
      responses:
        "200":
          $ref: "#/components/responses/AdminAccessData"
        "400":
          $ref: "#/components/responses/AdminAccessExist"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  "/admin-access/{wallet}":
    delete:
      tags:
        - Admin Access
      security:
        - BearerAuth: []
      summary: Delete System Admin
      description: Required `Wallet Admin` access
      operationId: deleteAdminAccess
      parameters:
        - $ref: "#/components/parameters/walletParam"
      responses:
        "200":
          $ref: "#/components/responses/AdminAccessData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/AdminAccessNotFound"
  /complaints/search:
    post:
      tags:
        - Complaints
      security:
        - BearerAuth: []
      summary: Search complaints
      description: Required `System Admin` access
      operationId: searchComplaints
      requestBody:
        $ref: "#/components/requestBodies/SearchComplaintsBody"
      responses:
        "200":
          $ref: "#/components/responses/SearchComplaintsData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  /complaints:
    post:
      tags:
        - Complaints
      security:
        - BearerAuth: []
      summary: Create complaints
      operationId: createComplaint
      requestBody:
        $ref: "#/components/requestBodies/CreateComplaintBody"
      responses:
        "200":
          $ref: "#/components/responses/ComplaintData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
  "/complaints/{id}":
    patch:
      tags:
        - Complaints
      security:
        - BearerAuth: []
      summary: Edit complaints
      description: Available for `creator` or `System Admin`
      operationId: updateComplaint
      parameters:
        - $ref: "#/components/parameters/complaintIdParam"
      requestBody:
        $ref: "#/components/requestBodies/EditComplaintBody"
      responses:
        "200":
          $ref: "#/components/responses/ComplaintData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/ComplaintNotFound"
    delete:
      tags:
        - Complaints
      security:
        - BearerAuth: []
      summary: Delete complaints
      description: Available for `creator` or `System Admin`
      operationId: deleteComplaint
      parameters:
        - $ref: "#/components/parameters/complaintIdParam"
      responses:
        "200":
          $ref: "#/components/responses/ComplaintData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/ComplaintNotFound"
  /files:
    post:
      tags:
        - Files
        - Available Providers
      security:
        - BearerAuth: []
        - ProviderClientId: []
          ProviderClientSecret: []
          ProviderUserId: []
      summary: Upload file
      operationId: uploadFile
      requestBody:
        $ref: "#/components/requestBodies/UploadFileBody"
      responses:
        "200":
          $ref: "#/components/responses/FileData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/FileNotFound"
  "/files/{id}":
    get:
      tags:
        - Files
        - Available Public
      summary: Get file
      operationId: getFile
      parameters:
        - $ref: "#/components/parameters/fileIdParam"
      responses:
        "200":
          $ref: "#/components/responses/FileBinary"
        "404":
          $ref: "#/components/responses/FileNotFound"
    delete:
      tags:
        - Files
        - Available Providers
      security:
        - BearerAuth: []
        - ProviderClientId: []
          ProviderClientSecret: []
          ProviderUserId: []
      summary: Delete file
      operationId: deleteFile
      parameters:
        - $ref: "#/components/parameters/fileIdParam"
      responses:
        "200":
          $ref: "#/components/responses/FileData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/FileNotFound"
  /folders:
    post:
      tags:
        - Folders
        - Available Providers
      security:
        - BearerAuth: []
        - ProviderClientId: []
          ProviderClientSecret: []
          ProviderUserId: []
      summary: Create folder
      operationId: createFolder
      requestBody:
        $ref: "#/components/requestBodies/CreateFolderBody"
      responses:
        "200":
          $ref: "#/components/responses/FolderData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/ParentFolderNotFound"
  "/folders/{id}":
    get:
      tags:
        - Folders
        - Available Public
      summary: Get full folder data
      operationId: getFolder
      parameters:
        - $ref: "#/components/parameters/folderIdParam"
      responses:
        "200":
          $ref: "#/components/responses/FolderFullData"
        "404":
          $ref: "#/components/responses/FolderNotFound"
    patch:
      tags:
        - Folders
        - Available Providers
      security:
        - BearerAuth: []
        - ProviderClientId: []
          ProviderClientSecret: []
          ProviderUserId: []
      summary: Update folder
      description: Available for `creator` or `System Admin`
      operationId: updateFolder
      parameters:
        - $ref: "#/components/parameters/folderIdParam"
      requestBody:
        $ref: "#/components/requestBodies/EditFolderBody"
      responses:
        "200":
          $ref: "#/components/responses/FolderData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/FolderNotFound"
    delete:
      tags:
        - Folders
        - Available Providers
      security:
        - BearerAuth: []
        - ProviderClientId: []
          ProviderClientSecret: []
          ProviderUserId: []
      summary: Delete folder
      description: Available for `creator` or `System Admin`
      operationId: deleteFolder
      parameters:
        - $ref: "#/components/parameters/folderIdParam"
      responses:
        "200":
          $ref: "#/components/responses/FolderData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/FolderNotFound"
  /folders/search:
    get:
      tags:
        - Folders
        - Available Public
      summary: Search folders
      operationId: searchFolders
      parameters:
        - $ref: "#/components/parameters/folderSearchModeParam"
      responses:
        "200":
          $ref: "#/components/responses/FolderTreeData"
        "400":
          $ref: "#/components/responses/InvalidData"
  /folders/move:
    put:
      tags:
        - Folders
        - Available Providers
      security:
        - BearerAuth: []
        - ProviderClientId: []
          ProviderClientSecret: []
          ProviderUserId: []
      summary: Change folder order
      operationId: moveFolder
      requestBody:
        $ref: "#/components/requestBodies/MoveFolderBody"
      responses:
        "200":
          $ref: "#/components/responses/FolderData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/FolderNotFound"
  "/folders/{id}/make-public":
    post:
      tags:
        - Folders
        - Available Providers
      security:
        - BearerAuth: []
        - ProviderClientId: []
          ProviderClientSecret: []
          ProviderUserId: []
      summary: Manage folder public status
      operationId: makeFolderPublic
      parameters:
        - $ref: "#/components/parameters/folderIdParam"
      requestBody:
        $ref: "#/components/requestBodies/MakePublicFolderBody"
      responses:
        "200":
          $ref: "#/components/responses/FolderData"
        "400":
          $ref: "#/components/responses/FolderIsPublic"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/FolderNotFound"
  "/folders/{id}/filters":
    post:
      tags:
        - Folders
        - Available Providers
      security:
        - BearerAuth: []
        - ProviderClientId: []
          ProviderClientSecret: []
          ProviderUserId: []
      summary: Create folder filter
      operationId: createFolderFilter
      parameters:
        - $ref: "#/components/parameters/folderIdParam"
      requestBody:
        $ref: "#/components/requestBodies/CreateFolderFilterBody"
      responses:
        "200":
          $ref: "#/components/responses/FolderFilterData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/FolderNotFound"
  "/folders/{id}/filters/{filterId}":
    patch:
      tags:
        - Folders
        - Available Providers
      security:
        - BearerAuth: []
        - ProviderClientId: []
          ProviderClientSecret: []
          ProviderUserId: []
      summary: Update folder filter
      description: Available for `creator` or `System Admin`
      operationId: updateFolderFilter
      parameters:
        - $ref: "#/components/parameters/folderIdParam"
        - $ref: "#/components/parameters/filterIdParam"
      requestBody:
        $ref: "#/components/requestBodies/EditFolderFilterBody"
      responses:
        "200":
          $ref: "#/components/responses/FolderFilterData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/FolderFilterNotFound"
    delete:
      tags:
        - Folders
        - Available Providers
      security:
        - BearerAuth: []
        - ProviderClientId: []
          ProviderClientSecret: []
          ProviderUserId: []
      summary: Delete folder filter
      description: Available for `creator` or `System Admin`
      operationId: deleteFolderFilter
      parameters:
        - $ref: "#/components/parameters/folderIdParam"
        - $ref: "#/components/parameters/filterIdParam"
      responses:
        "200":
          $ref: "#/components/responses/FolderFilterData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/FolderFilterNotFound"
  /folders/filters/search:
    post:
      tags:
        - Folders
        - Available Public
      summary: Search folders filters
      description: Return all filters values and tags that were created
      operationId: searchFoldersFilters
      requestBody:
        $ref: "#/components/requestBodies/SearchFoldersFiltersBody"
      responses:
        "200":
          $ref: "#/components/responses/SearchFolderFilterData"
        "400":
          $ref: "#/components/responses/InvalidData"
  "/folders/{id}/filters/move":
    put:
      tags:
        - Folders
        - Available Providers
      security:
        - BearerAuth: []
        - ProviderClientId: []
          ProviderClientSecret: []
          ProviderUserId: []
      summary: Move folder filter
      operationId: moveFolderFilter
      parameters:
        - $ref: "#/components/parameters/folderIdParam"
      requestBody:
        $ref: "#/components/requestBodies/MoveFolderFilterBody"
      responses:
        "200":
          $ref: "#/components/responses/FolderFilterData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/FolderNotFound"
  /tags/search:
    post:
      tags:
        - Tags
        - Available Public
      summary: Search tags
      operationId: searchTags
      requestBody:
        $ref: "#/components/requestBodies/SearchTagsBody"
      responses:
        "200":
          $ref: "#/components/responses/SearchTagsData"
        "400":
          $ref: "#/components/responses/InvalidData"
  /tags:
    post:
      tags:
        - Tags
        - Available Providers
      security:
        - BearerAuth: []
        - ProviderClientId: []
          ProviderClientSecret: []
          ProviderUserId: []
      summary: Crete tag
      operationId: createTag
      requestBody:
        $ref: "#/components/requestBodies/CreateTagBody"
      responses:
        "200":
          $ref: "#/components/responses/TagData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  "/tags/{id}":
    patch:
      tags:
        - Tags
        - Available Providers
      security:
        - BearerAuth: []
        - ProviderClientId: []
          ProviderClientSecret: []
          ProviderUserId: []
      summary: Update tag
      description: Available for `creator` or `System Admin`
      operationId: updateTag
      parameters:
        - $ref: "#/components/parameters/tagIdParam"
      requestBody:
        $ref: "#/components/requestBodies/UpdateTagBody"
      responses:
        "200":
          $ref: "#/components/responses/TagData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/TagNotFound"
    delete:
      tags:
        - Tags
        - Available Providers
      security:
        - BearerAuth: []
        - ProviderClientId: []
          ProviderClientSecret: []
          ProviderUserId: []
      summary: Delete tag
      description: Available for `creator` or `System Admin`
      operationId: deleteTag
      parameters:
        - $ref: "#/components/parameters/tagIdParam"
      responses:
        "200":
          $ref: "#/components/responses/TagData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/TagNotFound"
  /units:
    get:
      tags:
        - Units
        - Available Public
      summary: Get system units
      operationId: getSystemUnits
      responses:
        "200":
          $ref: "#/components/responses/SearchUnitsData"
    post:
      tags:
        - Units
      security:
        - BearerAuth: []
      summary: Create system unit
      description: Required `System Admin` access
      operationId: createSystemUnit
      requestBody:
        $ref: "#/components/requestBodies/ModifyUnitBody"
      responses:
        "200":
          $ref: "#/components/responses/UnitData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  "/units/{key}":
    delete:
      tags:
        - Units
      security:
        - BearerAuth: []
      summary: Delete system unit
      description: Required `System Admin` access
      operationId: deleteSystemUnit
      parameters:
        - $ref: "#/components/parameters/unitKeyParam"
      responses:
        "200":
          $ref: "#/components/responses/UnitData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/SystemUnitNotFound"
  /users/search:
    post:
      tags:
        - Users
      security:
        - BearerAuth: []
      summary: Search users
      description: Required `System Admin` access
      operationId: searchUsers
      requestBody:
        $ref: "#/components/requestBodies/SearchUsersBody"
      responses:
        "200":
          $ref: "#/components/responses/SearchUsersData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  "/users/blocked/{id}":
    post:
      tags:
        - Users
      security:
        - BearerAuth: []
      summary: Add user block
      description: Required `System Admin` access
      operationId: addUserBlock
      parameters:
        - $ref: "#/components/parameters/userIdParam"
      requestBody:
        $ref: "#/components/requestBodies/EmptyBody"
      responses:
        "200":
          $ref: "#/components/responses/UserRatingData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
    delete:
      tags:
        - Users
      security:
        - BearerAuth: []
      summary: Delete user block
      description: Required `System Admin` access
      operationId: deleteUserBlock
      parameters:
        - $ref: "#/components/parameters/userIdParam"
      responses:
        "200":
          $ref: "#/components/responses/UserRatingData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  /words:
    post:
      tags:
        - Words
        - Available Providers
      security:
        - BearerAuth: []
        - ProviderClientId: []
          ProviderClientSecret: []
          ProviderUserId: []
      summary: Create word
      operationId: createWord
      requestBody:
        $ref: "#/components/requestBodies/CreateWordBody"
      responses:
        "200":
          $ref: "#/components/responses/WordData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  "/words/{id}":
    get:
      tags:
        - Words
        - Available Public
      summary: Get word full data
      operationId: getWord
      parameters:
        - $ref: "#/components/parameters/wordIdParam"
      responses:
        "200":
          $ref: "#/components/responses/WordFullData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "404":
          $ref: "#/components/responses/WordNotFound"
    delete:
      tags:
        - Words
        - Available Providers
      security:
        - BearerAuth: []
        - ProviderClientId: []
          ProviderClientSecret: []
          ProviderUserId: []
      summary: Delete word
      description: Available for `creator` or `System Admin`
      operationId: deleteWord
      parameters:
        - $ref: "#/components/parameters/wordIdParam"
      responses:
        "200":
          $ref: "#/components/responses/WordData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/WordNotFound"
  /words/search:
    post:
      tags:
        - Words
        - Available Public
      summary: Search words
      operationId: searchWords
      requestBody:
        $ref: "#/components/requestBodies/SearchWordsBody"
      responses:
        "200":
          $ref: "#/components/responses/SearchWordsData"
        "400":
          $ref: "#/components/responses/InvalidData"
  "/words/{id}/tags":
    put:
      tags:
        - Words
        - Available Providers
      security:
        - BearerAuth: []
        - ProviderClientId: []
          ProviderClientSecret: []
          ProviderUserId: []
      summary: Edit word tags
      operationId: editWordTags
      parameters:
        - $ref: "#/components/parameters/wordIdParam"
      requestBody:
        $ref: "#/components/requestBodies/EditWordTagsBody"
      responses:
        "200":
          $ref: "#/components/responses/WordFullData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/WordNotFound"
  "/words/{id}/folders":
    post:
      tags:
        - Words
        - Available Providers
      security:
        - BearerAuth: []
        - ProviderClientId: []
          ProviderClientSecret: []
          ProviderUserId: []
      summary: Add word to folders
      description: The word will get all folders filters value to have references to
        the folders
      operationId: addWordToFolders
      parameters:
        - $ref: "#/components/parameters/wordIdParam"
      requestBody:
        $ref: "#/components/requestBodies/AddWordFoldersBody"
      responses:
        "200":
          $ref: "#/components/responses/WordData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/WordNotFound"
  "/words/{id}/variants":
    post:
      tags:
        - Words
        - Available Providers
      security:
        - BearerAuth: []
        - ProviderClientId: []
          ProviderClientSecret: []
          ProviderUserId: []
      summary: Create variant for word characteristic
      description: The word will get all folders filters value to have references to
        the folders
      operationId: crateWordVariant
      parameters:
        - $ref: "#/components/parameters/wordIdParam"
      requestBody:
        $ref: "#/components/requestBodies/CreateWordVariantBody"
      responses:
        "200":
          $ref: "#/components/responses/WordVariantData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/WordNotFound"
  "/words/{id}/variants/{field}":
    get:
      tags:
        - Words
        - Available Public
      summary: Search variants of word characteristic
      operationId: searchWordVariants
      parameters:
        - $ref: "#/components/parameters/wordIdParam"
        - $ref: "#/components/parameters/variantFieldParam"
      responses:
        "200":
          $ref: "#/components/responses/WordVariantsListData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "404":
          $ref: "#/components/responses/WordNotFound"
  "/words/{id}/variants/{variantId}":
    patch:
      tags:
        - Words
        - Available Providers
      security:
        - BearerAuth: []
        - ProviderClientId: []
          ProviderClientSecret: []
          ProviderUserId: []
      summary: Update word variant data
      operationId: updateWordVariant
      parameters:
        - $ref: "#/components/parameters/wordIdParam"
        - $ref: "#/components/parameters/variantIdParam"
      requestBody:
        $ref: "#/components/requestBodies/EditWordVariantBody"
      responses:
        "200":
          $ref: "#/components/responses/WordVariantData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/WordVariantNotFound"
    delete:
      tags:
        - Words
        - Available Providers
      security:
        - BearerAuth: []
        - ProviderClientId: []
          ProviderClientSecret: []
          ProviderUserId: []
      summary: Delete word variant
      operationId: deleteWordVariant
      parameters:
        - $ref: "#/components/parameters/wordIdParam"
        - $ref: "#/components/parameters/variantIdParam"
      responses:
        "200":
          $ref: "#/components/responses/WordVariantData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/WordVariantNotFound"
  "/words/{id}/variants/{variantId}/votes":
    post:
      tags:
        - Words
        - Available Providers
      security:
        - BearerAuth: []
        - ProviderClientId: []
          ProviderClientSecret: []
          ProviderUserId: []
      summary: Add vote to word variant
      operationId: addVoteToWordVariant
      parameters:
        - $ref: "#/components/parameters/wordIdParam"
        - $ref: "#/components/parameters/variantIdParam"
      requestBody:
        $ref: "#/components/requestBodies/EmptyBody"
      responses:
        "200":
          $ref: "#/components/responses/WordVariantData"
        "400":
          $ref: "#/components/responses/WordVariantVoteExist"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/WordVariantNotFound"
    delete:
      tags:
        - Words
        - Available Providers
      security:
        - BearerAuth: []
        - ProviderClientId: []
          ProviderClientSecret: []
          ProviderUserId: []
      summary: Delete vote from word variant
      operationId: deleteVoteFromWordVariant
      parameters:
        - $ref: "#/components/parameters/wordIdParam"
        - $ref: "#/components/parameters/variantIdParam"
      responses:
        "200":
          $ref: "#/components/responses/WordVariantData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/WordVariantVoteNotFound"
  "/words/{id}/references/{type}/{refId}":
    post:
      tags:
        - Words
        - Available Providers
      security:
        - BearerAuth: []
        - ProviderClientId: []
          ProviderClientSecret: []
          ProviderUserId: []
      summary: Create word reference
      operationId: createWordReference
      parameters:
        - $ref: "#/components/parameters/wordIdParam"
        - $ref: "#/components/parameters/wordRefTypeParam"
        - $ref: "#/components/parameters/wordRefIdParam"
      requestBody:
        $ref: "#/components/requestBodies/EmptyBody"
      responses:
        "200":
          $ref: "#/components/responses/WordReferenceData"
        "400":
          $ref: "#/components/responses/WordReferenceExist"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/WordNotFound"
    delete:
      tags:
        - Words
        - Available Providers
      security:
        - BearerAuth: []
        - ProviderClientId: []
          ProviderClientSecret: []
          ProviderUserId: []
      summary: Delete word reference
      description: Available for `creator` or `System Admin`
      operationId: deleteWordReference
      parameters:
        - $ref: "#/components/parameters/wordIdParam"
        - $ref: "#/components/parameters/wordRefTypeParam"
        - $ref: "#/components/parameters/wordRefIdParam"
      responses:
        "200":
          $ref: "#/components/responses/WordReferenceData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/WordReferenceNotFound"
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Authorization using Auth routes
    ProviderClientId:
      type: apiKey
      name: client-id
      in: header
      description: Authorization for providers requests
    ProviderClientSecret:
      type: apiKey
      name: client-secret
      in: header
      description: Authorization for providers requests
    ProviderUserId:
      type: apiKey
      name: user-id
      in: header
      description: Authorization for providers requests
  schemas:
    ErrorResponse:
      type: object
      required:
        - errorCode
        - message
      properties:
        errorCode:
          type: string
        message:
          type: string
    SortModel:
      type: object
      required:
        - field
      properties:
        field:
          type: string
          description: The field for sorting
        sort:
          type: string
          nullable: true
          enum:
            - asc
            - desc
          description: The sorting order
    SearchModel:
      type: object
      properties:
        limit:
          type: number
          description: Number of return items
        offset:
          type: number
          description: Number of skip items
        sort:
          type: array
          items:
            $ref: "#/components/schemas/SortModel"
    User:
      type: object
      required:
        - id
        - firstName
      properties:
        id:
          type: string
          description: Wallet Address
          example: 0:c424531feb64afeb46607e0aff5609628207213308b62c123891d817389fc35b
        firstName:
          type: string
          description: First Name
        lastName:
          type: string
          description: Last Name
        middleName:
          type: string
          description: Middle Name
        avatar:
          type: string
          description: Avatar
    Provider:
      type: object
      required:
        - id
        - name
        - address
        - callback
        - blocked
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
          description: Provider ID
        name:
          type: string
          description: Provider Name
        address:
          type: string
          description: Provider URL Address
        callback:
          type: string
          description: Provider Callback Address
        blocked:
          type: boolean
          description: If `true` provider is blocked
        createdAt:
          type: string
          format: date-time
          description: Creation Date
        updatedAt:
          type: string
          format: date-time
          description: Last Updating Date
    ProviderWithSecret:
      type: object
      required:
        - id
        - secret
        - name
        - address
        - callback
        - blocked
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
          description: Provider ID
        secret:
          type: string
          description: Provider Secret for API requests
        name:
          type: string
          description: Provider Name
        address:
          type: string
          description: Provider URL Address
        callback:
          type: string
          description: Provider Callback Address
        createdAt:
          type: string
          format: date-time
          description: Creation Date
        updatedAt:
          type: string
          format: date-time
          description: Last Updating Date
    ActivityType:
      type: string
      description: Activity Type
      enum:
        - tagCreated
        - tagUpdated
        - tagDeleted
        - folderCreated
        - folderUpdated
        - folderMoved
        - folderDeleted
        - folderFilterCreated
        - folderFilterUpdated
        - folderFilterMoved
        - folderFilterDeleted
        - wordCreated
        - wordDeleted
        - wordTagsUpdated
        - wordVariantCreated
        - wordVariantUpdated
        - wordVariantDeleted
        - wordVariantVoteCreated
        - wordVariantVoteDeleted
        - wordReferenceCreated
        - wordReferenceDeleted
    ActivityLog:
      type: object
      required:
        - id
        - type
        - userId
        - artefactId
        - data
      properties:
        id:
          type: string
          format: uuid
          description: Artefact ID
        type:
          $ref: "#/components/schemas/ActivityType"
        userId:
          type: string
          description: Wallet Address
          example: 0:c424531feb64afeb46607e0aff5609628207213308b62c123891d817389fc35b
        artefactId:
          type: string
          format: uuid
          description: Artefact ID
        providerId:
          type: string
          format: uuid
          description: Provider ID
        data:
          type: object
          description: Activity Data depends on type
        createdAt:
          type: string
          format: date-time
          description: Creation Date
    AdminAccess:
      type: object
      required:
        - wallet
        - createdAt
      properties:
        wallet:
          type: string
          description: Wallet Address
          example: 0:c424531feb64afeb46607e0aff5609628207213308b62c123891d817389fc35b
        createdAt:
          type: string
          format: date-time
          description: Creation Date
        userData:
          $ref: "#/components/schemas/User"
    ComplaintStatus:
      type: string
      description: Complaint Status
      enum:
        - open
        - accepted
        - declined
        - closed
    ComplaintType:
      type: string
      description: Complaint Type
      enum:
        - item
        - variant
        - reference
    Complaint:
      type: object
      required:
        - id
        - status
        - type
        - wordId
        - comment
        - createdBy
        - createdAt
      properties:
        id:
          type: string
          format: uuid
          description: Complaint ID
        status:
          $ref: "#/components/schemas/ComplaintStatus"
        type:
          $ref: "#/components/schemas/ComplaintType"
        wordId:
          type: string
          format: uuid
          description: Word ID
        variantId:
          type: string
          format: uuid
          description: Word variant ID
        refId:
          type: string
          format: uuid
          description: Word reference ID
        comment:
          type: string
          description: Complaint comment
        createdBy:
          type: string
          description: Wallet Address
          example: 0:c424531feb64afeb46607e0aff5609628207213308b62c123891d817389fc35b
        createdAt:
          type: string
          format: date-time
          description: Creation Date
        wordData:
          $ref: "#/components/schemas/Word"
        variantData:
          $ref: "#/components/schemas/WordVariant"
        referenceData:
          $ref: "#/components/schemas/WordReferencePreview"
        authorData:
          $ref: "#/components/schemas/User"
        createdByData:
          $ref: "#/components/schemas/User"
    File:
      type: object
      required:
        - id
        - name
        - mimeType
        - size
        - createdBy
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
          description: File ID
        name:
          type: string
          description: File name
        mimeType:
          type: string
          description: File mime type
        size:
          type: number
          description: File size in bytes
        createdBy:
          type: string
          description: Wallet Address
          example: 0:c424531feb64afeb46607e0aff5609628207213308b62c123891d817389fc35b
        providerId:
          type: string
          format: uuid
          description: Provider ID
        createdAt:
          type: string
          format: date-time
          description: Creation Date
        updatedAt:
          type: string
          format: date-time
          description: Last Updating Date
    Folder:
      type: object
      required:
        - id
        - name
        - createdBy
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
          description: Folder ID
        parentId:
          type: string
          nullable: true
          format: uuid
          description: Folder parent ID
        name:
          type: string
          description: Folder name
        order:
          type: number
          description: Folder order
        isPublic:
          type: boolean
          description: If `true` - shows everyone, if `null` - on review to make public,
            if `false` - shows only for creator
        createdBy:
          type: string
          description: Wallet Address
          example: 0:c424531feb64afeb46607e0aff5609628207213308b62c123891d817389fc35b
        providerId:
          type: string
          format: uuid
          description: Provider ID
        createdAt:
          type: string
          format: date-time
          description: Creation Date
        updatedAt:
          type: string
          format: date-time
          description: Last Updating Date
    FolderFormulaOperator:
      type: string
      description: Formula operator
      enum:
        - equal
        - not_equal
    FolderFilter:
      type: object
      required:
        - id
        - folderId
        - field
        - operator
        - createdBy
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
          description: Filter ID
        folder:
          type: string
          format: uuid
          description: Folder ID
        field:
          type: string
          description: Formula attribute
        operator:
          $ref: "#/components/schemas/FolderFormulaOperator"
        value:
          type: string
          description: Formula value
        unit:
          type: string
          description: Formula unit
        order:
          type: number
          description: Filter order
        createdBy:
          type: string
          description: Wallet Address
          example: 0:c424531feb64afeb46607e0aff5609628207213308b62c123891d817389fc35b
        providerId:
          type: string
          format: uuid
          description: Provider ID
        createdAt:
          type: string
          format: date-time
          description: Creation Date
        updatedAt:
          type: string
          format: date-time
          description: Last Updating Date
    FolderTreeItem:
      type: object
      required:
        - id
        - name
        - createdBy
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
          description: Folder ID
        parentId:
          type: string
          nullable: true
          format: uuid
          description: Folder parent ID
        name:
          type: string
          description: Folder name
        order:
          type: number
          description: Folder order
        isPublic:
          type: boolean
          description: If `true` - shows everyone, if `null` - on review to make public,
            if `false` - shows only for creator
        createdBy:
          type: string
          description: Wallet Address
          example: 0:c424531feb64afeb46607e0aff5609628207213308b62c123891d817389fc35b
        providerId:
          type: string
          format: uuid
          description: Provider ID
        createdAt:
          type: string
          format: date-time
          description: Creation Date
        updatedAt:
          type: string
          format: date-time
          description: Last Updating Date
        children:
          type: array
          items:
            $ref: "#/components/schemas/FolderTreeItem"
    FolderFullData:
      type: object
      required:
        - id
        - name
        - createdBy
        - createdAt
        - updatedAt
        - filters
      properties:
        id:
          type: string
          format: uuid
          description: Folder ID
        parentId:
          type: string
          nullable: true
          format: uuid
          description: Folder parent ID
        name:
          type: string
          description: Folder name
        order:
          type: number
          description: Folder order
        isPublic:
          type: boolean
          description: If `true` - shows everyone, if `null` - on review to make public,
            if `false` - shows only for creator
        createdBy:
          type: string
          description: Wallet Address
          example: 0:c424531feb64afeb46607e0aff5609628207213308b62c123891d817389fc35b
        providerId:
          type: string
          format: uuid
          description: Provider ID
        createdAt:
          type: string
          format: date-time
          description: Creation Date
        updatedAt:
          type: string
          format: date-time
          description: Last Updating Date
        createdByData:
          $ref: "#/components/schemas/User"
        filters:
          type: array
          items:
            $ref: "#/components/schemas/FolderFilter"
    Tag:
      type: object
      required:
        - id
        - field
        - createdBy
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
          description: Tag ID
        field:
          type: string
          description: Tag name
        color:
          type: string
          description: Tag color
        createdBy:
          type: string
          description: Wallet Address
          example: 0:c424531feb64afeb46607e0aff5609628207213308b62c123891d817389fc35b
        providerId:
          type: string
          format: uuid
          description: Provider ID
        createdAt:
          type: string
          format: date-time
          description: Creation Date
        updatedAt:
          type: string
          format: date-time
          description: Last Updating Date
    Unit:
      type: object
      required:
        - key
        - name
      properties:
        key:
          type: string
          description: Unique unit key
        name:
          type: object
          description: Localized unit name
          properties:
            ru:
              type: string
            en:
              type: string
    UserWithRating:
      type: object
      required:
        - id
        - firstName
      properties:
        id:
          type: string
          description: Wallet Address
          example: 0:c424531feb64afeb46607e0aff5609628207213308b62c123891d817389fc35b
        firstName:
          type: string
          description: First Name
        lastName:
          type: string
          description: Last Name
        middleName:
          type: string
          description: Middle Name
        avatar:
          type: string
          description: Avatar
        isBlocked:
          type: boolean
          description: Is user access blocked
        wordsCreated:
          type: number
          description: Number of words created by user
        wordsParticipant:
          type: number
          description: Number of variants user created
        variantsLiked:
          type: number
          description: Number of likes user added
        complaintsCreated:
          type: number
          description: Number of complaints user created
    Word:
      type: object
      required:
        - id
        - name
        - createdBy
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
          description: Word ID
        name:
          type: string
          description: Word name
        shortName:
          type: string
          description: Word short name
        description:
          type: string
          description: Word description
        unit:
          type: string
          description: Word unit
        systemUnit:
          type: string
          description: System unit key
        coeff:
          type: number
          description: Coeff for mapping systemUnit with unit
        photo:
          type: string
          description: Word main photo
        video:
          type: string
          description: Word main video
        folders:
          type: array
          description: Word folders
          items:
            type: string
        providerId:
          type: string
          format: uuid
          description: Provider ID
        createdBy:
          type: string
          description: Wallet Address
          example: 0:c424531feb64afeb46607e0aff5609628207213308b62c123891d817389fc35b
        createdAt:
          type: string
          format: date-time
          description: Creation Date
        updatedAt:
          type: string
          format: date-time
          description: Last Updating Date
        deletedAt:
          type: string
          format: date-time
          description: Deleted Date
    WordWithData:
      type: object
      required:
        - id
        - name
        - createdBy
        - createdAt
        - updatedAt
        - createdByData
        - tags
        - synonyms
        - translations
      properties:
        id:
          type: string
          format: uuid
          description: Word ID
        name:
          type: string
          description: Word name
        shortName:
          type: string
          description: Word short name
        description:
          type: string
          description: Word description
        unit:
          type: string
          description: Word unit
        systemUnit:
          type: string
          description: System unit key
        coeff:
          type: number
          description: Coeff for mapping systemUnit with unit
        photo:
          type: string
          description: Word main photo
        video:
          type: string
          description: Word main video
        folders:
          type: array
          description: Word folders
          items:
            type: string
        providerId:
          type: string
          format: uuid
          description: Provider ID
        createdBy:
          type: string
          description: Wallet Address
          example: 0:c424531feb64afeb46607e0aff5609628207213308b62c123891d817389fc35b
        createdAt:
          type: string
          format: date-time
          description: Creation Date
        updatedAt:
          type: string
          format: date-time
          description: Last Updating Date
        deletedAt:
          type: string
          format: date-time
          description: Deleted Date
        createdByData:
          $ref: "#/components/schemas/User"
        tags:
          type: array
          items:
            $ref: "#/components/schemas/Tag"
        synonyms:
          type: array
          items:
            $ref: "#/components/schemas/WordReferencePreview"
        translations:
          type: array
          items:
            $ref: "#/components/schemas/WordReferencePreview"
    WordVariant:
      type: object
      required:
        - id
        - wordId
        - field
        - value
        - createdBy
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
          description: Variant ID
        wordId:
          type: string
          format: uuid
          description: Word ID
        field:
          type: string
          description: Variant field
        value:
          type: string
          description: Variant value
        votes:
          type: array
          description: Users ids who liked the variant
          items:
            type: string
        providerId:
          type: string
          format: uuid
          description: Provider ID
        createdBy:
          type: string
          description: Wallet Address
          example: 0:c424531feb64afeb46607e0aff5609628207213308b62c123891d817389fc35b
        createdAt:
          type: string
          format: date-time
          description: Creation Date
        updatedAt:
          type: string
          format: date-time
          description: Last Updating Date
        createdByData:
          $ref: "#/components/schemas/User"
    WordReferenceType:
      type: string
      description: Word Reference Type
      enum:
        - synonym
        - translate
    WordReference:
      type: object
      required:
        - wordId
        - type
        - refId
        - createdBy
        - createdAt
      properties:
        wordId:
          type: string
          format: uuid
          description: Word ID
        type:
          $ref: "#/components/schemas/WordReferenceType"
        refId:
          type: string
          format: uuid
          description: Word reference ID
        providerId:
          type: string
          format: uuid
          description: Provider ID
        createdBy:
          type: string
          description: Wallet Address
          example: 0:c424531feb64afeb46607e0aff5609628207213308b62c123891d817389fc35b
        createdAt:
          type: string
          format: date-time
          description: Creation Date
        createdByData:
          $ref: "#/components/schemas/User"
    WordReferencePreview:
      type: object
      required:
        - id
        - name
        - type
        - createdBy
      properties:
        id:
          type: string
          format: uuid
          description: Word ID
        name:
          type: string
          description: Word name
        type:
          $ref: "#/components/schemas/WordReferenceType"
        description:
          type: string
          description: Word description by most liked variant
        photo:
          type: string
          description: Word photo by most liked variant
        video:
          type: string
          description: Word video by most liked variant
        createdBy:
          type: string
          description: Wallet Address
          example: 0:c424531feb64afeb46607e0aff5609628207213308b62c123891d817389fc35b
        createdByData:
          $ref: "#/components/schemas/User"
  requestBodies:
    EmptyBody:
      content:
        application/json:
          schema:
            type: object
    SearchProvidersBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              isBlocked:
                type: boolean
                description: Filter by blocked status
              limit:
                type: number
                description: Number of return items
              offset:
                type: number
                description: Number of skip items
              sort:
                type: array
                items:
                  $ref: "#/components/schemas/SortModel"
    ProviderRequestBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - name
              - address
              - callback
            properties:
              name:
                type: string
                description: Provider Name
              address:
                type: string
                description: Provider URL Address
              callback:
                type: string
                description: Provider Callback Address
    SearchActivitiesBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              artefactId:
                type: string
                format: uuid
                description: Artefact ID
              providerId:
                type: string
                format: uuid
                description: Provider ID
              types:
                type: array
                items:
                  $ref: "#/components/schemas/ActivityType"
              limit:
                type: number
                description: Number of return items
              offset:
                type: number
                description: Number of skip items
              sort:
                type: array
                items:
                  $ref: "#/components/schemas/SortModel"
    CreateAdminAccessBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - wallet
            properties:
              wallet:
                type: string
                description: Wallet Address
                example: 0:c424531feb64afeb46607e0aff5609628207213308b62c123891d817389fc35b
    SearchComplaintsBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              statuses:
                type: array
                items:
                  $ref: "#/components/schemas/ComplaintStatus"
              types:
                type: array
                items:
                  $ref: "#/components/schemas/ComplaintType"
              limit:
                type: number
                description: Number of return items
              offset:
                type: number
                description: Number of skip items
              sort:
                type: array
                items:
                  $ref: "#/components/schemas/SortModel"
    CreateComplaintBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - wordId
              - comment
            properties:
              wordId:
                type: string
                format: uuid
                description: Word ID
              variantId:
                type: string
                format: uuid
                description: Word variant ID
              refId:
                type: string
                format: uuid
                description: Word reference ID
              comment:
                type: string
                description: Complaint comment
    EditComplaintBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              comment:
                type: string
                description: Complaint comment
              status:
                $ref: "#/components/schemas/ComplaintStatus"
    UploadFileBody:
      content:
        multipart/form-data:
          schema:
            type: object
            properties:
              id:
                type: string
                format: uuid
                description: If set and file exists then file content will be overwritten
              files:
                type: string
                format: binary
    CreateFolderBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
                description: Folder name
              parentId:
                type: string
                nullable: true
                format: uuid
                description: Folder parent ID
              order:
                type: number
                description: Folder order
    EditFolderBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                description: Folder name
    MoveFolderBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - id
            properties:
              id:
                type: string
                format: uuid
                description: Folder ID
              parentId:
                type: string
                nullable: true
                format: uuid
                description: Folder patent ID
              afterId:
                type: string
                format: uuid
                description: Should move after folder ID
              beforeId:
                type: string
                format: uuid
                description: Should move before folder ID
    MakePublicFolderBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              shouldCancel:
                type: boolean
                description: Available for `System Admin` and used to cancel user public request
    CreateFolderFilterBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - field
              - operator
              - value
            properties:
              field:
                type: string
                description: Formula attribute
              operator:
                $ref: "#/components/schemas/FolderFormulaOperator"
              value:
                type: string
                description: Formula value
              unit:
                type: string
                description: Formula unit
              order:
                type: number
                description: Filter order
    EditFolderFilterBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              field:
                type: string
                description: Formula attribute
              operator:
                $ref: "#/components/schemas/FolderFormulaOperator"
              value:
                type: string
                description: Formula value
              unit:
                type: string
                description: Formula unit
    SearchFoldersFiltersBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              searchTerm:
                type: string
                description: Search term
              limit:
                type: number
                description: Number of return items
              offset:
                type: number
                description: Number of skip items
              sort:
                type: array
                items:
                  $ref: "#/components/schemas/SortModel"
    MoveFolderFilterBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - id
              - filterId
            properties:
              filterId:
                type: string
                format: uuid
                description: Filter ID
              afterId:
                type: string
                format: uuid
                description: Should move after folder ID
              beforeId:
                type: string
                format: uuid
                description: Should move before folder ID
    SearchTagsBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              searchTerm:
                type: string
                description: Search term
              ids:
                type: array
                description: Tag ids
                items:
                  type: string
                  format: uuid
              limit:
                type: number
                description: Number of return items
              offset:
                type: number
                description: Number of skip items
              sort:
                type: array
                items:
                  $ref: "#/components/schemas/SortModel"
    CreateTagBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - field
            properties:
              field:
                type: string
                description: Tag name
              color:
                type: string
                description: Tag color
    UpdateTagBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              field:
                type: string
                description: Tag name
              color:
                type: string
                description: Tag color
    ModifyUnitBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Unit"
    SearchUsersBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              searchTerm:
                type: string
                description: Part of full name
              isBlocked:
                type: boolean
                description: Flag to filter blocked users
              limit:
                type: number
                description: Number of return items
              offset:
                type: number
                description: Number of skip items
              sort:
                type: array
                items:
                  $ref: "#/components/schemas/SortModel"
    SearchWordsBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              ids:
                type: array
                description: Search by ids
                items:
                  type: string
                  format: uuid
              searchTerm:
                type: string
                description: Search term
              withUnit:
                type: boolean
                description: Return words with unit data
              folders:
                type: array
                description: Folders ids
                items:
                  type: string
                  format: uuid
              limit:
                type: number
                description: Number of return items
              offset:
                type: number
                description: Number of skip items
              sort:
                type: array
                items:
                  $ref: "#/components/schemas/SortModel"
    CreateWordBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
                description: Word name
              shortName:
                type: string
                description: Word short name
              description:
                type: string
                description: Word description
              unit:
                type: string
                description: Word unit
              systemUnit:
                type: string
                description: System unit key
              coeff:
                type: number
                description: Coeff for mapping systemUnit with unit
              photos:
                type: array
                description: Word photos
                items:
                  type: string
              videos:
                type: array
                description: Word videos
                items:
                  type: string
    EditWordTagsBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - tags
            properties:
              tags:
                type: array
                description: Tags ids
                items:
                  type: string
    AddWordFoldersBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - folders
            properties:
              folders:
                type: array
                description: Folders ids
                items:
                  type: string
    CreateWordVariantBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - field
              - value
            properties:
              field:
                type: string
                description: Variant field
              value:
                type: string
                description: Variant value
              systemUnit:
                type: string
                description: System unit key
              coeff:
                type: number
                description: Coeff for mapping systemUnit with unit
    EditWordVariantBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - value
            properties:
              value:
                type: string
                description: Variant value
              systemUnit:
                type: string
                description: System unit key
              coeff:
                type: number
                description: Coeff for mapping systemUnit with unit
  responses:
    InvalidData:
      description: Invalid request data
    Unauthorized:
      description: Unauthorized
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: api:403
            message: You don't have access to this method
    UserData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/User"
    UserNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: user:404
            message: User does not exist
    ProviderData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Provider"
    ProviderWithSecretData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProviderWithSecret"
    SearchProvidersData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - total
              - items
            properties:
              total:
                type: number
              items:
                type: array
                items:
                  $ref: "#/components/schemas/Provider"
    ProviderNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: provider:404
            message: Provider not found
    SearchActivitiesData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - total
              - items
            properties:
              total:
                type: number
              items:
                type: array
                items:
                  $ref: "#/components/schemas/ActivityLog"
    CheckUserAccess:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - isAdmin
              - isWalletAdmin
            properties:
              isAdmin:
                type: boolean
                description: If `true` user has admin access
              isWalletAdmin:
                type: boolean
                description: If `true` user has wallet admin access
    SearchAdminAccess:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - total
              - items
            properties:
              total:
                type: number
              items:
                type: array
                items:
                  $ref: "#/components/schemas/AdminAccess"
    AdminAccessData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AdminAccess"
    AdminAccessExist:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: admin-access:400-exist
            message: User has admin access
    AdminAccessNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: admin-access:404
            message: User has no admin access
    SearchComplaintsData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - total
              - items
            properties:
              total:
                type: number
              items:
                type: array
                items:
                  $ref: "#/components/schemas/Complaint"
    ComplaintData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Complaint"
    ComplaintNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: complaint:404
            message: Complain not found
    FileBinary:
      description: Successful operation
      content:
        text/plain:
          schema:
            type: string
            format: binary
    FileData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/File"
    FileNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: file:404
            message: File not exist
    FolderData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Folder"
    FolderFullData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/FolderFullData"
    FolderTreeData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/FolderTreeItem"
    FolderNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: folder:404
            message: Folder not found
    ParentFolderNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: folder:404
            message: Parent folder not found
    FolderIsPublic:
      description: Folder is public
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: folder:400-public
            message: Folder is public
    FolderFilterData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/FolderFilter"
    FolderFilterNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            FolderNotFound:
              value:
                errorCode: folder:404
                message: Folder not found
            FilterNotFound:
              value:
                errorCode: folder:404-filter
                message: Folder filter not found
    SearchFolderFilterData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - total
              - items
            properties:
              total:
                type: number
              items:
                type: string
    SearchTagsData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - total
              - items
            properties:
              total:
                type: number
              items:
                type: array
                items:
                  $ref: "#/components/schemas/Tag"
    TagData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Tag"
    TagNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: tag:404
            message: Tag not found
    SearchUnitsData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Unit"
    UnitData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Unit"
    SystemUnitNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: systemUnit:404
            message: System unit not found
    SearchUsersData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - total
              - items
            properties:
              total:
                type: number
              items:
                type: array
                items:
                  $ref: "#/components/schemas/UserWithRating"
    UserRatingData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UserWithRating"
    SearchWordsData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - total
              - items
            properties:
              total:
                type: number
              items:
                type: array
                items:
                  $ref: "#/components/schemas/Word"
    WordData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Word"
    WordFullData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/WordWithData"
    WordVariantData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/WordVariant"
    WordVariantsListData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/WordVariant"
    WordReferenceData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/WordReference"
    WordNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: word:404
            message: Word not found
    WordVariantNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            WordNotFound:
              value:
                errorCode: word:404
                message: Word not found
            VariantNotFound:
              value:
                errorCode: word:404-variant
                message: Word variant not found
    WordVariantVoteExist:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: word:400-vote-exist
            message: Word variant vote exists
    WordVariantVoteNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            WordNotFound:
              value:
                errorCode: word:404
                message: Word not found
            VariantNotFound:
              value:
                errorCode: word:404-variant
                message: Word variant not found
            VoteNotFound:
              value:
                errorCode: word:404-vote
                message: Word variant vote not found
    WordReferenceExist:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: word:400-reference-exist
            message: Word reference exist
    WordReferenceNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            WordNotFound:
              value:
                errorCode: word:404
                message: Word not found
            ReferenceNotFound:
              value:
                errorCode: word:404-reference
                message: Word reference not found
  parameters:
    providerIdParam:
      in: path
      name: id
      description: Provider ID
      required: true
      schema:
        type: string
        format: uuid
    walletParam:
      in: path
      name: wallet
      description: Wallet Address
      required: true
      schema:
        type: string
    complaintIdParam:
      in: path
      name: id
      description: Complaint ID
      required: true
      schema:
        type: string
        format: uuid
    fileIdParam:
      in: path
      name: id
      description: File ID
      required: true
      schema:
        type: string
        format: uuid
    folderIdParam:
      in: path
      name: id
      description: Folder ID
      required: true
      schema:
        type: string
        format: uuid
    filterIdParam:
      in: path
      name: filterId
      description: Filter ID
      required: true
      schema:
        type: string
        format: uuid
    folderSearchModeParam:
      in: query
      name: mode
      schema:
        type: string
        description: Based on mode different folders may be returned
        default: public
        enum:
          - public
          - personal
          - review
    tagIdParam:
      in: path
      name: id
      description: Tag ID
      required: true
      schema:
        type: string
        format: uuid
    unitKeyParam:
      in: path
      name: key
      description: Unit key
      required: true
      schema:
        type: string
    userIdParam:
      in: path
      name: id
      description: User ID
      required: true
      schema:
        type: string
    wordIdParam:
      in: path
      name: id
      description: Word ID
      required: true
      schema:
        type: string
        format: uuid
    variantIdParam:
      in: path
      name: variantId
      description: Variant ID
      required: true
      schema:
        type: string
        format: uuid
    variantFieldParam:
      in: path
      name: field
      description: The characteristic to get its variants
      required: true
      schema:
        type: string
    wordRefTypeParam:
      in: path
      name: type
      description: Reference type
      required: true
      schema:
        $ref: "#/components/schemas/WordReferenceType"
    wordRefIdParam:
      in: path
      name: refId
      description: Reference ID
      required: true
      schema:
        type: string
        format: uuid
