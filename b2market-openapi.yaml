openapi: 3.0.0
info:
  title: REST API for B2Market
  version: 1.0.0
servers:
  - url: https://localhost:8082
  - url: https://market.b2p.space/api
tags:
  - name: Apps
  - name: Auth
  - name: Activities
  - name: Admin Access
  - name: Files
  - name: Folders
  - name: Providers
  - name: Tags
  - name: Tasks
  - name: Products
  - name: Places
  - name: Orders
  - name: Delivery
  - name: Available Public
    description: This methods does not require authorization
  - name: Available Providers
    description: "description: This methods requires Authorizations by `client-id` +
      `client-secret` + `user-id`"
paths:
  /apps:
    get:
      tags:
        - Apps
      security:
        - BearerAuth: []
      summary: Get activated apps
      description: Available for everyone for
      operationId: getApps
      responses:
        "200":
          $ref: "#/components/responses/AppPublicData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  /apps/full:
    get:
      tags:
        - Apps
      security:
        - BearerAuth: []
      summary: Get activated apps full data
      description: Available for supper admins
      operationId: getAppsFull
      responses:
        "200":
          $ref: "#/components/responses/AppListData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  /apps/activate:
    post:
      tags:
        - Apps
      security:
        - BearerAuth: []
      summary: Activate app
      description: Available for supper admins
      operationId: activateApp
      requestBody:
        $ref: "#/components/requestBodies/ActivateAppBody"
      responses:
        "200":
          $ref: "#/components/responses/AppData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/AppNotFound"
        "500":
          $ref: "#/components/responses/AppRegistrationError"
  "/apps/deactivate/{name}":
    post:
      tags:
        - Apps
      security:
        - BearerAuth: []
      summary: Deactivate app
      description: Available for supper admins
      operationId: deactivateApp
      parameters:
        - $ref: "#/components/parameters/appNameParam"
      responses:
        "200":
          $ref: "#/components/responses/AppData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/AppNotFound"
  /auth/start:
    post:
      tags:
        - Auth
      summary: Start authentication process
      operationId: startAuth
      requestBody:
        $ref: "#/components/requestBodies/EmptyBody"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - proof
                properties:
                  proof:
                    type: string
  /auth/verify:
    post:
      tags:
        - Auth
      summary: Verify authentication wallet
      operationId: verifyAuth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - proof
                - account
              properties:
                spaceId:
                  type: string
                  description: Selected Space ID
                proof:
                  type: object
                  required:
                    - payload
                    - signature
                    - timestamp
                    - domain
                  properties:
                    payload:
                      type: string
                      description: TON Connect payload
                    signature:
                      type: string
                      description: TON Connect signature
                    timestamp:
                      type: number
                      description: Timestamp of authentication
                    domain:
                      type: object
                      required:
                        - lengthBytes
                        - value
                      properties:
                        lengthBytes:
                          type: number
                        value:
                          type: string
                account:
                  type: object
                  required:
                    - address
                    - network
                    - publicKey
                    - walletStateInit
                  properties:
                    address:
                      type: string
                      description: Wallet Address
                      example: 0:c424531feb64afeb46607e0aff5609628207213308b62c123891d817389fc35b
                    network:
                      type: string
                      description: Blockchain chain
                    publicKey:
                      type: string
                      description: Wallet Public Key
                    walletStateInit:
                      type: string
                      description: Wallet Public Key
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - accessToken
                  - refreshToken
                  - profile
                properties:
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
                  profile:
                    $ref: "#/components/schemas/User"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                errorCode: auth:404
                message: The proof has not found
  /auth/refresh:
    post:
      tags:
        - Auth
      summary: Refresh Access Token by Refresh token
      operationId: refreshToken
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - accessToken
                - refreshToken
              properties:
                spaceId:
                  type: string
                  description: Selected Space ID
                accessToken:
                  type: string
                refreshToken:
                  type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - accessToken
                  - refreshToken
                  - profile
                properties:
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
                  profile:
                    $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/UserNotFound"
  /auth/profile:
    get:
      tags:
        - Auth
      security:
        - BearerAuth: []
      summary: Get Profile
      operationId: getProfile
      responses:
        "200":
          $ref: "#/components/responses/UserData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/UserNotFound"
    patch:
      tags:
        - Auth
      security:
        - BearerAuth: []
      summary: Update Profile
      operationId: updateProfile
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  description: First Name
                lastName:
                  type: string
                  description: Last Name
                middleName:
                  type: string
                  description: Middle Name
                avatar:
                  type: string
                  description: Avatar
      responses:
        "200":
          $ref: "#/components/responses/UserData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/UserNotFound"
  /providers/my:
    get:
      tags:
        - Providers
        - Available Providers
      security:
        - ProviderClientId: []
          ProviderClientSecret: []
      summary: Get provider data
      operationId: getProvider
      responses:
        "200":
          $ref: "#/components/responses/ProviderData"
        "404":
          $ref: "#/components/responses/ProviderNotFound"
    patch:
      tags:
        - Providers
        - Available Providers
      security:
        - ProviderClientId: []
          ProviderClientSecret: []
      summary: Update provider data
      operationId: updateProvider
      requestBody:
        $ref: "#/components/requestBodies/ProviderRequestBody"
      responses:
        "200":
          $ref: "#/components/responses/ProviderData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "404":
          $ref: "#/components/responses/ProviderNotFound"
    delete:
      tags:
        - Providers
        - Available Providers
      security:
        - ProviderClientId: []
          ProviderClientSecret: []
      summary: Delete provider
      operationId: deleteProvider
      responses:
        "200":
          $ref: "#/components/responses/ProviderData"
        "404":
          $ref: "#/components/responses/ProviderNotFound"
  /providers/register:
    post:
      tags:
        - Providers
        - Available Public
      summary: Register new provider
      operationId: registerProvider
      requestBody:
        $ref: "#/components/requestBodies/RegisterProviderRequestBody"
      responses:
        "200":
          $ref: "#/components/responses/ProviderWithSecretData"
        "400":
          $ref: "#/components/responses/InvalidData"
  /providers/search:
    post:
      tags:
        - Providers
      security:
        - BearerAuth: []
      summary: Search providers
      operationId: searchProviders
      description: Required `Admin` access
      requestBody:
        $ref: "#/components/requestBodies/SearchProvidersBody"
      responses:
        "200":
          $ref: "#/components/responses/SearchProvidersData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  "/providers/{id}/block":
    post:
      tags:
        - Providers
      security:
        - BearerAuth: []
      summary: Block provider
      operationId: blockProvider
      description: Required `Admin` access
      parameters:
        - $ref: "#/components/parameters/providerIdParam"
      requestBody:
        $ref: "#/components/requestBodies/EmptyBody"
      responses:
        "200":
          $ref: "#/components/responses/ProviderData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/ProviderNotFound"
  "/providers/{id}/unblock":
    post:
      tags:
        - Providers
      security:
        - BearerAuth: []
      summary: Unblock provider
      operationId: unblockProvider
      description: Required `Admin` access
      parameters:
        - $ref: "#/components/parameters/providerIdParam"
      requestBody:
        $ref: "#/components/requestBodies/EmptyBody"
      responses:
        "200":
          $ref: "#/components/responses/ProviderData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/ProviderNotFound"
  /activities/search:
    post:
      tags:
        - Activities
        - Available Providers
      security:
        - BearerAuth: []
        - ProviderClientId: []
          ProviderClientSecret: []
          ProviderUserId: []
      summary: Search activities
      operationId: searchActivities
      requestBody:
        $ref: "#/components/requestBodies/SearchActivitiesBody"
      responses:
        "200":
          $ref: "#/components/responses/SearchActivitiesData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
  /admin-access/check:
    get:
      tags:
        - Admin Access
      security:
        - BearerAuth: []
      summary: Check Admin Access
      operationId: checkAdminAccess
      responses:
        "200":
          $ref: "#/components/responses/CheckUserAccess"
        "401":
          $ref: "#/components/responses/Unauthorized"
  /admin-access/search:
    post:
      tags:
        - Admin Access
      security:
        - BearerAuth: []
      summary: Search System Admins
      description: Required `Wallet Admin` access
      operationId: searchAdminAccess
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchModel"
      responses:
        "200":
          $ref: "#/components/responses/SearchAdminAccess"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  /admin-access:
    post:
      tags:
        - Admin Access
      security:
        - BearerAuth: []
      summary: Add System Admin
      description: Required `Wallet Admin` access
      operationId: addAdminAccess
      requestBody:
        $ref: "#/components/requestBodies/CreateAdminAccessBody"
      responses:
        "200":
          $ref: "#/components/responses/AdminAccessData"
        "400":
          $ref: "#/components/responses/AdminAccessExist"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  "/admin-access/{wallet}":
    delete:
      tags:
        - Admin Access
      security:
        - BearerAuth: []
      summary: Delete System Admin
      description: Required `Wallet Admin` access
      operationId: deleteAdminAccess
      parameters:
        - $ref: "#/components/parameters/walletParam"
      responses:
        "200":
          $ref: "#/components/responses/AdminAccessData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/AdminAccessNotFound"
  /admin-access/users:
    post:
      tags:
        - Admin Access
      security:
        - BearerAuth: []
      summary: Search users
      description: Required `Admin` access
      operationId: searchUsers
      requestBody:
        $ref: "#/components/requestBodies/SearchUsersBody"
      responses:
        "200":
          $ref: "#/components/responses/SearchUsers"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/AdminAccessNotFound"
  "/delivery/idt/{id}/info":
    get:
      tags:
        - Delivery
        - Available Public
      summary: Get public data of delivery idT
      operationId: getDeliveryIdtPublic
      parameters:
        - $ref: "#/components/parameters/idTKeyParam"
      responses:
        "200":
          $ref: "#/components/responses/DeliveryIdtBase"
        "404":
          $ref: "#/components/responses/DeliveryIdtNotFound"
  "/delivery/idp/{id}/info":
    get:
      tags:
        - Delivery
        - Available Public
      summary: Get public data of delivery idP
      operationId: getDeliveryIdpPublic
      parameters:
        - $ref: "#/components/parameters/idPParam"
      responses:
        "200":
          $ref: "#/components/responses/DeliveryIdpBase"
        "404":
          $ref: "#/components/responses/DeliveryIdpNotFound"
  /delivery/idt/search:
    post:
      tags:
        - Delivery
      security:
        - BearerAuth: []
      summary: Search delivery idT
      description: Available for `System Admin`
      operationId: searchDeliveryIdt
      requestBody:
        $ref: "#/components/requestBodies/SearchDeliveryIdtBody"
      responses:
        "200":
          $ref: "#/components/responses/SearchDeliveryIdt"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  /delivery/idt/prefixes:
    get:
      tags:
        - Delivery
      security:
        - BearerAuth: []
      summary: Get prefixes of delivery idT and latest key
      description: Available for `System Admin`
      operationId: getDeliveryIdtPrefixes
      responses:
        "200":
          $ref: "#/components/responses/DeliveryIdtPrefixes"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  /delivery/idt:
    post:
      tags:
        - Delivery
      security:
        - BearerAuth: []
      summary: Create new delivery idT
      description: Available for `System Admin`
      operationId: createDeliveryIdt
      requestBody:
        $ref: "#/components/requestBodies/CreateDeliveryIdtBody"
      responses:
        "200":
          $ref: "#/components/responses/DeliveryIdtCreated"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  "/delivery/idt/{id}":
    get:
      tags:
        - Delivery
      security:
        - BearerAuth: []
      summary: Get delivery idT
      description: Available for `System Admin`
      operationId: getDeliveryIdt
      parameters:
        - $ref: "#/components/parameters/idTParam"
      responses:
        "200":
          $ref: "#/components/responses/DeliveryIdtWithData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/DeliveryIdtNotFound"
    patch:
      tags:
        - Delivery
      security:
        - BearerAuth: []
      summary: Update delivery idT
      description: Available for `System Admin` or `responsible` wallet
      operationId: updateDeliveryIdt
      parameters:
        - $ref: "#/components/parameters/idTParam"
      requestBody:
        $ref: "#/components/requestBodies/EditDeliveryIdtBody"
      responses:
        "200":
          $ref: "#/components/responses/DeliveryIdtWithData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/DeliveryIdtNotFound"
  "/delivery/idt/{id}/rebuild":
    post:
      tags:
        - Delivery
      security:
        - BearerAuth: []
      summary: Rebuild delivery idT
      description: Available for `System Admin`
      operationId: rebuildDeliveryIdt
      parameters:
        - $ref: "#/components/parameters/idTParam"
      responses:
        "200":
          $ref: "#/components/responses/DeliveryIdtWithData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/DeliveryIdtNotFound"
  /delivery/idp/search:
    post:
      tags:
        - Delivery
      security:
        - BearerAuth: []
      summary: Search delivery idP
      description: Available for `System Admin`
      operationId: searchDeliveryIdp
      requestBody:
        $ref: "#/components/requestBodies/SearchDeliveryIdpBody"
      responses:
        "200":
          $ref: "#/components/responses/SearchDeliveryIdp"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  /delivery/idp:
    post:
      tags:
        - Delivery
      security:
        - BearerAuth: []
      summary: Create new delivery idP
      description: Available for `System Admin`
      operationId: createDeliveryIdp
      requestBody:
        $ref: "#/components/requestBodies/CreateDeliveryIdpBody"
      responses:
        "200":
          $ref: "#/components/responses/DeliveryIdpWithData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  "/delivery/idp/{id}":
    get:
      tags:
        - Delivery
      security:
        - BearerAuth: []
      summary: Get delivery idP
      description: Available for `System Admin`
      operationId: getDeliveryIdp
      parameters:
        - $ref: "#/components/parameters/idPParam"
      responses:
        "200":
          $ref: "#/components/responses/DeliveryIdpWithData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/DeliveryIdpNotFound"
  /files:
    post:
      tags:
        - Files
        - Available Providers
      security:
        - BearerAuth: []
        - ProviderClientId: []
          ProviderClientSecret: []
          ProviderUserId: []
      summary: Upload file
      operationId: uploadFile
      requestBody:
        $ref: "#/components/requestBodies/UploadFileBody"
      responses:
        "200":
          $ref: "#/components/responses/FileData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/FileNotFound"
  "/files/{id}":
    get:
      tags:
        - Files
        - Available Public
      summary: Get file
      operationId: getFile
      parameters:
        - $ref: "#/components/parameters/fileIdParam"
      responses:
        "200":
          $ref: "#/components/responses/FileBinary"
        "404":
          $ref: "#/components/responses/FileNotFound"
    delete:
      tags:
        - Files
        - Available Providers
      security:
        - BearerAuth: []
        - ProviderClientId: []
          ProviderClientSecret: []
          ProviderUserId: []
      summary: Delete File
      description: Delete by file ID or external ID
      operationId: deleteFile
      parameters:
        - $ref: "#/components/parameters/fileIdParam"
      responses:
        "200":
          $ref: "#/components/responses/FileData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/FileNotFound"
  "/files/{id}/info":
    get:
      tags:
        - Files
        - Available Public
      summary: Get file info
      operationId: getFileInfo
      parameters:
        - $ref: "#/components/parameters/fileIdParam"
      responses:
        "200":
          $ref: "#/components/responses/FileData"
        "404":
          $ref: "#/components/responses/FileNotFound"
  /folders:
    post:
      tags:
        - Folders
      security:
        - BearerAuth: []
      summary: Create folder
      description: Available for `System Admin`
      operationId: createFolder
      requestBody:
        $ref: "#/components/requestBodies/CreateFolderBody"
      responses:
        "200":
          $ref: "#/components/responses/FolderData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/ParentFolderNotFound"
  "/folders/{id}":
    get:
      tags:
        - Folders
        - Available Public
      summary: Get folder public data
      operationId: getFolder
      parameters:
        - $ref: "#/components/parameters/folderIdParam"
      responses:
        "200":
          $ref: "#/components/responses/FolderBaseData"
        "404":
          $ref: "#/components/responses/FolderNotFound"
    patch:
      tags:
        - Folders
      security:
        - BearerAuth: []
      summary: Update folder
      description: Available for `System Admin`
      operationId: updateFolder
      parameters:
        - $ref: "#/components/parameters/folderIdParam"
      requestBody:
        $ref: "#/components/requestBodies/EditFolderBody"
      responses:
        "200":
          $ref: "#/components/responses/FolderData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/FolderNotFound"
    delete:
      tags:
        - Folders
      security:
        - BearerAuth: []
      summary: Delete folder
      description: Available for `System Admin`
      operationId: deleteFolder
      parameters:
        - $ref: "#/components/parameters/folderIdParam"
      responses:
        "200":
          $ref: "#/components/responses/FolderData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/FolderNotFound"
  "/folders/{id}/info":
    get:
      tags:
        - Folders
      summary: Get folder full data
      operationId: getFolderInfo
      parameters:
        - $ref: "#/components/parameters/folderIdParam"
      responses:
        "200":
          $ref: "#/components/responses/FolderFullData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/FolderNotFound"
  /folders/search:
    get:
      tags:
        - Folders
        - Available Public
      summary: Search folders
      operationId: searchFolders
      parameters:
        - in: query
          name: asTree
          description: Return as tree nodes
          schema:
            type: boolean
        - in: query
          name: searchTerm
          description: Search by name
          schema:
            type: string
        - in: query
          name: parentId
          description: Search by parent ID
          schema:
            type: string
            nullable: true
            format: uuid
        - in: query
          name: productId
          description: Search by product ID
          schema:
            type: string
            nullable: true
            format: uuid
        - in: query
          name: externalProductId
          description: Search by product external ID
          schema:
            type: string
            nullable: true
            format: uuid
        - in: query
          name: ids
          description: Search by ids
          schema:
            type: array
            items:
              type: string
              format: uuid
      responses:
        "200":
          $ref: "#/components/responses/FolderTreeData"
        "400":
          $ref: "#/components/responses/InvalidData"
  /folders/move:
    put:
      tags:
        - Folders
      security:
        - BearerAuth: []
      summary: Change folder order
      description: Available for `System Admin`
      operationId: moveFolder
      requestBody:
        $ref: "#/components/requestBodies/MoveFolderBody"
      responses:
        "200":
          $ref: "#/components/responses/FolderData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/FolderNotFound"
  "/folders/{id}/filters":
    post:
      tags:
        - Folders
        - Available Providers
      security:
        - BearerAuth: []
        - ProviderClientId: []
          ProviderClientSecret: []
          ProviderUserId: []
      summary: Create folder filter
      operationId: createFolderFilter
      parameters:
        - $ref: "#/components/parameters/folderIdParam"
      requestBody:
        $ref: "#/components/requestBodies/CreateFolderFilterBody"
      responses:
        "200":
          $ref: "#/components/responses/FolderFilterData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/FolderNotFound"
  "/folders/{id}/filters/{filterId}":
    patch:
      tags:
        - Folders
        - Available Providers
      security:
        - BearerAuth: []
        - ProviderClientId: []
          ProviderClientSecret: []
          ProviderUserId: []
      summary: Update folder filter
      description: Available for `creator` or `System Admin`
      operationId: updateFolderFilter
      parameters:
        - $ref: "#/components/parameters/folderIdParam"
        - $ref: "#/components/parameters/filterIdParam"
      requestBody:
        $ref: "#/components/requestBodies/EditFolderFilterBody"
      responses:
        "200":
          $ref: "#/components/responses/FolderFilterData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/FolderFilterNotFound"
    delete:
      tags:
        - Folders
        - Available Providers
      security:
        - BearerAuth: []
        - ProviderClientId: []
          ProviderClientSecret: []
          ProviderUserId: []
      summary: Delete folder filter
      description: Available for `creator` or `System Admin`
      operationId: deleteFolderFilter
      parameters:
        - $ref: "#/components/parameters/folderIdParam"
        - $ref: "#/components/parameters/filterIdParam"
      responses:
        "200":
          $ref: "#/components/responses/FolderFilterData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/FolderFilterNotFound"
  /folders/filters/search:
    post:
      tags:
        - Folders
        - Available Public
      summary: Search folders filters
      description: Return all filters values and tags that were created
      operationId: searchFoldersFilters
      requestBody:
        $ref: "#/components/requestBodies/SearchFoldersFiltersBody"
      responses:
        "200":
          $ref: "#/components/responses/SearchFolderFilterData"
        "400":
          $ref: "#/components/responses/InvalidData"
  "/folders/{id}/check-reference":
    get:
      tags:
        - Folders
        - Available Public
      summary: Check folder filters data for references
      description: Return data for create tags to make references with the folder
      operationId: checkFolderReference
      parameters:
        - $ref: "#/components/parameters/folderIdParam"
      responses:
        "200":
          $ref: "#/components/responses/CheckFolderReferenceData"
        "404":
          $ref: "#/components/responses/FolderNotFound"
  "/folders/{id}/filters/move":
    put:
      tags:
        - Folders
      security:
        - BearerAuth: []
      summary: Move folder filter
      operationId: moveFolderFilter
      parameters:
        - $ref: "#/components/parameters/folderIdParam"
      requestBody:
        $ref: "#/components/requestBodies/MoveFolderFilterBody"
      responses:
        "200":
          $ref: "#/components/responses/FolderFilterData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/FolderNotFound"
  /folders/stats:
    get:
      tags:
        - Folders
        - Available Public
      summary: Get folders stats
      operationId: getFoldersStats
      responses:
        "200":
          $ref: "#/components/responses/FoldersStatsData"
  /orders/search:
    post:
      tags:
        - Orders
      security:
        - BearerAuth: []
      summary: Search orders
      description: Available for `System Admin`
      operationId: searchOrders
      requestBody:
        $ref: "#/components/requestBodies/SearchOrdersBody"
      responses:
        "200":
          $ref: "#/components/responses/SearchOrders"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  /orders/my/search:
    post:
      tags:
        - Orders
      security:
        - BearerAuth: []
      summary: Search my orders
      operationId: searchMyOrders
      requestBody:
        $ref: "#/components/requestBodies/SearchMyOrdersBody"
      responses:
        "200":
          $ref: "#/components/responses/SearchOrders"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
  /orders/my/stats:
    get:
      tags:
        - Orders
      security:
        - BearerAuth: []
      summary: Get stats of my orders
      operationId: getOrdersStats
      responses:
        "200":
          $ref: "#/components/responses/OrdersStatsData"
        "401":
          $ref: "#/components/responses/Unauthorized"
  /orders:
    post:
      tags:
        - Orders
      security:
        - BearerAuth: []
      summary: Create new order
      operationId: createOrder
      requestBody:
        $ref: "#/components/requestBodies/CreateOrderBody"
      responses:
        "200":
          $ref: "#/components/responses/OrderWithData"
        "401":
          $ref: "#/components/responses/Unauthorized"
  "/orders/{id}":
    get:
      tags:
        - Orders
      security:
        - BearerAuth: []
      summary: Get order information
      operationId: getOrder
      parameters:
        - $ref: "#/components/parameters/orderIdParam"
      responses:
        "200":
          $ref: "#/components/responses/OrderWithFullData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/OrderNotFound"
    patch:
      tags:
        - Orders
      security:
        - BearerAuth: []
      summary: Update order
      operationId: updateOrder
      parameters:
        - $ref: "#/components/parameters/orderIdParam"
      requestBody:
        $ref: "#/components/requestBodies/EditOrderBody"
      responses:
        "200":
          $ref: "#/components/responses/OrderWithData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/OrderNotFound"
    delete:
      tags:
        - Orders
      security:
        - BearerAuth: []
      summary: Cancel order
      description: It cancelled all unconfirmed positions
      operationId: deleteOrder
      parameters:
        - $ref: "#/components/parameters/orderIdParam"
      responses:
        "200":
          $ref: "#/components/responses/OrderWithData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/OrderNotFound"
  /orders/positions/search:
    post:
      tags:
        - Orders
      security:
        - BearerAuth: []
      summary: Search orders positions
      operationId: searchOrdersPositions
      requestBody:
        $ref: "#/components/requestBodies/SearchOrdersPositionsBody"
      responses:
        "200":
          $ref: "#/components/responses/SearchOrdersPositions"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  "/orders/positions/{id}":
    patch:
      tags:
        - Orders
      security:
        - BearerAuth: []
      description: Available for `providers`
      operationId: updateOrderPosition
      parameters:
        - $ref: "#/components/parameters/orderPositionIdParam"
      requestBody:
        $ref: "#/components/requestBodies/EditOrderPositionBody"
      responses:
        "200":
          $ref: "#/components/responses/OrderPositionData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/OrderPositionNotFound"
  /orders/items-positions/search:
    post:
      tags:
        - Orders
      security:
        - BearerAuth: []
      summary: Get orders positions by items
      operationId: SearchItemsOrdersPositions
      requestBody:
        $ref: "#/components/requestBodies/SearchItemsOrdersPositionsBody"
      responses:
        "200":
          $ref: "#/components/responses/SearchItemsOrdersPositions"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  "/orders/items-positions/{id}":
    get:
      tags:
        - Orders
      security:
        - BearerAuth: []
      summary: Get orders positions by item
      operationId: getItemOrdersPositions
      parameters:
        - $ref: "#/components/parameters/productItemIdParam"
      responses:
        "200":
          $ref: "#/components/responses/ItemOrdersPositions"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/ProductItemNotFound"
  /places:
    post:
      tags:
        - Places
      security:
        - BearerAuth: []
      summary: Create place
      description: Available for `System Admin`
      operationId: createPlace
      requestBody:
        $ref: "#/components/requestBodies/CreatePlaceBody"
      responses:
        "200":
          $ref: "#/components/responses/PlaceData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  "/places/{id}":
    get:
      tags:
        - Places
        - Available Public
      summary: Get place info
      operationId: getPlace
      parameters:
        - $ref: "#/components/parameters/placeIdParam"
      responses:
        "200":
          $ref: "#/components/responses/PlaceData"
        "404":
          $ref: "#/components/responses/PlaceNotFound"
    patch:
      tags:
        - Places
      security:
        - BearerAuth: []
      summary: Update place
      description: Available for `System Admin`
      operationId: updatePlace
      parameters:
        - $ref: "#/components/parameters/placeIdParam"
      requestBody:
        $ref: "#/components/requestBodies/EditPlaceBody"
      responses:
        "200":
          $ref: "#/components/responses/PlaceData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/PlaceNotFound"
    delete:
      tags:
        - Places
      security:
        - BearerAuth: []
      summary: Delete place
      description: Available for `System Admin`
      operationId: deletePlace
      parameters:
        - $ref: "#/components/parameters/placeIdParam"
      responses:
        "200":
          $ref: "#/components/responses/PlaceData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/PlaceNotFound"
  /places/search:
    get:
      tags:
        - Places
        - Available Public
      summary: Search places
      operationId: searchPlaces
      parameters:
        - in: query
          name: type
          description: Places type
          schema:
            type: string
            enum:
              - pick-up
              - dispatch
        - in: query
          name: searchTerm
          description: Search by name
          schema:
            type: string
        - in: query
          name: limit
          schema:
            type: number
        - in: query
          name: offset
          schema:
            type: number
        - in: query
          name: sort
          schema:
            type: array
            items:
              $ref: "#/components/schemas/SortModel"
      responses:
        "200":
          $ref: "#/components/responses/SearchPlaceData"
        "400":
          $ref: "#/components/responses/InvalidData"
  /products/search:
    post:
      tags:
        - Products
      security:
        - BearerAuth: []
      summary: Search products
      description: Available for `System Admin`
      operationId: searchProducts
      requestBody:
        $ref: "#/components/requestBodies/SearchProductsBody"
      responses:
        "200":
          $ref: "#/components/responses/SearchProducts"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  /products:
    post:
      tags:
        - Products
        - Available Providers
      security:
        - ProviderClientId: []
          ProviderClientSecret: []
          ProviderUserId: []
      summary: Create new product
      description: Available for `providers`
      operationId: createProduct
      requestBody:
        $ref: "#/components/requestBodies/CreateProductBody"
      responses:
        "200":
          $ref: "#/components/responses/ProductWithData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  "/products/{id}":
    get:
      tags:
        - Products
        - Available Providers
      security:
        - BearerAuth: []
        - ProviderClientId: []
          ProviderClientSecret: []
          ProviderUserId: []
      summary: Get product with full data
      description: Available for `System Admin` or `providers` (own data only)
      operationId: getProduct
      parameters:
        - $ref: "#/components/parameters/productIdParam"
      responses:
        "200":
          $ref: "#/components/responses/ProductWithData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/ProductNotFound"
    patch:
      tags:
        - Products
        - Available Providers
      security:
        - ProviderClientId: []
          ProviderClientSecret: []
          ProviderUserId: []
      summary: Update product data
      description: Available for `providers`
      operationId: updateProduct
      parameters:
        - $ref: "#/components/parameters/productIdParam"
      requestBody:
        $ref: "#/components/requestBodies/EditProductBody"
      responses:
        "200":
          $ref: "#/components/responses/ProductWithData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/ProductNotFound"
    delete:
      tags:
        - Products
        - Available Providers
      security:
        - ProviderClientId: []
          ProviderClientSecret: []
          ProviderUserId: []
      summary: Delete product
      description: Available for `providers`. Mark that product as deleted.
      operationId: deleteProduct
      parameters:
        - $ref: "#/components/parameters/productIdParam"
      responses:
        "200":
          $ref: "#/components/responses/Product"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/ProductNotFound"
  "/products/{id}/block":
    post:
      tags:
        - Products
      security:
        - BearerAuth: []
      summary: Block product
      description: Available for `System Admin`
      operationId: blockProduct
      parameters:
        - $ref: "#/components/parameters/productIdParam"
      responses:
        "200":
          $ref: "#/components/responses/Product"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/ProductNotFound"
  "/products/{id}/unblock":
    post:
      tags:
        - Products
      security:
        - BearerAuth: []
      summary: Unblock product
      description: Available for `System Admin`
      operationId: unblockProduct
      parameters:
        - $ref: "#/components/parameters/productIdParam"
      responses:
        "200":
          $ref: "#/components/responses/Product"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/ProductNotFound"
  /products/items/search:
    post:
      tags:
        - Products
      security:
        - BearerAuth: []
      summary: Search product items
      description: Available for `System Admin`
      operationId: searchProductItems
      requestBody:
        $ref: "#/components/requestBodies/SearchProductItemsBody"
      responses:
        "200":
          $ref: "#/components/responses/SearchProductItems"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  /products/items:
    post:
      tags:
        - Products
        - Available Providers
      security:
        - ProviderClientId: []
          ProviderClientSecret: []
          ProviderUserId: []
      summary: Create new product item
      description: Available for `providers`
      operationId: createProductItem
      requestBody:
        $ref: "#/components/requestBodies/CreateProductItemBody"
      responses:
        "200":
          $ref: "#/components/responses/ProductItemWithData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  "/products/items/{id}":
    get:
      tags:
        - Products
        - Available Providers
      security:
        - BearerAuth: []
        - ProviderClientId: []
          ProviderClientSecret: []
          ProviderUserId: []
      summary: Get product item with full data
      description: Available for `System Admin` or `providers` (own data only)
      operationId: getProductItem
      parameters:
        - $ref: "#/components/parameters/productItemIdParam"
      responses:
        "200":
          $ref: "#/components/responses/ProductItemWithData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/ProductItemNotFound"
    patch:
      tags:
        - Products
        - Available Providers
      security:
        - ProviderClientId: []
          ProviderClientSecret: []
          ProviderUserId: []
      summary: Update product item data
      description: Available for `providers`
      operationId: updateProductItem
      parameters:
        - $ref: "#/components/parameters/productItemIdParam"
      requestBody:
        $ref: "#/components/requestBodies/EditProductItemBody"
      responses:
        "200":
          $ref: "#/components/responses/ProductItemWithData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/ProductItemNotFound"
    delete:
      tags:
        - Products
        - Available Providers
      security:
        - ProviderClientId: []
          ProviderClientSecret: []
          ProviderUserId: []
      summary: Delete product item
      description: Available for `providers`. Mark that product item as deleted.
      operationId: deleteProductItem
      parameters:
        - $ref: "#/components/parameters/productItemIdParam"
      responses:
        "200":
          $ref: "#/components/responses/ProductItem"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/ProductItemNotFound"
  /products/batches/search:
    post:
      tags:
        - Products
      security:
        - BearerAuth: []
      summary: Search product batches
      description: Available for `System Admin`
      operationId: searchProductBatches
      requestBody:
        $ref: "#/components/requestBodies/SearchProductBatchesBody"
      responses:
        "200":
          $ref: "#/components/responses/SearchProductBatches"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  /products/batches:
    post:
      tags:
        - Products
        - Available Providers
      security:
        - ProviderClientId: []
          ProviderClientSecret: []
          ProviderUserId: []
      summary: Create new product batch
      description: Available for `providers`
      operationId: createProductBatch
      requestBody:
        $ref: "#/components/requestBodies/CreateProductBatchBody"
      responses:
        "200":
          $ref: "#/components/responses/ProductBatch"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  "/products/batches/{id}":
    get:
      tags:
        - Products
        - Available Providers
      security:
        - BearerAuth: []
        - ProviderClientId: []
          ProviderClientSecret: []
          ProviderUserId: []
      summary: Get product batch with full data
      description: Available for `System Admin` or `providers` (own data only)
      operationId: getProductBatch
      parameters:
        - $ref: "#/components/parameters/productBatchIdParam"
      responses:
        "200":
          $ref: "#/components/responses/ProductBatchWithData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/ProductBatchNotFound"
    patch:
      tags:
        - Products
        - Available Providers
      security:
        - ProviderClientId: []
          ProviderClientSecret: []
          ProviderUserId: []
      summary: Update product batch data
      description: Available for `providers`
      operationId: updateProductBatch
      parameters:
        - $ref: "#/components/parameters/productBatchIdParam"
      requestBody:
        $ref: "#/components/requestBodies/EditProductBatchBody"
      responses:
        "200":
          $ref: "#/components/responses/ProductBatch"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/ProductBatchNotFound"
    delete:
      tags:
        - Products
        - Available Providers
      security:
        - ProviderClientId: []
          ProviderClientSecret: []
          ProviderUserId: []
      summary: Delete product batch
      description: Available for `providers`. Mark that product batch as deleted.
      operationId: deleteProductBatch
      parameters:
        - $ref: "#/components/parameters/productBatchIdParam"
      responses:
        "200":
          $ref: "#/components/responses/ProductBatch"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/ProductBatchNotFound"
  /products/prices/search:
    post:
      tags:
        - Products
      security:
        - BearerAuth: []
      summary: Search product prices
      description: Available for `System Admin`
      operationId: searchProductPrices
      requestBody:
        $ref: "#/components/requestBodies/SearchProductPricesBody"
      responses:
        "200":
          $ref: "#/components/responses/SearchProductPrices"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  /products/prices:
    post:
      tags:
        - Products
        - Available Providers
      security:
        - ProviderClientId: []
          ProviderClientSecret: []
          ProviderUserId: []
      summary: Create new product price
      description: Available for `providers`
      operationId: createProductPrice
      requestBody:
        $ref: "#/components/requestBodies/CreateProductPriceBody"
      responses:
        "200":
          $ref: "#/components/responses/ProductPrice"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  "/products/prices/{id}":
    get:
      tags:
        - Products
        - Available Providers
      security:
        - BearerAuth: []
        - ProviderClientId: []
          ProviderClientSecret: []
          ProviderUserId: []
      summary: Get product price with full data
      description: Available for `System Admin` or `providers` (own data only)
      operationId: getProductPrice
      parameters:
        - $ref: "#/components/parameters/productPriceIdParam"
      responses:
        "200":
          $ref: "#/components/responses/ProductPriceWithData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/ProductPriceNotFound"
    patch:
      tags:
        - Products
        - Available Providers
      security:
        - ProviderClientId: []
          ProviderClientSecret: []
          ProviderUserId: []
      summary: Update product price data
      description: Available for `providers`
      operationId: updateProductPrice
      parameters:
        - $ref: "#/components/parameters/productPriceIdParam"
      requestBody:
        $ref: "#/components/requestBodies/EditProductPriceBody"
      responses:
        "200":
          $ref: "#/components/responses/ProductPriceWithData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/ProductPriceNotFound"
    delete:
      tags:
        - Products
        - Available Providers
      security:
        - ProviderClientId: []
          ProviderClientSecret: []
          ProviderUserId: []
      summary: Delete product price
      description: Available for `providers`. Mark that product price as deleted.
      operationId: deleteProductPrice
      parameters:
        - $ref: "#/components/parameters/productPriceIdParam"
      responses:
        "200":
          $ref: "#/components/responses/ProductPrice"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/ProductPriceNotFound"
  /products/amounts/search:
    post:
      tags:
        - Products
      security:
        - BearerAuth: []
      summary: Search product amounts
      description: Available for `System Admin`
      operationId: searchProductAmounts
      requestBody:
        $ref: "#/components/requestBodies/SearchProductAmountsBody"
      responses:
        "200":
          $ref: "#/components/responses/SearchProductAmounts"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  /products/amounts:
    post:
      tags:
        - Products
        - Available Providers
      security:
        - ProviderClientId: []
          ProviderClientSecret: []
          ProviderUserId: []
      summary: Create new product amount
      description: Available for `providers`
      operationId: createProductAmount
      requestBody:
        $ref: "#/components/requestBodies/CreateProductAmountBody"
      responses:
        "200":
          $ref: "#/components/responses/ProductAmountWithData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  "/products/amounts/{id}":
    get:
      tags:
        - Products
        - Available Providers
      security:
        - BearerAuth: []
        - ProviderClientId: []
          ProviderClientSecret: []
          ProviderUserId: []
      summary: Get product amount with full data
      description: Available for `System Admin` or `providers` (own data only)
      operationId: getProductAmount
      parameters:
        - $ref: "#/components/parameters/productAmountIdParam"
      responses:
        "200":
          $ref: "#/components/responses/ProductAmountWithData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/ProductAmountNotFound"
    patch:
      tags:
        - Products
        - Available Providers
      security:
        - ProviderClientId: []
          ProviderClientSecret: []
          ProviderUserId: []
      summary: Update product amount data
      description: Available for `providers`
      operationId: updateProductAmount
      parameters:
        - $ref: "#/components/parameters/productAmountIdParam"
      requestBody:
        $ref: "#/components/requestBodies/EditProductAmountBody"
      responses:
        "200":
          $ref: "#/components/responses/ProductAmountWithData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/ProductAmountNotFound"
    delete:
      tags:
        - Products
        - Available Providers
      security:
        - ProviderClientId: []
          ProviderClientSecret: []
          ProviderUserId: []
      summary: Delete product amount
      description: Available for `providers`. Mark that product amount as deleted.
      operationId: deleteProductAmount
      parameters:
        - $ref: "#/components/parameters/productAmountIdParam"
      responses:
        "200":
          $ref: "#/components/responses/ProductAmount"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/ProductAmountNotFound"
  /products/idp/search:
    post:
      tags:
        - Products
      security:
        - BearerAuth: []
      summary: Search idP
      description: Available for `System Admin`
      operationId: searchProductIdp
      requestBody:
        $ref: "#/components/requestBodies/SearchProductIdpBody"
      responses:
        "200":
          $ref: "#/components/responses/SearchProductIdp"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  /products/idp:
    post:
      tags:
        - Products
        - Available Providers
      security:
        - ProviderClientId: []
          ProviderClientSecret: []
          ProviderUserId: []
      summary: Create new idP
      description: Available for `providers`
      operationId: createProductIdp
      requestBody:
        $ref: "#/components/requestBodies/CreateProductIdpBody"
      responses:
        "200":
          $ref: "#/components/responses/ProductIdp"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  "/products/idp/{id}":
    get:
      tags:
        - Products
        - Available Providers
      security:
        - BearerAuth: []
        - ProviderClientId: []
          ProviderClientSecret: []
          ProviderUserId: []
      summary: Get idP with full data
      description: Available for `System Admin` or `providers` (own data only)
      operationId: getProductIdp
      parameters:
        - $ref: "#/components/parameters/productIdpParam"
      responses:
        "200":
          $ref: "#/components/responses/ProductIdpWithData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/ProductIdpNotFound"
    delete:
      tags:
        - Products
        - Available Providers
      security:
        - ProviderClientId: []
          ProviderClientSecret: []
          ProviderUserId: []
      summary: Delete idP
      description: Available for `providers`. Mark that idP as deleted.
      operationId: deleteProductIdp
      parameters:
        - $ref: "#/components/parameters/productIdpParam"
      responses:
        "200":
          $ref: "#/components/responses/ProductIdp"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/ProductIdpNotFound"
  /products/cards/search:
    post:
      tags:
        - Products
        - Available Public
      summary: Search product cards
      operationId: searchProductCards
      requestBody:
        $ref: "#/components/requestBodies/SearchProductCardsBody"
      responses:
        "200":
          $ref: "#/components/responses/SearchProductCards"
        "400":
          $ref: "#/components/responses/InvalidData"
  /products/cards/search/suggester:
    post:
      tags:
        - Products
        - Available Public
      summary: Search products name suggester
      description: Returns suggested names by searchTerm
      operationId: searchProductNameSuggester
      requestBody:
        $ref: "#/components/requestBodies/SearchProductCardsSuggesterBody"
      responses:
        "200":
          $ref: "#/components/responses/SearchProductCardsSuggester"
        "400":
          $ref: "#/components/responses/InvalidData"
  /products/cards/search/filters:
    post:
      tags:
        - Products
        - Available Public
      summary: Search products filters
      description: Returns available filters
      operationId: searchProductFilters
      requestBody:
        $ref: "#/components/requestBodies/SearchProductCardsFiltersBody"
      responses:
        "200":
          $ref: "#/components/responses/SearchProductCardsFilters"
        "400":
          $ref: "#/components/responses/InvalidData"
  "/products/cards/{id}":
    get:
      tags:
        - Products
        - Available Public
      summary: Get product card
      operationId: getProductCard
      parameters:
        - $ref: "#/components/parameters/productItemIdParam"
      responses:
        "200":
          $ref: "#/components/responses/ProductCardWithData"
        "404":
          $ref: "#/components/responses/ProductItemNotFound"
  "/products/cards/{id}/like":
    post:
      tags:
        - Products
      security:
        - BearerAuth: []
      summary: Add product card like
      operationId: addProductCardLike
      parameters:
        - $ref: "#/components/parameters/productItemIdParam"
      responses:
        "200":
          $ref: "#/components/responses/ProductCardWithData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/ProductItemNotFound"
    delete:
      tags:
        - Products
      security:
        - BearerAuth: []
      summary: Remove product card like
      operationId: removeProductCardLike
      parameters:
        - $ref: "#/components/parameters/productItemIdParam"
      responses:
        "200":
          $ref: "#/components/responses/ProductCardWithData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/ProductItemNotFound"
  /products/stats:
    get:
      tags:
        - Products
      security:
        - BearerAuth: []
      summary: Get products statistics
      operationId: getProductsStats
      responses:
        "200":
          $ref: "#/components/responses/ProductStatsData"
        "401":
          $ref: "#/components/responses/Unauthorized"
  "/providers/{id}/profile":
    get:
      tags:
        - Providers
        - Available Public
      summary: Get provider profile info
      operationId: getProviderProfile
      parameters:
        - $ref: "#/components/parameters/providerIdParam"
      responses:
        "200":
          $ref: "#/components/responses/ProviderProfileWithDataResponse"
        "400":
          $ref: "#/components/responses/InvalidData"
        "404":
          $ref: "#/components/responses/ProviderNotFound"
  /providers/my/profile:
    get:
      tags:
        - Providers
        - Available Providers
      security:
        - ProviderClientId: []
          ProviderClientSecret: []
          ProviderUserId: []
      summary: Get provider profile info
      operationId: getMyProviderProfile
      responses:
        "200":
          $ref: "#/components/responses/ProviderProfileWithDataResponse"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/ProviderNotFound"
    put:
      tags:
        - Providers
        - Available Providers
      security:
        - ProviderClientId: []
          ProviderClientSecret: []
          ProviderUserId: []
      summary: Create or update provider profile on marketplace
      description: Available for `providers`
      operationId: updateProviderProfile
      requestBody:
        $ref: "#/components/requestBodies/UpdateProviderProfileBody"
      responses:
        "200":
          $ref: "#/components/responses/ProviderProfileResponse"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/ProviderNotFound"
  /providers/profile/search:
    post:
      tags:
        - Providers
      security:
        - BearerAuth: []
      summary: Search provider profiles
      description: Available for `System Admin`
      operationId: searchProviderProfiles
      requestBody:
        $ref: "#/components/requestBodies/SearchProviderProfilesBody"
      responses:
        "200":
          $ref: "#/components/responses/SearchProviderProfilesData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "403":
          $ref: "#/components/responses/Forbidden"
  /tags/search:
    post:
      tags:
        - Tags
        - Available Public
      summary: Search tags
      operationId: searchTags
      requestBody:
        $ref: "#/components/requestBodies/SearchTagsBody"
      responses:
        "200":
          $ref: "#/components/responses/SearchTagsData"
        "400":
          $ref: "#/components/responses/InvalidData"
  /tasks/search:
    post:
      tags:
        - Tasks
      security:
        - BearerAuth: []
      summary: Search tasks
      operationId: searchTasks
      requestBody:
        $ref: "#/components/requestBodies/SearchTasksBody"
      responses:
        "200":
          $ref: "#/components/responses/SearchTasksData"
        "400":
          $ref: "#/components/responses/InvalidData"
  /tasks:
    post:
      tags:
        - Tasks
      security:
        - BearerAuth: []
      summary: Create new task
      operationId: createTask
      requestBody:
        $ref: "#/components/requestBodies/CreateTaskBody"
      responses:
        "200":
          $ref: "#/components/responses/TaskWithDataResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  /tasks/stats:
    get:
      tags:
        - Tasks
      security:
        - BearerAuth: []
      summary: Get tasks stats
      operationId: getTasksStats
      responses:
        "200":
          $ref: "#/components/responses/TasksStatsData"
        "401":
          $ref: "#/components/responses/Unauthorized"
  "/tasks/{id}":
    get:
      tags:
        - Tasks
      security:
        - BearerAuth: []
      summary: Get task info
      operationId: getTask
      parameters:
        - $ref: "#/components/parameters/taskIdParam"
      responses:
        "200":
          $ref: "#/components/responses/TaskWithDataResponse"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/TaskNotFound"
    patch:
      tags:
        - Tasks
      security:
        - BearerAuth: []
      summary: Update task
      operationId: updateTask
      parameters:
        - $ref: "#/components/parameters/taskIdParam"
      requestBody:
        $ref: "#/components/requestBodies/EditTaskBody"
      responses:
        "200":
          $ref: "#/components/responses/TaskWithDataResponse"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/TaskNotFound"
components:
  schemas:
    App:
      type: object
      required:
        - key
        - name
        - url
        - id
        - secret
        - createdAt
      properties:
        key:
          type: string
          description: App key
        name:
          type: string
          description: Unique name
        url:
          type: string
          description: App URL
        id:
          type: string
          format: uuid
          description: Client ID for API requests
        secret:
          type: string
          description: Client Secret for API requests
        createdAt:
          type: string
          format: date-time
          description: Activation Date
    AppPublic:
      type: object
      required:
        - key
        - name
        - url
      properties:
        key:
          type: string
          description: App key
        name:
          type: string
          description: Unique name
        url:
          type: string
          description: App URL
    User:
      type: object
      required:
        - id
        - firstName
      properties:
        id:
          type: string
          description: Wallet Address
          example: 0:c424531feb64afeb46607e0aff5609628207213308b62c123891d817389fc35b
        firstName:
          type: string
          description: First Name
        lastName:
          type: string
          description: Last Name
        middleName:
          type: string
          description: Middle Name
        avatar:
          type: string
          description: Avatar
    ErrorResponse:
      type: object
      required:
        - errorCode
        - message
      properties:
        errorCode:
          type: string
        message:
          type: string
    SortModel:
      type: object
      required:
        - field
      properties:
        field:
          type: string
          description: The field for sorting
        sort:
          type: string
          nullable: true
          enum:
            - asc
            - desc
          description: The sorting order
    SearchModel:
      type: object
      properties:
        limit:
          type: number
          description: Number of return items
        offset:
          type: number
          description: Number of skip items
        sort:
          type: array
          items:
            $ref: "#/components/schemas/SortModel"
    Provider:
      type: object
      required:
        - id
        - name
        - address
        - callback
        - blocked
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
          description: Provider ID
        name:
          type: string
          description: Provider Name
        address:
          type: string
          description: Provider URL Address
        callback:
          type: string
          description: Provider Callback Address
        blocked:
          type: boolean
          description: If `true` provider is blocked
        createdAt:
          type: string
          format: date-time
          description: Creation Date
        updatedAt:
          type: string
          format: date-time
          description: Last Updating Date
    ProviderWithSecret:
      type: object
      required:
        - id
        - secret
        - name
        - address
        - callback
        - blocked
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
          description: Provider ID
        secret:
          type: string
          description: Provider Secret for API requests
        name:
          type: string
          description: Provider Name
        address:
          type: string
          description: Provider URL Address
        callback:
          type: string
          description: Provider Callback Address
        createdAt:
          type: string
          format: date-time
          description: Creation Date
        updatedAt:
          type: string
          format: date-time
          description: Last Updating Date
        deletedAt:
          type: string
          format: date-time
          description: Deleted Date
    ActivityType:
      type: string
      description: Activity Type
    ActivityLog:
      type: object
      required:
        - id
        - type
        - userId
        - artefactId
        - data
        - createdAt
      properties:
        id:
          type: string
          format: uuid
          description: Artefact ID
        type:
          $ref: "#/components/schemas/ActivityType"
        userId:
          type: string
          description: Wallet Address
          example: 0:c424531feb64afeb46607e0aff5609628207213308b62c123891d817389fc35b
        artefactId:
          type: string
          format: uuid
          description: Artefact ID
        providerId:
          type: string
          format: uuid
          description: Provider ID
        data:
          type: object
          description: Activity Data depends on type
        createdAt:
          type: string
          format: date-time
          description: Creation Date
        userData:
          $ref: "#/components/schemas/User"
    AdminAccess:
      type: object
      required:
        - wallet
        - createdAt
      properties:
        wallet:
          type: string
          description: Wallet Address
          example: 0:c424531feb64afeb46607e0aff5609628207213308b62c123891d817389fc35b
        createdAt:
          type: string
          format: date-time
          description: Creation Date
        userData:
          $ref: "#/components/schemas/User"
    DeliveryIdtBase:
      type: object
      required:
        - id
        - key
        - status
        - responsible
      properties:
        id:
          type: string
          format: uuid
          description: Delivery idT ID
        key:
          type: string
          description: Delivery idT unique key in format `A_000001`
        status:
          type: string
          enum:
            - created
            - storage
            - delivery
            - provider
            - lost
            - destroyed
          description: Delivery idT status
        responsible:
          type: string
          description: Wallet of responsible user
        providerId:
          type: string
          format: uuid
          description: Provider ID
    DeliveryIdt:
      allOf:
        - $ref: "#/components/schemas/DeliveryIdtBase"
        - type: object
          required:
            - contains
            - createdBy
            - createdAt
            - updatedAt
          properties:
            contains:
              type: array
              items:
                allOf:
                  - $ref: "#/components/schemas/DeliveryIdpBase"
                  - type: object
                    required:
                      - batchId
                      - name
                    properties:
                      batchId:
                        type: string
                        format: uuid
                        description: Product Batch External ID
                      name:
                        type: string
                        description: Product Item Name
              description: List of idP in idT
            createdBy:
              type: string
              description: Wallet Address
            createdAt:
              type: string
              format: date-time
              description: Creation Date
            updatedAt:
              type: string
              format: date-time
              description: Last Updating Date
            deletedAt:
              type: string
              format: date-time
              description: Delete Date
    DeliveryIdtWithData:
      allOf:
        - $ref: "#/components/schemas/DeliveryIdt"
        - type: object
          required:
            - createdByData
            - responsibleData
          properties:
            createdByData:
              $ref: "#/components/schemas/User"
            responsibleData:
              $ref: "#/components/schemas/User"
            providerName:
              type: string
              description: Provider Name
    DeliveryIdpBase:
      type: object
      required:
        - id
        - number
      properties:
        id:
          type: string
          format: uuid
          description: Delivery idP ID
        number:
          type: string
          description: Delivery idP unique auto-incremented number
    DeliveryIdp:
      allOf:
        - $ref: "#/components/schemas/DeliveryIdpBase"
        - type: object
          required:
            - createdBy
            - createdAt
          properties:
            createdBy:
              type: string
              description: Wallet Address
            createdAt:
              type: string
              format: date-time
              description: Creation Date
    DeliveryIdpWithData:
      allOf:
        - $ref: "#/components/schemas/DeliveryIdp"
        - type: object
          required:
            - createdByData
          properties:
            createdByData:
              $ref: "#/components/schemas/User"
    DictionaryWord:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          format: uuid
          description: Word ID
        name:
          type: string
          description: Word name
        shortName:
          type: string
          description: Word short name
        description:
          type: string
          description: Word description
        unit:
          type: string
          description: Word unit
        systemUnit:
          type: string
          description: System unit key
        coeff:
          type: number
          description: Coeff for mapping systemUnit with unit
        photo:
          type: string
          description: Word main photo
        video:
          type: string
          description: Word main video
    FileData:
      type: object
      required:
        - id
        - name
        - mimeType
        - size
        - createdBy
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
          description: File ID
        name:
          type: string
          description: File name
        mimeType:
          type: string
          description: File mime type
        size:
          type: number
          description: File size in bytes
        createdBy:
          type: string
          description: Wallet Address
          example: 0:c424531feb64afeb46607e0aff5609628207213308b62c123891d817389fc35b
        providerId:
          type: string
          format: uuid
          description: Provider ID
        createdAt:
          type: string
          format: date-time
          description: Creation Date
        updatedAt:
          type: string
          format: date-time
          description: Last Updating Date
    FolderBase:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          format: uuid
          description: Folder ID
        parentId:
          type: string
          nullable: true
          format: uuid
          description: Folder parent ID
        name:
          type: string
          description: Folder name
        photo:
          type: string
          description: Folder photo
        order:
          type: number
          description: Folder order
        isPublic:
          type: boolean
          description: If `true` - shows everyone, if `null` - on review to make public,
            if `false` - shows only for creator
    Folder:
      allOf:
        - $ref: "#/components/schemas/FolderBase"
        - type: object
          required:
            - commission
            - createdBy
            - createdAt
            - updatedAt
          properties:
            commission:
              type: number
              description: Commission that applies to products in this folder
            createdBy:
              type: string
              description: Wallet Address
              example: 0:c424531feb64afeb46607e0aff5609628207213308b62c123891d817389fc35b
            providerId:
              type: string
              format: uuid
              description: Provider ID
            createdAt:
              type: string
              format: date-time
              description: Creation Date
            updatedAt:
              type: string
              format: date-time
              description: Last Updating Date
    FolderFormulaOperator:
      type: string
      description: Formula operator
      enum:
        - equal
        - not_equal
    FolderFilter:
      type: object
      required:
        - id
        - folderId
        - field
        - operator
        - createdBy
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
          description: Filter ID
        folder:
          type: string
          format: uuid
          description: Folder ID
        field:
          type: string
          description: Formula attribute
        fieldData:
          $ref: "#/components/schemas/DictionaryWord"
        operator:
          $ref: "#/components/schemas/FolderFormulaOperator"
        value:
          type: string
          description: Formula value
        valueData:
          $ref: "#/components/schemas/DictionaryWord"
        unit:
          type: string
          description: Formula unit
        order:
          type: number
          description: Filter order
        createdBy:
          type: string
          description: Wallet Address
          example: 0:c424531feb64afeb46607e0aff5609628207213308b62c123891d817389fc35b
        providerId:
          type: string
          format: uuid
          description: Provider ID
        createdAt:
          type: string
          format: date-time
          description: Creation Date
        updatedAt:
          type: string
          format: date-time
          description: Last Updating Date
    FolderTreeItem:
      allOf:
        - $ref: "#/components/schemas/Folder"
        - type: object
          properties:
            children:
              type: array
              items:
                $ref: "#/components/schemas/FolderTreeItem"
    FolderFullData:
      allOf:
        - $ref: "#/components/schemas/Folder"
        - type: object
          required:
            - filters
          properties:
            filters:
              type: array
              items:
                $ref: "#/components/schemas/FolderFilter"
            createdByData:
              $ref: "#/components/schemas/User"
    OrderStatus:
      type: string
      enum:
        - created
        - processing
        - paid
        - failed
        - cancelled
        - completed
      description: Order status
    OrderPositionStatus:
      type: string
      enum:
        - created
        - paid
        - confirmed
        - declined
        - production
        - deliveryReady
        - delivery
        - cancelling
        - cancelled
        - completed
        - dispute
        - returned
        - failed
      description: Order Position status
    OrderBase:
      type: object
      required:
        - id
        - key
        - status
        - placeId
        - totalPrice
      properties:
        id:
          type: string
          format: uuid
          description: Order ID
        key:
          type: string
          description: Order unique key
        status:
          $ref: "#/components/schemas/OrderStatus"
        placeId:
          type: string
          format: uuid
          description: Pick-up place ID
        totalPrice:
          type: number
          description: Total order price, can be changed if some position will be canceled
        txHash:
          type: string
          description: Payment transaction hash
    OrderPositionBase:
      type: object
      required:
        - id
        - providerId
        - productId
        - itemId
        - price
        - amount
        - status
      properties:
        id:
          type: string
          format: uuid
          description: Order Position ID
        providerId:
          type: string
          format: uuid
          description: Provider ID
        productId:
          type: string
          format: uuid
          description: Product ID
        itemId:
          type: string
          format: uuid
          description: Product Item ID
        price:
          type: number
          description: Order Position price
        amount:
          type: number
          description: Amount of idP
        status:
          $ref: "#/components/schemas/OrderPositionStatus"
        txHash:
          type: string
          description: Payment transaction hash
    OrderPositionBaseWithItemData:
      allOf:
        - $ref: "#/components/schemas/OrderPositionBase"
        - type: object
          required:
            - itemData
          properties:
            itemData:
              $ref: "#/components/schemas/ProductItemBase"
    Order:
      allOf:
        - $ref: "#/components/schemas/OrderBase"
        - type: object
          required:
            - createdBy
            - createdAt
            - updatedAt
          properties:
            createdBy:
              type: string
              description: Wallet Address
            createdAt:
              type: string
              format: date-time
              description: Creation Date
            updatedAt:
              type: string
              format: date-time
              description: Last Updating Date
            deletedAt:
              type: string
              format: date-time
              description: Delete Date
    OrderWithData:
      allOf:
        - $ref: "#/components/schemas/Order"
        - type: object
          required:
            - positions
            - createdByData
          properties:
            createdByData:
              $ref: "#/components/schemas/User"
            positions:
              type: array
              items:
                $ref: "#/components/schemas/OrderPositionBaseWithItemData"
    OrderWithFullData:
      allOf:
        - $ref: "#/components/schemas/Order"
        - type: object
          required:
            - positions
            - placeData
            - createdByData
          properties:
            createdByData:
              $ref: "#/components/schemas/User"
            positions:
              type: array
              items:
                $ref: "#/components/schemas/OrderPositionWithData"
            placeData:
              $ref: "#/components/schemas/Place"
    OrderPosition:
      allOf:
        - $ref: "#/components/schemas/OrderPositionBase"
        - type: object
          required:
            - orderId
            - itemId
            - createdAt
            - updatedAt
          properties:
            orderId:
              type: string
              format: uuid
              description: Order ID
            itemId:
              type: string
              format: uuid
              description: Product Item ID
            createdAt:
              type: string
              format: date-time
              description: Creation Date
            updatedAt:
              type: string
              format: date-time
              description: Last Updating Date
            deletedAt:
              type: string
              format: date-time
              description: Delete Date
    OrderPositionWithData:
      allOf:
        - $ref: "#/components/schemas/OrderPosition"
        - type: object
          required:
            - itemData
            - providerName
            - orderKey
          properties:
            itemData:
              $ref: "#/components/schemas/ProductItemBase"
            providerName:
              type: string
              description: Provider Name
            orderKey:
              type: string
              description: Order unique key
    ItemOrdersPositions:
      allOf:
        - $ref: "#/components/schemas/ProductItemBase"
        - type: object
          required:
            - placeData
            - positions
          properties:
            placeData:
              $ref: "#/components/schemas/Place"
            positions:
              type: array
              items:
                allOf:
                  - $ref: "#/components/schemas/OrderPositionBase"
                  - type: object
                    required:
                      - orderId
                      - createdByData
                    properties:
                      orderId:
                        type: string
                        format: uuid
                        description: Order ID
                      createdByData:
                        $ref: "#/components/schemas/User"
                      paymentHash:
                        type: string
                        description: Payment transaction hash
    Place:
      type: object
      required:
        - id
        - type
        - name
        - lat
        - long
        - createdBy
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
          description: Place ID
        type:
          type: string
          enum:
            - pick-up
            - dispatch
          description: Place Type
        name:
          type: string
          description: Place name
        description:
          type: string
          description: Place description
        photos:
          type: array
          items:
            type: string
          description: Place photos
        workHours:
          $ref: "#/components/schemas/PlaceWorkHours"
          description: Place working hours
        color:
          type: string
          description: Place color showing on map
        lat:
          type: number
          description: Place latitude coordinate
        long:
          type: number
          description: Place longitude coordinate
        createdBy:
          type: string
          description: Wallet Address
          example: 0:c424531feb64afeb46607e0aff5609628207213308b62c123891d817389fc35b
        createdAt:
          type: string
          format: date-time
          description: Creation Date
        updatedAt:
          type: string
          format: date-time
          description: Last Updating Date
        deletedAt:
          type: string
          format: date-time
          nullable: true
          description: Deleted Date
    PlaceWorkHours:
      type: object
      required:
        - mon
        - tue
        - wed
        - thu
        - fri
        - sat
        - sun
      properties:
        mon:
          items:
            type: string
          example:
            - HH:MM
            - HH:MM
        tue:
          type: array
          items:
            type: string
          example:
            - HH:MM
            - HH:MM
        wed:
          type: array
          items:
            type: string
          example:
            - HH:MM
            - HH:MM
        thu:
          type: array
          items:
            type: string
          example:
            - HH:MM
            - HH:MM
        fri:
          type: array
          items:
            type: string
          example:
            - HH:MM
            - HH:MM
        sat:
          type: array
          items:
            type: string
          example:
            - HH:MM
            - HH:MM
        sun:
          type: array
          items:
            type: string
          example:
            - HH:MM
            - HH:MM
    UnitInfo:
      type: object
      required:
        - unit
        - coeff
        - systemUnit
      properties:
        unit:
          type: string
          description: User-friendly unit
        coeff:
          type: number
          description: Coeff to match with system unit
        systemUnit:
          type: string
          description: System unit
    Product:
      type: object
      required:
        - id
        - externalId
        - name
        - createdBy
        - providerId
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
          description: Product ID
        externalId:
          type: string
          format: uuid
          description: Product External ID form Provider
        name:
          type: string
          description: Product name
        description:
          type: string
          description: Product description
        photos:
          type: array
          items:
            type: string
          description: Product photos
        videos:
          type: array
          items:
            type: string
          description: Product videos
        unitInfo:
          $ref: "#/components/schemas/UnitInfo"
        createdBy:
          type: string
          description: Wallet Address
        providerId:
          type: string
          format: uuid
          description: Provider ID
        isBlocked:
          type: boolean
          description: Blocked by B2Market moderation
        createdAt:
          type: string
          format: date-time
          description: Creation Date
        updatedAt:
          type: string
          format: date-time
          description: Last Updating Date
        deletedAt:
          type: string
          format: date-time
          description: Delete Date
    ProductWithData:
      allOf:
        - $ref: "#/components/schemas/Product"
        - type: object
          required:
            - providerName
            - folders
            - items
            - createdByData
            - tagsData
          properties:
            providerName:
              type: string
              description: Provider Name
            folders:
              type: array
              description: Catalogs where product is shown
              items:
                type: string
                format: uuid
            items:
              type: array
              description: Product items IDs
              items:
                type: string
            createdByData:
              $ref: "#/components/schemas/User"
            tagsData:
              type: array
              description: Tags that define catalog
              items:
                $ref: "#/components/schemas/Tag"
    ProductFilter:
      type: object
      required:
        - field
        - operator
        - values
      properties:
        field:
          type: string
        operator:
          type: string
          enum:
            - equal
            - between
        values:
          type: array
          items:
            type: string
    ProductFilterOption:
      type: object
      required:
        - field
        - values
      properties:
        field:
          type: string
        fieldData:
          $ref: "#/components/schemas/DictionaryWord"
        values:
          type: array
          items:
            type: string
        valuesData:
          type: array
          items:
            $ref: "#/components/schemas/DictionaryWord"
            nullable: true
    ProductItemBase:
      type: object
      required:
        - id
        - name
        - amountInIdt
        - amountInIdp
      properties:
        id:
          type: string
          format: uuid
          description: Product Item ID
        name:
          type: string
          description: Product Item name
        photos:
          type: array
          items:
            type: string
          description: Product Item photos
        amountInIdt:
          type: number
          description: Amount idPacks in idTare to start delivery
        amountInIdp:
          type: number
          description: Amount of goods in idPack
    ProductItem:
      allOf:
        - $ref: "#/components/schemas/ProductItemBase"
        - type: object
          required:
            - externalId
            - externalVersionId
            - productId
            - providerId
            - createdBy
            - createdAt
            - updatedAt
          properties:
            externalId:
              type: string
              format: uuid
              description: Product Item External ID form Provider
            externalVersionId:
              type: string
              format: uuid
              description: Product Version External ID form Provider
            externalConfigId:
              type: string
              format: uuid
              description: Configuration External ID form Provider
            productId:
              type: string
              format: uuid
              description: Product ID
            providerId:
              type: string
              format: uuid
              description: Provider ID
            createdBy:
              type: string
              description: Wallet Address
            createdAt:
              type: string
              format: date-time
              description: Creation Date
            updatedAt:
              type: string
              format: date-time
              description: Last Updating Date
            deletedAt:
              type: string
              format: date-time
              description: Delete Date
            isPublished:
              type: boolean
              description: Product Item is published
    ProductItemWithData:
      allOf:
        - $ref: "#/components/schemas/ProductItem"
        - type: object
          required:
            - createdByData
            - tagsData
            - configurations
            - providerName
          properties:
            createdByData:
              $ref: "#/components/schemas/User"
            tagsData:
              type: array
              items:
                $ref: "#/components/schemas/Tag"
            configurations:
              type: array
              items:
                $ref: "#/components/schemas/ProductCardConfiguration"
            description:
              type: string
              description: Product description
            unitInfo:
              $ref: "#/components/schemas/UnitInfo"
            providerName:
              type: string
              description: Provider Name
    ProductItemLike:
      type: object
      required:
        - itemId
        - createdBy
        - createdAt
      properties:
        itemId:
          type: string
          format: uuid
          description: Product Item ID
        createdBy:
          type: string
          description: Wallet Address
        createdAt:
          type: string
          format: date-time
          description: Creation Date
    ProductBatch:
      type: object
      required:
        - id
        - externalId
        - externalVersionId
        - productId
        - itemId
        - providerId
        - createdBy
        - key
        - name
        - amount
        - amountInIdp
        - produceDate
        - logisticInfo
        - storageInfo
        - unitInfo
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
          description: Batch ID
        productId:
          type: string
          format: uuid
          description: Product ID
        externalId:
          type: string
          format: uuid
          description: Batch External ID form Provider
        externalVersionId:
          type: string
          format: uuid
          description: Product Version External ID form Provider
        externalConfigId:
          type: string
          format: uuid
          description: Product Item Configuration External ID form Provider
        itemId:
          type: string
          format: uuid
          description: Product Item ID
        providerId:
          type: string
          format: uuid
          description: Provider ID
        createdBy:
          type: string
          description: Wallet Address
        key:
          type: string
          description: Batch key from Provider
        name:
          type: string
          description: Product Item Name
        attachments:
          type: array
          description: Attachment documents
          items:
            type: string
            format: uuid
        amount:
          type: number
          description: Amount idPacks in the Batch
        amountInIdp:
          type: number
          description: Amount of goods in idPack
        produceDate:
          type: string
          format: date-time
          description: The production release date
        logisticInfo:
          type: object
          description: Logistic information
        storageInfo:
          type: object
          description: Storage information
        unitInfo:
          $ref: "#/components/schemas/UnitInfo"
        createdAt:
          type: string
          format: date-time
          description: Creation Date
        updatedAt:
          type: string
          format: date-time
          description: Last Updating Date
        deletedAt:
          type: string
          format: date-time
          description: Delete Date
    ProductBatchWithData:
      allOf:
        - $ref: "#/components/schemas/ProductBatch"
        - type: object
          required:
            - createdByData
            - providerName
          properties:
            createdByData:
              $ref: "#/components/schemas/User"
            providerName:
              type: string
              description: Provider Name
    ProductPrice:
      type: object
      required:
        - id
        - externalId
        - productId
        - itemId
        - providerId
        - createdBy
        - price
        - startDate
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
          description: Product Price ID
        externalId:
          type: string
          format: uuid
          description: Price External ID form Provider
        productId:
          type: string
          format: uuid
          description: Product ID
        itemId:
          type: string
          format: uuid
          description: Product Item ID
        providerId:
          type: string
          format: uuid
          description: Provider ID
        createdBy:
          type: string
          description: Wallet Address
        price:
          type: number
          description: Price of the product
        startDate:
          type: string
          format: date-time
          description: Start date of the price validity
        endDate:
          type: string
          format: date-time
          nullable: true
          description: End date of the price validity
        createdAt:
          type: string
          format: date-time
          description: Creation Date
        updatedAt:
          type: string
          format: date-time
          description: Last Updating Date
    ProductPriceWithData:
      allOf:
        - $ref: "#/components/schemas/ProductPrice"
        - type: object
          required:
            - createdByData
            - itemData
          properties:
            createdByData:
              $ref: "#/components/schemas/User"
            itemData:
              $ref: "#/components/schemas/ProductItemBase"
    ProductAmount:
      type: object
      required:
        - id
        - externalId
        - productId
        - itemId
        - providerId
        - createdBy
        - type
        - amount
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
          description: Product Amount ID
        externalId:
          type: string
          format: uuid
          description: Storage ID or PreOrderId based on type from Provider
        productId:
          type: string
          format: uuid
          description: Product ID
        itemId:
          type: string
          format: uuid
          description: Product Item ID
        providerId:
          type: string
          format: uuid
          description: Provider ID
        createdBy:
          type: string
          description: Wallet Address
        type:
          type: string
          enum:
            - available
            - preOrder
          description: Type of product amount
        amount:
          type: number
          description: Amount in pcs
        minAmount:
          type: number
          description: Minimum amount in pcs to start produce (for preOrder)
          nullable: true
        startDate:
          type: string
          format: date-time
          description: Start date (for preOrder)
          nullable: true
        endDate:
          type: string
          format: date-time
          description: End date (for preOrder)
          nullable: true
        produceDuration:
          type: number
          description: Produce duration in days (for preOrder)
          nullable: true
        createdAt:
          type: string
          format: date-time
          description: Creation Date
        updatedAt:
          type: string
          format: date-time
          description: Last Updating Date
        deletedAt:
          type: string
          format: date-time
          description: Delete Date
          nullable: true
    ProductAmountWithData:
      allOf:
        - $ref: "#/components/schemas/ProductAmount"
        - type: object
          required:
            - createdByData
            - itemData
          properties:
            createdByData:
              $ref: "#/components/schemas/User"
            itemData:
              $ref: "#/components/schemas/ProductItemBase"
    ProductIdp:
      type: object
      required:
        - id
        - createdBy
        - providerId
        - batchId
        - createdAt
      properties:
        id:
          type: string
          format: uuid
          description: idP ID
        createdBy:
          type: string
          description: Wallet Address
        providerId:
          type: string
          format: uuid
          description: Provider ID
        batchId:
          type: string
          format: uuid
          description: Batch ID
        createdAt:
          type: string
          format: date-time
          description: Creation Date
        deletedAt:
          type: string
          format: date-time
          description: Delete Date
    ProductIdpWithData:
      allOf:
        - $ref: "#/components/schemas/ProductIdp"
        - type: object
          required:
            - createdByData
            - batchData
          properties:
            createdByData:
              $ref: "#/components/schemas/User"
            batchData:
              $ref: "#/components/schemas/ProductBatchPublic"
    ProductCardPrice:
      type: object
      required:
        - id
        - price
        - startDate
      properties:
        id:
          type: string
          format: uuid
          description: Product Price ID
        price:
          type: number
          description: Price of the product
        startDate:
          type: string
          format: date-time
          description: Start date of the price validity
        endDate:
          type: string
          format: date-time
          nullable: true
          description: End date of the price validity
    ProductCardAmount:
      type: object
      required:
        - amount
      properties:
        amount:
          type: number
          description: Amount in pcs
        minAmount:
          type: number
          description: Minimum amount in pcs to start produce (for preOrder)
          nullable: true
        startDate:
          type: string
          format: date-time
          description: Start date (for preOrder)
          nullable: true
        endDate:
          type: string
          format: date-time
          description: End date (for preOrder)
          nullable: true
        produceDuration:
          type: number
          description: Produce duration in days (for preOrder)
          nullable: true
    ProductCardConfiguration:
      type: object
      required:
        - field
        - fieldData
        - options
      properties:
        field:
          type: string
        fieldData:
          $ref: "#/components/schemas/DictionaryWord"
        options:
          type: array
          items:
            type: object
            required:
              - ids
              - value
            properties:
              ids:
                type: array
                items:
                  type: string
                  format: uuid
                  description: Product Item id
              value:
                type: string
              valueData:
                $ref: "#/components/schemas/DictionaryWord"
    ProductCard:
      allOf:
        - $ref: "#/components/schemas/ProductItemBase"
        - type: object
          required:
            - productId
            - unitInfo
            - currentPrice
          properties:
            productId:
              type: string
              format: uuid
              description: Product ID
            unitInfo:
              $ref: "#/components/schemas/UnitInfo"
            isLiked:
              type: boolean
              description: Current user liked this card or not
            currentPrice:
              $ref: "#/components/schemas/ProductCardPrice"
            availableAmount:
              $ref: "#/components/schemas/ProductCardAmount"
            preOrderAmount:
              $ref: "#/components/schemas/ProductCardAmount"
    ProductCardWithData:
      allOf:
        - $ref: "#/components/schemas/ProductCard"
        - type: object
          required:
            - providerId
            - updatedAt
            - tagsData
            - providerName
            - configurations
          properties:
            providerId:
              type: string
              format: uuid
              description: Provider ID
            updatedAt:
              type: string
              format: date-time
              description: Last Updating Date
            tagsData:
              type: array
              items:
                $ref: "#/components/schemas/Tag"
            description:
              type: string
              description: Product description
            providerName:
              type: string
              description: Provider Name
            configurations:
              type: array
              items:
                $ref: "#/components/schemas/ProductCardConfiguration"
    ProductBatchPublic:
      type: object
      required:
        - id
        - providerId
        - key
        - name
        - amount
        - amountInIdp
        - produceDate
        - storageInfo
        - unitInfo
        - createdAt
        - updatedAt
        - providerName
      properties:
        id:
          type: string
          format: uuid
          description: Batch ID
        providerId:
          type: string
          format: uuid
          description: Provider ID
        key:
          type: string
          description: Batch key from Provider
        name:
          type: string
          description: Product Item Name
        attachments:
          type: array
          description: Attachment documents
          items:
            type: string
            format: uuid
        amount:
          type: number
          description: Amount idPacks in the Batch
        amountInIdp:
          type: number
          description: Amount of goods in idPack
        produceDate:
          type: string
          format: date-time
          description: The production release date
        storageInfo:
          type: object
          description: Storage information
        unitInfo:
          $ref: "#/components/schemas/UnitInfo"
        createdAt:
          type: string
          format: date-time
          description: Creation Date
        updatedAt:
          type: string
          format: date-time
          description: Last Updating Date
        providerName:
          type: string
          description: Provider Name
    ProviderProfile:
      type: object
      required:
        - id
        - name
        - createdBy
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
          description: Provider Profile ID (same as Provider ID)
        name:
          type: string
          description: Provider trade name shows in marketplace
        content:
          type: string
          description: Provider Profile context shows
        photos:
          type: array
          items:
            type: string
          description: Provider Profile photos
        video:
          type: string
          description: Provider Profile intro video
        dispatchPlaceId:
          type: string
          format: uuid
          description: Dispatch place ID
        locationExternalId:
          type: string
          description: External ID of place where provider is mentioned
        locationLat:
          type: number
          description: Place latitude coordinate
        locationLong:
          type: number
          description: Place longitude coordinate
        createdBy:
          type: string
          description: Wallet Address
          example: 0:c424531feb64afeb46607e0aff5609628207213308b62c123891d817389fc35b
        createdAt:
          type: string
          format: date-time
          description: Creation Date
        updatedAt:
          type: string
          format: date-time
          description: Last Updating Date
        deletedAt:
          type: string
          format: date-time
          nullable: true
          description: Deleted Date
    ProviderProfileWithData:
      allOf:
        - $ref: "#/components/schemas/ProviderProfile"
        - type: object
          required:
            - produceCategories
            - deployProducts
            - completedOrders
            - activeOrders
            - totalOrders
          properties:
            produceCategories:
              type: array
              items:
                type: string
              description: 2d level catalogs in marketplace based on products
            deployProducts:
              type: number
              description: Number of products that was created on marketplace including
                deleted
            completedOrders:
              type: number
              description: Number of completed orders
            activeOrders:
              type: number
              description: Number of active orders
            totalOrders:
              type: number
              description: Number of total orders
    ProviderWithProfile:
      allOf:
        - $ref: "#/components/schemas/ProviderProfile"
        - type: object
          required:
            - address
            - callback
            - blocked
          properties:
            address:
              type: string
              description: Provider address
            callback:
              type: string
              description: Provider callback
            blocked:
              type: boolean
              description: Provider is blocked
    Tag:
      type: object
      required:
        - id
        - field
        - createdBy
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
          description: Tag ID
        productId:
          type: string
          description: Product ID
        itemId:
          type: string
          description: Product Item ID
        field:
          type: string
          description: Tag name
        fieldData:
          $ref: "#/components/schemas/DictionaryWord"
        value:
          type: string
          description: Tag value
        valueData:
          $ref: "#/components/schemas/DictionaryWord"
        category:
          type: string
          description: Category name
        categoryData:
          $ref: "#/components/schemas/DictionaryWord"
        isConfig:
          type: string
          description: Is configurable tag
        createdBy:
          type: string
          description: Wallet Address
          example: 0:c424531feb64afeb46607e0aff5609628207213308b62c123891d817389fc35b
        providerId:
          type: string
          format: uuid
          description: Provider ID
        createdAt:
          type: string
          format: date-time
          description: Creation Date
        updatedAt:
          type: string
          format: date-time
          description: Last Updating Date
    TaskType:
      type: string
      enum:
        - productItemReview
        - simpleTask
        - fillIdt
        - pickUpIdt
        - receiveIdt
        - giveOutIdt
        - deliverIdt
    TaskStatus:
      type: string
      enum:
        - new
        - todo
        - progress
        - blocked
        - review
        - done
        - discard
    TaskPriority:
      type: string
      enum:
        - low
        - medium
        - high
    TaskArtefactType:
      type: string
      enum:
        - product
    TaskDataPlace:
      type: object
      required:
        - id
        - name
        - lat
        - long
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        photos:
          type: array
          items:
            type: string
        lat:
          type: number
        long:
          type: number
    TaskIdtWithIdp:
      type: object
      required:
        - id
        - key
        - contains
        - itemName
      properties:
        id:
          type: string
        key:
          type: string
        contains:
          type: array
          items:
            allOf:
              - $ref: "#/components/schemas/DeliveryIdpBase"
              - type: object
                required:
                  - name
                  - batchId
                properties:
                  batchId:
                    type: string
                    format: uuid
                    description: Product Batch External ID
                  name:
                    type: string
                    description: Product Item Name
    BaseTask:
      type: object
      required:
        - id
        - key
        - type
        - status
        - priority
        - createdBy
        - providerId
        - name
        - description
        - files
        - data
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
        key:
          type: string
        type:
          $ref: "#/components/schemas/TaskType"
        status:
          $ref: "#/components/schemas/TaskStatus"
        priority:
          $ref: "#/components/schemas/TaskPriority"
        assignee:
          type: string
        createdBy:
          type: string
        providerId:
          type: string
        name:
          type: string
        description:
          type: string
        files:
          type: array
          items:
            type: string
        dueDate:
          type: string
          format: date-time
        data:
          type: object
        artefactId:
          type: string
        artefactType:
          $ref: "#/components/schemas/TaskArtefactType"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    TaskSimple:
      allOf:
        - $ref: "#/components/schemas/BaseTask"
        - type: object
          properties:
            type:
              enum:
                - simpleTask
    TaskProductItemReview:
      allOf:
        - $ref: "#/components/schemas/BaseTask"
        - type: object
          properties:
            type:
              enum:
                - productItemReview
            data:
              type: object
              properties:
                comment:
                  type: string
                status:
                  type: string
                  enum:
                    - blocked
                    - published
    TaskFillIdt:
      allOf:
        - $ref: "#/components/schemas/BaseTask"
        - type: object
          properties:
            type:
              enum:
                - fillIdt
            data:
              type: object
              required:
                - productId
                - versionId
                - orders
                - name
                - amount
              properties:
                productId:
                  type: string
                versionId:
                  type: string
                configId:
                  type: string
                orders:
                  type: array
                  items:
                    type: string
                name:
                  type: string
                amount:
                  type: number
                idtList:
                  type: array
                  items:
                    $ref: "#/components/schemas/TaskIdtWithIdp"
    TaskPickUpIdt:
      allOf:
        - $ref: "#/components/schemas/BaseTask"
        - type: object
          properties:
            type:
              enum:
                - pickUpIdt
            data:
              type: object
              required:
                - dispatchPlace
                - pickUpSubtasks
              properties:
                dispatchPlace:
                  ref: "#/components/schemas/TaskDataPlace"
                pickUpSubtasks:
                  type: array
                  required:
                    - provider
                    - place
                    - idtList
                  items:
                    type: object
                    properties:
                      provider:
                        type: object
                        properties:
                          id:
                            type: string
                          name:
                            type: string
                      place:
                        ref: "#/components/schemas/TaskDataPlace"
                      idtList:
                        type: array
                        items:
                          $ref: "#/components/schemas/TaskIdtWithIdp"
                      completed:
                        type: boolean
    TaskReceiveIdt:
      allOf:
        - $ref: "#/components/schemas/BaseTask"
        - type: object
          properties:
            type:
              enum:
                - receiveIdt
            data:
              type: object
              required:
                - place
                - fromUserId
                - fromUserName
                - idtList
              properties:
                place:
                  ref: "#/components/schemas/TaskDataPlace"
                fromUserId:
                  type: string
                fromUserName:
                  type: string
                idtList:
                  type: array
                  items:
                    $ref: "#/components/schemas/TaskIdtWithIdp"
    TaskGiveOutIdt:
      allOf:
        - $ref: "#/components/schemas/BaseTask"
        - type: object
          properties:
            type:
              enum:
                - giveOutIdt
            data:
              type: object
              required:
                - place
                - toUserId
                - toUserName
                - idtList
              properties:
                place:
                  ref: "#/components/schemas/TaskDataPlace"
                toUserId:
                  type: string
                toUserName:
                  type: string
                idtList:
                  type: array
                  items:
                    $ref: "#/components/schemas/TaskIdtWithIdp"
    TaskDeliverIdt:
      allOf:
        - $ref: "#/components/schemas/BaseTask"
        - type: object
          properties:
            type:
              enum:
                - deliverIdt
            data:
              type: object
              required:
                - pickUpPlace
                - dispatchPlace
                - idtList
                - orders
              properties:
                pickUpPlace:
                  ref: "#/components/schemas/TaskDataPlace"
                dispatchPlace:
                  ref: "#/components/schemas/TaskDataPlace"
                idtList:
                  type: array
                  items:
                    $ref: "#/components/schemas/TaskIdtWithIdp"
                orders:
                  type: array
                  items:
                    type: object
                deliveryLogs:
                  type: array
                  items:
                    type: object
                    required:
                      - idtId
                      - idtKey
                      - orderId
                      - orderKey
                      - positionId
                      - amount
                      - timestamp
                    properties:
                      idtId:
                        type: string
                      idtKey:
                        type: string
                      orderId:
                        type: string
                      orderKey:
                        type: string
                      positionId:
                        type: string
                      amount:
                        type: number
                      timestamp:
                        type: string
                        format: date-time
    Task:
      oneOf:
        - $ref: "#/components/schemas/TaskSimple"
        - $ref: "#/components/schemas/TaskProductItemReview"
        - $ref: "#/components/schemas/TaskFillIdt"
        - $ref: "#/components/schemas/TaskPickUpIdt"
        - $ref: "#/components/schemas/TaskReceiveIdt"
        - $ref: "#/components/schemas/TaskGiveOutIdt"
        - $ref: "#/components/schemas/TaskDeliverIdt"
    TaskWithData:
      allOf:
        - $ref: "#/components/schemas/Task"
        - type: object
          properties:
            createdByData:
              $ref: "#/components/schemas/User"
            assigneeData:
              $ref: "#/components/schemas/User"
  parameters:
    appNameParam:
      in: path
      name: name
      description: Unique name
      required: true
      schema:
        type: string
    providerIdParam:
      in: path
      name: id
      description: Provider ID
      required: true
      schema:
        type: string
        format: uuid
    walletParam:
      in: path
      name: wallet
      description: Wallet Address
      required: true
      schema:
        type: string
    idTParam:
      in: path
      name: id
      description: Delivery idT ID
      required: true
      schema:
        type: string
        format: uuid
    idTKeyParam:
      in: path
      name: id
      description: Delivery idT key or ID
      required: true
      schema:
        type: string
    idPParam:
      in: path
      name: id
      description: Delivery idP ID
      required: true
      schema:
        type: string
        format: uuid
    fileIdParam:
      in: path
      name: id
      description: File ID
      required: true
      schema:
        type: string
        format: uuid
    folderIdParam:
      in: path
      name: id
      description: Folder ID
      required: true
      schema:
        type: string
        format: uuid
    filterIdParam:
      in: path
      name: filterId
      description: Filter ID
      required: true
      schema:
        type: string
        format: uuid
    orderIdParam:
      in: path
      name: id
      description: Order ID
      required: true
      schema:
        type: string
        format: uuid
    orderPositionIdParam:
      in: path
      name: id
      description: Order Position ID
      required: true
      schema:
        type: string
        format: uuid
    placeIdParam:
      in: path
      name: id
      description: Place ID
      required: true
      schema:
        type: string
        format: uuid
    productIdParam:
      in: path
      name: id
      description: Product ID or External ID
      required: true
      schema:
        type: string
        format: uuid
    productItemIdParam:
      in: path
      name: id
      description: Product Item ID or External Item ID
      required: true
      schema:
        type: string
        format: uuid
    productBatchIdParam:
      in: path
      name: id
      description: Product Batch ID or External Batch ID
      required: true
      schema:
        type: string
        format: uuid
    productPriceIdParam:
      in: path
      name: id
      description: Product Price ID or External Price ID
      required: true
      schema:
        type: string
        format: uuid
    productAmountIdParam:
      in: path
      name: id
      description: Product Amount ID or External Storage ID or PreOrder ID
      required: true
      schema:
        type: string
        format: uuid
    productIdpParam:
      in: path
      name: id
      description: idP ID
      required: true
      schema:
        type: string
        format: uuid
    tagIdParam:
      in: path
      name: id
      description: Tag ID
      required: true
      schema:
        type: string
        format: uuid
    taskIdParam:
      in: path
      name: id
      description: Task ID
      required: true
      schema:
        type: string
        format: uuid
  requestBodies:
    ActivateAppBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - key
              - name
              - address
            properties:
              key:
                type: string
                description: App key
              name:
                type: string
                description: Service Unique Name
              address:
                type: string
                description: Service URL Address
    EmptyBody:
      content:
        application/json:
          schema:
            type: object
    SearchProvidersBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              isBlocked:
                type: boolean
                description: Filter by blocked status
              limit:
                type: number
                description: Number of return items
              offset:
                type: number
                description: Number of skip items
              sort:
                type: array
                items:
                  $ref: "#/components/schemas/SortModel"
    RegisterProviderRequestBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - name
              - address
              - callback
              - wallet
            properties:
              name:
                type: string
                description: Provider Name
              address:
                type: string
                description: Provider URL Address
              callback:
                type: string
                description: Provider Callback Address
              wallet:
                type: string
                description: TON Address who making request
    ProviderRequestBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - name
              - address
              - callback
            properties:
              name:
                type: string
                description: Provider Name
              address:
                type: string
                description: Provider URL Address
              callback:
                type: string
                description: Provider Callback Address
    SearchActivitiesBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              artefactId:
                type: string
                format: uuid
                description: Artefact ID
              providerId:
                type: string
                format: uuid
                description: Provider ID
              types:
                type: array
                items:
                  $ref: "#/components/schemas/ActivityType"
              limit:
                type: number
                description: Number of return items
              offset:
                type: number
                description: Number of skip items
              sort:
                type: array
                items:
                  $ref: "#/components/schemas/SortModel"
    CreateAdminAccessBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - wallet
            properties:
              wallet:
                type: string
                description: Wallet Address
                example: 0:c424531feb64afeb46607e0aff5609628207213308b62c123891d817389fc35b
    SearchUsersBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              searchTerm:
                type: string
                description: User first name, last name or middle name
              ids:
                type: array
                items:
                  type: string
                  description: Wallet address
              limit:
                type: number
                description: Number of return items
              offset:
                type: number
                description: Number of skip items
              sort:
                type: array
                items:
                  $ref: "#/components/schemas/SortModel"
    SearchDeliveryIdtBody:
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/SearchModel"
              - type: object
                properties:
                  status:
                    type: array
                    items:
                      type: string
                      enum:
                        - created
                        - storage
                        - delivery
                        - provider
                        - lost
                        - destroyed
                  keys:
                    type: array
                    items:
                      type: string
                      description: Delivery idT unique key in format `A_000001`
                  searchTerm:
                    type: string
                    description: Partial idT key
                  ids:
                    type: array
                    items:
                      type: string
                      format: uuid
                      description: Delivery idT ID
                  responsible:
                    type: array
                    items:
                      type: string
                      description: Delivery idT responsible wallet
                  providers:
                    type: array
                    items:
                      type: string
                      format: uuid
                      description: Provider ID
    CreateDeliveryIdtBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - prefix
              - amount
            properties:
              prefix:
                type: string
                minLength: 1
                maxLength: 3
                description: Start prefix of idT unique key. Min length - 1, max length - 3.
              amount:
                type: number
                minimum: 1
                maximum: 1000
                description: Number of idT to create
    EditDeliveryIdtBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                enum:
                  - created
                  - storage
                  - delivery
                  - provider
                  - lost
                  - destroyed
                description: Delivery idT status
              responsible:
                type: string
                description: Wallet of responsible user
    SearchDeliveryIdpBody:
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/SearchModel"
              - type: object
                properties:
                  status:
                    type: array
                    items:
                      type: string
                      enum:
                        - created
                        - storage
                        - delivery
                        - provider
                        - lost
                        - destroyed
                  keys:
                    type: array
                    items:
                      type: string
                      description: Delivery idT unique key in format `A_000001`
                  searchTerm:
                    type: string
                    description: Partial idT key
                  fromNumber:
                    type: number
                    description: Delivery idP number from
                  toNumber:
                    type: number
                    description: Delivery idP number to
                  ids:
                    type: array
                    items:
                      type: string
                      format: uuid
                      description: Delivery idT ID
    CreateDeliveryIdpBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - amount
            properties:
              amount:
                type: number
                minimum: 1
                maximum: 1000
                description: Number of idP to create
    UploadFileBody:
      content:
        multipart/form-data:
          schema:
            type: object
            properties:
              id:
                type: string
                format: uuid
                description: If set and file exists then file content will be overwritten
              externalId:
                type: string
                format: uuid
                description: External file ID
              file:
                type: string
                format: binary
    CreateFolderBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - name
              - commission
            properties:
              name:
                type: string
                description: Folder name
              photo:
                type: string
                description: Folder photo
              commission:
                type: number
                description: Commission that applies to products in this folder
              parentId:
                type: string
                nullable: true
                format: uuid
                description: Folder parent ID
              order:
                type: number
                description: Folder order
    EditFolderBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                description: Folder name
              photo:
                type: string
                description: Folder photo
              commission:
                type: number
                description: Commission that applies to products in this folder
    MoveFolderBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - id
            properties:
              id:
                type: string
                format: uuid
                description: Folder ID
              parentId:
                type: string
                nullable: true
                format: uuid
                description: Folder patent ID
              afterId:
                type: string
                format: uuid
                description: Should move after folder ID
              beforeId:
                type: string
                format: uuid
                description: Should move before folder ID
    MakePublicFolderBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              shouldCancel:
                type: boolean
                description: Available for `System Admin` and used to cancel user public request
    CreateFolderFilterBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - field
              - operator
              - value
            properties:
              field:
                type: string
                description: Formula attribute
              operator:
                $ref: "#/components/schemas/FolderFormulaOperator"
              value:
                type: string
                description: Formula value
              unit:
                type: string
                description: Formula unit
              order:
                type: number
                description: Filter order
    EditFolderFilterBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              field:
                type: string
                description: Formula attribute
              operator:
                $ref: "#/components/schemas/FolderFormulaOperator"
              value:
                type: string
                description: Formula value
              unit:
                type: string
                description: Formula unit
    SearchFoldersFiltersBody:
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/SearchModel"
              - type: object
                properties:
                  searchTerm:
                    type: string
                    description: Search term
    MoveFolderFilterBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - id
              - filterId
            properties:
              filterId:
                type: string
                format: uuid
                description: Filter ID
              afterId:
                type: string
                format: uuid
                description: Should move after folder ID
              beforeId:
                type: string
                format: uuid
                description: Should move before folder ID
    SearchOrdersBody:
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/SearchModel"
              - type: object
                properties:
                  status:
                    $ref: "#/components/schemas/OrderStatus"
                  places:
                    type: array
                    items:
                      type: string
                      format: uuid
                      description: Place ID
                  providers:
                    type: array
                    items:
                      type: string
                      format: uuid
                      description: Provider ID
                  products:
                    type: array
                    items:
                      type: string
                      format: uuid
                      description: Product ID
                  items:
                    type: array
                    items:
                      type: string
                      format: uuid
                      description: Product Item ID
                  createdBy:
                    type: array
                    items:
                      type: string
                      description: Order creator
    SearchOrdersPositionsBody:
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/SearchModel"
              - type: object
                properties:
                  status:
                    $ref: "#/components/schemas/OrderPositionStatus"
                  places:
                    type: array
                    items:
                      type: string
                      format: uuid
                      description: Place ID
                  providers:
                    type: array
                    items:
                      type: string
                      format: uuid
                      description: Provider ID
                  products:
                    type: array
                    items:
                      type: string
                      format: uuid
                      description: Product ID
                  items:
                    type: array
                    items:
                      type: string
                      format: uuid
                      description: Product Item ID
                  createdBy:
                    type: array
                    items:
                      type: string
                      description: Order creator
    SearchItemsOrdersPositionsBody:
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/SearchModel"
              - type: object
                properties:
                  places:
                    type: array
                    items:
                      type: string
                      format: uuid
                      description: Place ID
                  providers:
                    type: array
                    items:
                      type: string
                      format: uuid
                      description: Provider ID
                  products:
                    type: array
                    items:
                      type: string
                      format: uuid
                      description: Product ID
                  items:
                    type: array
                    items:
                      type: string
                      format: uuid
                      description: Product Item ID
                  createdBy:
                    type: array
                    items:
                      type: string
                      description: Order creator
    SearchMyOrdersBody:
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/SearchModel"
              - type: object
                properties:
                  status:
                    type: string
                    enum:
                      - created
                      - processing
                      - paid
                      - failed
                      - cancelled
                      - completed
                  places:
                    type: array
                    items:
                      type: string
                      format: uuid
                      description: Place ID
                  providers:
                    type: array
                    items:
                      type: string
                      format: uuid
                      description: Provider ID
                  products:
                    type: array
                    items:
                      type: string
                      format: uuid
                      description: Product ID
                  items:
                    type: array
                    items:
                      type: string
                      format: uuid
                      description: Product Item ID
                  ids:
                    type: array
                    items:
                      type: string
                      format: uuid
                      description: Order ID
    CreateOrderBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - placeId
              - totalPrice
              - positions
            properties:
              placeId:
                type: string
                format: uuid
                description: Pick-up place ID
              totalPrice:
                type: number
                description: Total order price
              positions:
                type: array
                items:
                  type: object
                  required:
                    - itemId
                    - amount
                    - price
                  properties:
                    itemId:
                      type: string
                      format: uuid
                      description: Product Item ID
                    amount:
                      type: number
                      description: Amount of item
                    price:
                      type: number
                      description: Price that is shown
    EditOrderBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              txHash:
                type: string
                description: TON Blockchain tx hash
    EditOrderPositionBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                enum:
                  - confirmed
                  - declined
                  - production
                  - deliveryReady
                  - delivery
    CreatePlaceBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - name
              - type
              - lat
              - long
            properties:
              type:
                type: string
                enum:
                  - pick-up
                  - dispatch
                description: Place Type
              name:
                type: string
                description: Place name
              description:
                type: string
                description: Place description
              photos:
                type: array
                items:
                  type: string
                description: Place photos
              workHours:
                $ref: "#/components/schemas/PlaceWorkHours"
                description: Place working hours
              color:
                type: string
                description: Place color showing on map
              lat:
                type: number
                description: Place latitude coordinate
              long:
                type: number
                description: Place longitude coordinate
    EditPlaceBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                description: Place name
              description:
                type: string
                description: Place description
              photos:
                type: array
                items:
                  type: string
                description: Place photos
              workHours:
                $ref: "#/components/schemas/PlaceWorkHours"
                description: Place working hours
              color:
                type: string
                description: Place color showing on map
              lat:
                type: number
                description: Place latitude coordinate
              long:
                type: number
                description: Place longitude coordinate
    SearchProductsBody:
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/SearchModel"
              - type: object
                properties:
                  searchTerm:
                    type: string
                    description: Search term
                  providers:
                    type: array
                    items:
                      type: string
                      format: uuid
                      description: Provider ID
                  ids:
                    type: array
                    items:
                      type: string
                      format: uuid
                      description: Product ID
                  folders:
                    type: array
                    items:
                      type: string
                      format: uuid
                      description: Folder ID
                  filters:
                    type: array
                    items:
                      $ref: "#/components/schemas/ProductFilter"
                  isDeleted:
                    type: boolean
                    description: Returns only deleted products
                  isBlocked:
                    type: boolean
                    description: Returns only blocked products
    SearchProductItemsBody:
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/SearchModel"
              - type: object
                properties:
                  searchTerm:
                    type: string
                    description: Search term
                  providers:
                    type: array
                    items:
                      type: string
                      format: uuid
                      description: Provider ID
                  ids:
                    type: array
                    items:
                      type: string
                      format: uuid
                      description: Product Item ID
                  products:
                    type: array
                    items:
                      type: string
                      format: uuid
                      description: Product Item ID
                  folders:
                    type: array
                    items:
                      type: string
                      format: uuid
                      description: Folder ID
                  filters:
                    type: array
                    items:
                      $ref: "#/components/schemas/ProductFilter"
                  isDeleted:
                    type: boolean
                    description: Returns only deleted product items
    SearchProductBatchesBody:
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/SearchModel"
              - type: object
                properties:
                  searchTerm:
                    type: string
                    description: Search term
                  products:
                    type: array
                    items:
                      type: string
                      format: uuid
                      description: Product ID
                  items:
                    type: array
                    items:
                      type: string
                      format: uuid
                      description: Product Item ID
                  ids:
                    type: array
                    items:
                      type: string
                      format: uuid
                      description: Product Batch ID
                  isDeleted:
                    type: boolean
                    description: Returns only deleted product batches
    SearchProductPricesBody:
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/SearchModel"
              - type: object
                properties:
                  searchTerm:
                    type: string
                    description: Search term
                  products:
                    type: array
                    items:
                      type: string
                      format: uuid
                      description: Product ID
                  items:
                    type: array
                    items:
                      type: string
                      format: uuid
                      description: Product Item ID
                  ids:
                    type: array
                    items:
                      type: string
                      format: uuid
                      description: Product Price ID
                  isDeleted:
                    type: boolean
                    description: Returns only deleted product prices
    SearchProductAmountsBody:
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/SearchModel"
              - type: object
                properties:
                  searchTerm:
                    type: string
                    description: Search term
                  products:
                    type: array
                    items:
                      type: string
                      format: uuid
                      description: Product ID
                  items:
                    type: array
                    items:
                      type: string
                      format: uuid
                      description: Product Item ID
                  ids:
                    type: array
                    items:
                      type: string
                      format: uuid
                      description: Product Price ID
                  isDeleted:
                    type: boolean
                    description: Returns only deleted product amounts
    SearchProductIdpBody:
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/SearchModel"
              - type: object
                properties:
                  searchTerm:
                    type: string
                    description: Search term
                  ids:
                    type: array
                    items:
                      type: string
                      format: uuid
                      description: idP ID
                  batches:
                    type: array
                    items:
                      type: string
                      format: uuid
                      description: Product Batch ID
    SearchProductCardsBody:
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/SearchModel"
              - type: object
                properties:
                  searchTerm:
                    type: string
                    description: Search term
                  placeId:
                    type: string
                    format: uuid
                    description: Place ID for pickup
                  ids:
                    type: array
                    items:
                      type: string
                      format: uuid
                      description: Product Item ID
                  products:
                    type: array
                    items:
                      type: string
                      format: uuid
                      description: Product ID
                  folders:
                    type: array
                    items:
                      type: string
                      format: uuid
                      description: Folder ID
                  filters:
                    type: array
                    items:
                      $ref: "#/components/schemas/ProductFilter"
                  isLiked:
                    type: boolean
                    description: Returns liked items (only for authorized requests)
                  isBought:
                    type: boolean
                    description: Returns bought items (only for authorized requests)
    SearchProductCardsSuggesterBody:
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/SearchModel"
              - type: object
                properties:
                  searchTerm:
                    type: string
                    description: Search term
    SearchProductCardsFiltersBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              folders:
                type: array
                items:
                  type: string
                  format: uuid
    CreateProductBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - externalId
              - name
              - tags
            properties:
              externalId:
                type: string
                format: uuid
                description: Product External ID form Provider
              name:
                type: string
                description: Product name
              description:
                type: string
                description: Product description
              photos:
                type: array
                items:
                  type: string
                description: Product photos
              videos:
                type: array
                items:
                  type: string
                description: Product videos
              unitInfo:
                $ref: "#/components/schemas/UnitInfo"
              tags:
                type: array
                items:
                  type: object
                  properties:
                    externalId:
                      type: string
                      format: uuid
                      description: Tag External ID form Provider
                    category:
                      type: string
                    field:
                      type: string
                    value:
                      type: string
    EditProductBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                description: Product name
              description:
                type: string
                description: Product description
              photos:
                type: array
                items:
                  type: string
                description: Product photos
              videos:
                type: array
                items:
                  type: string
                description: Product videos
              unitInfo:
                $ref: "#/components/schemas/UnitInfo"
              tags:
                type: array
                items:
                  type: object
                  properties:
                    externalId:
                      type: string
                      format: uuid
                      description: Tag External ID form Provider
                    category:
                      type: string
                    field:
                      type: string
                    value:
                      type: string
    CreateProductItemBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - externalProductId
              - externalId
              - externalVersionId
              - name
              - tags
              - amountInIdt
              - amountInIdp
              - prices
            properties:
              externalProductId:
                type: string
                format: uuid
                description: Product External ID form Provider
              externalId:
                type: string
                format: uuid
                description: Product Item External ID form Provider
              externalVersionId:
                type: string
                format: uuid
                description: Configuration External ID form Provider
              externalConfigId:
                type: string
                format: uuid
                description: Configuration External ID form Provider
              name:
                type: string
                description: Product item name
              photos:
                type: array
                items:
                  type: string
                description: Product item photos
              tags:
                type: array
                items:
                  type: object
                  properties:
                    externalId:
                      type: string
                      format: uuid
                      description: Tag External ID form Provider
                    category:
                      type: string
                    field:
                      type: string
                    value:
                      type: string
                    isConfig:
                      type: boolean
              amountInIdt:
                type: number
                description: Amount idPacks in idTare to start delivery
              amountInIdp:
                type: number
                description: Amount of goods in idPack
              prices:
                type: array
                items:
                  type: object
                  required:
                    - externalId
                    - price
                    - startDate
                  properties:
                    externalId:
                      type: string
                      format: uuid
                      description: Price External ID form Provider
                    externalConfigId:
                      type: string
                      format: uuid
                      description: Product Item Configuration External ID form Provider
                      nullable: true
                    price:
                      type: number
                      description: Price of the product
                    startDate:
                      type: string
                      format: date-time
                      description: Start date of the price validity
    EditProductItemBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                description: Product item name
              photos:
                type: array
                items:
                  type: string
                description: Product item photos
              tags:
                type: array
                items:
                  type: object
                  properties:
                    externalId:
                      type: string
                      format: uuid
                      description: Tag External ID form Provider
                    category:
                      type: string
                    field:
                      type: string
                    value:
                      type: string
                    isConfig:
                      type: boolean
              amountInIdt:
                type: number
                description: Amount idPacks in idTare to start delivery
              amountInIdp:
                type: number
                description: Amount of goods in idPack
    CreateProductBatchBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - externalId
              - externalProductId
              - externalVersionId
              - key
              - name
              - amount
              - amountInIdp
              - produceDate
              - logisticInfo
              - storageInfo
              - unitInfo
            properties:
              externalId:
                type: string
                format: uuid
                description: Batch External ID form Provider
              externalProductId:
                type: string
                format: uuid
                description: Product External ID form Provider
              externalVersionId:
                type: string
                format: uuid
                description: Product Version External ID form Provider
              externalConfigId:
                type: string
                format: uuid
                description: Product Item Configuration External ID form Provider
                nullable: true
              key:
                type: string
                description: Batch key from Provider
              name:
                type: string
                description: Product Item Name
              attachments:
                type: array
                description: Attachment documents
                items:
                  type: string
                  format: uuid
              amount:
                type: number
                description: Amount idPacks in the Batch
              amountInIdp:
                type: number
                description: Amount of goods in idPack
              produceDate:
                type: string
                format: date-time
                description: The production release date
              logisticInfo:
                type: object
                description: Logistic information
              storageInfo:
                type: object
                description: Storage information
              unitInfo:
                $ref: "#/components/schemas/UnitInfo"
    EditProductBatchBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              attachments:
                type: array
                description: Attachment documents
                items:
                  type: string
                  format: uuid
    CreateProductPriceBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - externalId
              - externalProductId
              - externalVersionId
              - price
              - startDate
            properties:
              externalId:
                type: string
                format: uuid
                description: Price External ID form Provider
              externalProductId:
                type: string
                format: uuid
                description: Product External ID form Provider
              externalVersionId:
                type: string
                format: uuid
                description: Product Version External ID form Provider
              externalConfigId:
                type: string
                format: uuid
                description: Product Item Configuration External ID form Provider
                nullable: true
              price:
                type: number
                description: Price of the product
              startDate:
                type: string
                format: date-time
                description: Start date of the price validity
    EditProductPriceBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              price:
                type: number
                description: Price of the product
              startDate:
                type: string
                format: date-time
                description: Start date of the price validity
    CreateProductAmountBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - externalId
              - externalProductId
              - externalVersionId
              - type
              - amount
            properties:
              externalId:
                type: string
                format: uuid
                description: Storage ID or PreOrder ID based on `type`
              externalProductId:
                type: string
                format: uuid
                description: Product External ID form Provider
              externalVersionId:
                type: string
                format: uuid
                description: Product Version External ID form Provider
              externalConfigId:
                type: string
                format: uuid
                description: Product Item Configuration External ID form Provider
                nullable: true
              type:
                type: string
                enum:
                  - available
                  - preOrder
                description: Type of product amount
              amount:
                type: number
                description: Amount in pcs
              minAmount:
                type: number
                description: Minimum amount in pcs to start produce (for preOrder)
                nullable: true
              startDate:
                type: string
                format: date-time
                description: Start date (for preOrder)
                nullable: true
              endDate:
                type: string
                format: date-time
                description: End date (for preOrder)
                nullable: true
              produceDuration:
                type: number
                description: Produce duration in days (for preOrder)
                nullable: true
    EditProductAmountBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              amount:
                type: number
                description: Amount in pcs
              minAmount:
                type: number
                description: Minimum amount in pcs to start produce (for preOrder)
                nullable: true
              startDate:
                type: string
                format: date-time
                description: Start date (for preOrder)
                nullable: true
              endDate:
                type: string
                format: date-time
                description: End date (for preOrder)
                nullable: true
              produceDuration:
                type: number
                description: Produce duration in days (for preOrder)
                nullable: true
    CreateProductIdpBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - id
              - externalBatchId
            properties:
              id:
                type: string
                format: uuid
                description: idP ID
              externalBatchId:
                type: string
                format: uuid
                description: Batch External ID form Provider
    UpdateProviderProfileBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
                description: Provider trade name shows in marketplace
              content:
                type: string
                description: Provider Profile context shows
              photos:
                type: array
                items:
                  type: string
                description: Provider Profile photos
              video:
                type: string
                description: Provider Profile intro video
              dispatchPlaceId:
                type: string
                format: uuid
                description: Dispatch place ID
              locationExternalId:
                type: string
                description: External ID of place where provider is mentioned
              locationLat:
                type: number
                description: Place latitude coordinate
              locationLong:
                type: number
                description: Place longitude coordinate
    SearchProviderProfilesBody:
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/SearchModel"
              - type: object
                properties:
                  searchTerm:
                    type: string
                    description: Search term
                  ids:
                    type: array
                    description: Provider ids
                    items:
                      type: string
                      format: uuid
    SearchTagsBody:
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/SearchModel"
              - type: object
                properties:
                  searchTerm:
                    type: string
                    description: Search term
                  ids:
                    type: array
                    description: Tag ids
                    items:
                      type: string
                      format: uuid
                  fields:
                    type: array
                    description: Tag field
                    items:
                      type: string
                  values:
                    type: array
                    description: Tag value
                    items:
                      type: string
    SearchTasksBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              searchTerm:
                type: string
                description: Search term
              types:
                type: array
                items:
                  type: string
                  enum:
                    - simpleTask
                    - productItemReview
                    - fillIdt
                    - pickUpIdt
                    - receiveIdt
                    - giveOutIdt
                    - deliverIdt
                description: Task types
              status:
                type: array
                items:
                  type: string
                  enum:
                    - new
                    - todo
                    - progress
                    - blocked
                    - review
                    - done
                    - discard
                description: Task status
              priority:
                type: array
                items:
                  type: string
                  enum:
                    - low
                    - medium
                    - high
                description: Task priority
              assignee:
                type: array
                items:
                  type: string
                description: Assignee IDs
              createdBy:
                type: array
                items:
                  type: string
                description: Created by IDs
              limit:
                type: number
                description: Number of return items
              offset:
                type: number
                description: Number of skip items
              sort:
                type: array
                items:
                  $ref: "#/components/schemas/SortModel"
    CreateTaskBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - type
              - name
            properties:
              type:
                type: string
                description: Task type
                enum:
                  - simpleTask
                  - productItemReview
                  - fillIdt
                  - pickUpIdt
                  - receiveIdt
                  - giveOutIdt
                  - deliverIdt
              priority:
                type: string
                description: Task priority
                enum:
                  - low
                  - medium
                  - high
              name:
                type: string
                description: Task name
              description:
                type: string
                description: Task description
              files:
                type: array
                items:
                  type: string
                description: Attached files
              assignee:
                type: string
                description: Wallet Address
                example: 0:c424531feb64afeb46607e0aff5609628207213308b62c123891d817389fc35b
              providerId:
                type: string
                description: Provider ID
              dueDate:
                type: string
                format: date-time
                description: Due Date
    EditTaskBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                description: Task status
                enum:
                  - new
                  - todo
                  - progress
                  - blocked
                  - review
                  - done
                  - discard
              priority:
                type: string
                description: Task priority
                enum:
                  - low
                  - medium
                  - high
              name:
                type: string
                description: Task name
              description:
                type: string
                description: Task description
              files:
                type: array
                items:
                  type: string
                description: Attached files
              data:
                type: object
              assignee:
                type: string
                description: Wallet Address
                example: 0:c424531feb64afeb46607e0aff5609628207213308b62c123891d817389fc35b
              providerId:
                type: string
                description: Provider ID
              dueDate:
                type: string
                format: date-time
                description: Due Date
  responses:
    AppData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/App"
    AppListData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/App"
    AppPublicData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/AppPublic"
    AppNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: app:404
            message: App not found
    AppRegistrationError:
      description: System error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: app:400-register
            message: Failure on app registration
    UserData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/User"
    UserNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: user:404
            message: User does not exist
    InvalidData:
      description: Invalid request data
    Unauthorized:
      description: Unauthorized
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: api:403
            message: You don't have access to this method
    ProviderData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Provider"
    ProviderWithSecretData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProviderWithSecret"
    SearchProvidersData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - total
              - items
            properties:
              total:
                type: number
              items:
                type: array
                items:
                  $ref: "#/components/schemas/Provider"
    ProviderNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: provider:404
            message: Provider not found
    SearchActivitiesData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - total
              - items
            properties:
              total:
                type: number
              items:
                type: array
                items:
                  $ref: "#/components/schemas/ActivityLog"
    CheckUserAccess:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - isAdmin
              - isWalletAdmin
            properties:
              isAdmin:
                type: boolean
                description: If `true` user has admin access
              isWalletAdmin:
                type: boolean
                description: If `true` user has wallet admin access
    SearchAdminAccess:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - total
              - items
            properties:
              total:
                type: number
              items:
                type: array
                items:
                  $ref: "#/components/schemas/AdminAccess"
    AdminAccessData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AdminAccess"
    AdminAccessExist:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: admin-access:400-exist
            message: User has admin access
    AdminAccessNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: admin-access:404
            message: User has no admin access
    SearchUsers:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - total
              - items
            properties:
              total:
                type: number
              items:
                type: array
                items:
                  $ref: "#/components/schemas/User"
    DeliveryIdtBase:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DeliveryIdtBase"
    DeliveryIdtWithData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DeliveryIdtWithData"
    DeliveryIdtCreated:
      description: Successful operation
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/DeliveryIdtWithData"
    SearchDeliveryIdt:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - total
              - items
            properties:
              total:
                type: number
              items:
                type: array
                items:
                  $ref: "#/components/schemas/DeliveryIdtWithData"
    DeliveryIdpBase:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DeliveryIdpBase"
    DeliveryIdpWithData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DeliveryIdpWithData"
    SearchDeliveryIdp:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - total
              - items
            properties:
              total:
                type: number
              items:
                type: array
                items:
                  $ref: "#/components/schemas/DeliveryIdpWithData"
    DeliveryIdtNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: delivery:idt:404
            message: Delivery idT not found
    DeliveryIdpNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: delivery:idp:404
            message: Delivery idP not found
    DeliveryIdtPrefixes:
      description: Not found
      content:
        application/json:
          schema:
            type: object
    FileBinary:
      description: Successful operation
      content:
        text/plain:
          schema:
            type: string
            format: binary
    FileData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/FileData"
    FileNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: file:404
            message: File not exist
    FolderBaseData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/FolderBase"
    FolderData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Folder"
    FolderFullData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/FolderFullData"
    FolderTreeData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/FolderTreeItem"
    FolderNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: folder:404
            message: Folder not found
    ParentFolderNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: folder:404
            message: Parent folder not found
    FolderIsPublic:
      description: Folder is public
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: folder:400-public
            message: Folder is public
    FolderFilterData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/FolderFilter"
    FolderFilterNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            FolderNotFound:
              value:
                errorCode: folder:404
                message: Folder not found
            FilterNotFound:
              value:
                errorCode: folder:404-filter
                message: Folder filter not found
    SearchFolderFilterData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - total
              - items
            properties:
              total:
                type: number
              items:
                type: string
    CheckFolderReferenceData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - canCreate
              - addData
              - missedData
            properties:
              canCreate:
                type: boolean
              addData:
                type: array
                items:
                  type: object
                  required:
                    - field
                    - value
                  properties:
                    field:
                      type: string
                    fieldData:
                      $ref: "#/components/schemas/DictionaryWord"
                    value:
                      type: string
                    valueData:
                      $ref: "#/components/schemas/DictionaryWord"
              missedData:
                type: array
                items:
                  type: object
                  required:
                    - field
                    - options
                  properties:
                    field:
                      type: string
                    fieldData:
                      $ref: "#/components/schemas/DictionaryWord"
                    options:
                      type: array
                      items:
                        type: object
                        required:
                          - operator
                          - value
                        properties:
                          operator:
                            $ref: "#/components/schemas/FolderFormulaOperator"
                          value:
                            type: string
                          valueData:
                            $ref: "#/components/schemas/DictionaryWord"
    FoldersStatsData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            additionalProperties:
              type: object
              properties:
                productsCount:
                  type: number
    OrderWithData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/OrderWithData"
    OrderWithFullData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/OrderWithFullData"
    OrderPositionData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/OrderPosition"
    SearchOrders:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - total
              - items
            properties:
              total:
                type: number
              items:
                type: array
                items:
                  $ref: "#/components/schemas/OrderWithData"
    SearchOrdersPositions:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - total
              - items
            properties:
              total:
                type: number
              items:
                type: array
                items:
                  $ref: "#/components/schemas/OrderPositionWithData"
    ItemOrdersPositions:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ItemOrdersPositions"
    SearchItemsOrdersPositions:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - total
              - items
            properties:
              total:
                type: number
              items:
                type: array
                items:
                  $ref: "#/components/schemas/ItemOrdersPositions"
    OrderNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: order:404
            message: Order not found
    OrderPositionNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: order:404-position
            message: Order position not found
    OrdersStatsData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - orders
              - positions
            properties:
              orders:
                type: object
                required:
                  - created
                  - paid
                  - failed
                  - cancelled
                  - completed
                properties:
                  created:
                    type: number
                  paid:
                    type: number
                  failed:
                    type: number
                  cancelled:
                    type: number
                  completed:
                    type: number
              positions:
                type: object
                required:
                  - created
                  - confirmed
                  - production
                  - delivery
                  - cancelled
                  - completed
                  - dispute
                  - returned
                properties:
                  created:
                    type: number
                  confirmed:
                    type: number
                  production:
                    type: number
                  delivery:
                    type: number
                  cancelled:
                    type: number
                  completed:
                    type: number
                  dispute:
                    type: number
                  returned:
                    type: number
    PlaceData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Place"
    SearchPlaceData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - total
              - items
            properties:
              total:
                type: number
              items:
                type: array
                items:
                  $ref: "#/components/schemas/Place"
    PlaceNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: place:404
            message: Place not found
    Product:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Product"
    ProductWithData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProductWithData"
    ProductItem:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProductItem"
    ProductItemWithData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProductItemWithData"
    ProductBatch:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProductBatch"
    ProductBatchWithData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProductBatchWithData"
    ProductCardWithData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProductCardWithData"
    ProductBatchPublic:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProductBatchPublic"
    ProductPrice:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProductPrice"
    ProductPriceWithData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProductPriceWithData"
    ProductAmount:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProductAmount"
    ProductAmountWithData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProductAmountWithData"
    ProductIdp:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProductIdp"
    ProductIdpWithData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProductIdpWithData"
    SearchProducts:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - total
              - items
            properties:
              total:
                type: number
              items:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
    SearchProductItems:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - total
              - items
            properties:
              total:
                type: number
              items:
                type: array
                items:
                  $ref: "#/components/schemas/ProductItem"
    SearchProductBatches:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - total
              - items
            properties:
              total:
                type: number
              items:
                type: array
                items:
                  $ref: "#/components/schemas/ProductBatchWithData"
    SearchProductPrices:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - total
              - items
            properties:
              total:
                type: number
              items:
                type: array
                items:
                  $ref: "#/components/schemas/ProductPriceWithData"
    SearchProductAmounts:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - total
              - items
            properties:
              total:
                type: number
              items:
                type: array
                items:
                  $ref: "#/components/schemas/ProductAmountWithData"
    SearchProductIdp:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - total
              - items
            properties:
              total:
                type: number
              items:
                type: array
                items:
                  $ref: "#/components/schemas/ProductIdpWithData"
    SearchProductCards:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - total
              - items
            properties:
              total:
                type: number
              items:
                type: array
                items:
                  $ref: "#/components/schemas/ProductCard"
    SearchProductCardsSuggester:
      description: Successful operation
      content:
        application/json:
          schema:
            type: array
            items:
              type: string
    SearchProductCardsFilters:
      description: Successful operation
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/ProductFilterOption"
    ProductNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: product:404
            message: Product not found
    ProductItemNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: product:404-item
            message: Product item not found
    ProductBatchNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: product:404-batch
            message: Product batch not found
    ProductPriceNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: product:404-price
            message: Product price not found
    ProductAmountNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: product:404-amount
            message: Product amount not found
    ProductIdpNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: product:404-idp
            message: idP not found
    ProductStatsData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - liked
              - bought
            properties:
              liked:
                type: number
              bought:
                type: number
    ProviderProfileResponse:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProviderProfile"
    ProviderProfileWithDataResponse:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProviderProfileWithData"
    SearchProviderProfilesData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - total
              - items
            properties:
              total:
                type: number
              items:
                type: array
                items:
                  $ref: "#/components/schemas/ProviderWithProfile"
    SearchTagsData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - total
              - items
            properties:
              total:
                type: number
              items:
                type: array
                items:
                  $ref: "#/components/schemas/Tag"
    TagData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Tag"
    TagNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: tag:404
            message: Tag not found
    TaskResponse:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Task"
    TaskWithDataResponse:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/TaskWithData"
    SearchTasksData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - total
              - items
            properties:
              total:
                type: number
              items:
                type: array
                items:
                  $ref: "#/components/schemas/Task"
    TasksStatsData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - total
              - byStatus
              - byPriority
              - byType
            properties:
              total:
                type: number
              byStatus:
                type: object
                additionalProperties:
                  type: number
              byPriority:
                type: object
                additionalProperties:
                  type: number
              byType:
                type: object
                additionalProperties:
                  type: number
    TaskNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: task:404
            message: Task not found
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Authorization using Auth routes
    ProviderClientId:
      type: apiKey
      name: client-id
      in: header
      description: Authorization for providers requests
    ProviderClientSecret:
      type: apiKey
      name: client-secret
      in: header
      description: Authorization for providers requests
    ProviderUserId:
      type: apiKey
      name: user-id
      in: header
      description: Authorization for providers requests
