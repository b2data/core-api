openapi: 3.0.0
info:
  title: REST API for B2Data
  version: 1.0.0
servers:
  - url: https://localhost:8080
  - url: https://b2p.space/api
tags:
  - name: Auth
  - name: Activities
  - name: B2Task
  - name: B2Doc
  - name: B2Table
  - name: B2Form
  - name: B2Product
  - name: B2Storage
  - name: Documents
  - name: Files
  - name: Groups
  - name: Notifications
  - name: Permissions
  - name: Resources
  - name: Sales
  - name: Spaces
paths:
  /auth/start:
    post:
      tags:
        - Auth
      summary: Start authentication process
      operationId: startAuth
      requestBody:
        $ref: "#/components/requestBodies/EmptyBody"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - proof
                properties:
                  proof:
                    type: string
  /auth/verify:
    post:
      tags:
        - Auth
      summary: Verify authentication wallet
      operationId: verifyAuth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - proof
                - account
              properties:
                spaceId:
                  type: string
                  description: Selected Space ID
                proof:
                  type: object
                  required:
                    - payload
                    - signature
                    - timestamp
                    - domain
                  properties:
                    payload:
                      type: string
                      description: TON Connect payload
                    signature:
                      type: string
                      description: TON Connect signature
                    timestamp:
                      type: number
                      description: Timestamp of authentication
                    domain:
                      type: object
                      required:
                        - lengthBytes
                        - value
                      properties:
                        lengthBytes:
                          type: number
                        value:
                          type: string
                account:
                  type: object
                  required:
                    - address
                    - network
                    - publicKey
                    - walletStateInit
                  properties:
                    address:
                      type: string
                      description: Wallet Address
                      example: 0:c424531feb64afeb46607e0aff5609628207213308b62c123891d817389fc35b
                    network:
                      type: string
                      description: Blockchain chain
                    publicKey:
                      type: string
                      description: Wallet Public Key
                    walletStateInit:
                      type: string
                      description: Wallet Public Key
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - accessToken
                  - refreshToken
                  - profile
                properties:
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
                  profile:
                    $ref: "#/components/schemas/User"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                errorCode: auth:404
                message: The proof has not found
  /auth/refresh:
    post:
      tags:
        - Auth
      summary: Refresh Access Token by Refresh token
      operationId: refreshToken
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - accessToken
                - refreshToken
              properties:
                spaceId:
                  type: string
                  description: Selected Space ID
                accessToken:
                  type: string
                refreshToken:
                  type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - accessToken
                  - refreshToken
                  - profile
                properties:
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
                  profile:
                    $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/UserNotFound"
  /auth/profile:
    get:
      tags:
        - Auth
      security:
        - BearerAuth: []
      summary: Get Profile
      operationId: getProfile
      responses:
        "200":
          $ref: "#/components/responses/UserData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/UserNotFound"
    patch:
      tags:
        - Auth
      security:
        - BearerAuth: []
      summary: Update Profile
      operationId: updateProfile
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  description: First Name
                lastName:
                  type: string
                  description: Last Name
                middleName:
                  type: string
                  description: Middle Name
                avatar:
                  type: string
                  description: Avatar
      responses:
        "200":
          $ref: "#/components/responses/UserData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/UserNotFound"
  /activities/search:
    post:
      tags:
        - Activities
      security:
        - BearerAuth: []
      summary: Search activities
      operationId: searchActivities
      requestBody:
        $ref: "#/components/requestBodies/SearchActivitiesBody"
      responses:
        "200":
          $ref: "#/components/responses/SearchActivitiesData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
  "/documents/b2doc/{docId}":
    get:
      tags:
        - B2Doc
      security:
        - BearerAuth: []
      summary: Get document binary data
      operationId: getDocBinary
      parameters:
        - $ref: "#/components/parameters/docIdParam"
        - in: query
          name: format
          description: Document format (pdf or md)
          required: false
          schema:
            type: string
            enum:
              - pdf
              - md
      responses:
        "200":
          $ref: "#/components/responses/B2DocBinary"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/DocumentNotFound"
    patch:
      tags:
        - B2Doc
      security:
        - BearerAuth: []
      summary: Update document info
      operationId: updateDocInfo
      parameters:
        - $ref: "#/components/parameters/docIdParam"
      requestBody:
        $ref: "#/components/requestBodies/EditB2DocBody"
      responses:
        "200":
          $ref: "#/components/responses/B2DocData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/DocumentNotFound"
  "/documents/b2doc/{docId}/info":
    get:
      tags:
        - B2Doc
      security:
        - BearerAuth: []
      summary: Get document info
      operationId: getDocInfo
      parameters:
        - $ref: "#/components/parameters/docIdParam"
      responses:
        "200":
          $ref: "#/components/responses/B2DocData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/DocumentNotFound"
  "/documents/b2doc/{docId}/data":
    post:
      tags:
        - B2Doc
      security:
        - BearerAuth: []
      summary: Get document blocks data
      operationId: getDocBlocksData
      parameters:
        - $ref: "#/components/parameters/docIdParam"
      responses:
        "200":
          $ref: "#/components/responses/B2DocBlockData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/DocumentNotFound"
  "/documents/b2doc/{docId}/prefixes":
    get:
      tags:
        - B2Doc
      security:
        - BearerAuth: []
      summary: Get document block prefixes
      operationId: getDocBlockPrefixes
      parameters:
        - $ref: "#/components/parameters/docIdParam"
      responses:
        "200":
          $ref: "#/components/responses/B2DocBlockPrefixes"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/DocumentNotFound"
  "/documents/b2doc/{formId}\"":
    get:
      tags:
        - B2Form
      security:
        - BearerAuth: []
      summary: Export b2form to CSV
      operationId: getFormBinary
      parameters:
        - $ref: "#/components/parameters/formIdParam"
      responses:
        "200":
          $ref: "#/components/responses/B2FormBinary"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/DocumentNotFound"
  "/documents/b2form/{formId}/info":
    get:
      tags:
        - B2Form
      security:
        - BearerAuth: []
      summary: Get form info
      operationId: getFormInfo
      parameters:
        - $ref: "#/components/parameters/formIdParam"
      responses:
        "200":
          $ref: "#/components/responses/B2FormData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/DocumentNotFound"
  "/documents/b2form/{formId}/data":
    get:
      tags:
        - B2Form
      security:
        - BearerAuth: []
      summary: Get form fields data
      operationId: getFormFieldsData
      parameters:
        - $ref: "#/components/parameters/formIdParam"
      responses:
        "200":
          $ref: "#/components/responses/B2FormFieldsData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/DocumentNotFound"
  /documents/b2form/fields/search:
    post:
      tags:
        - B2Form
      security:
        - BearerAuth: []
      summary: Search form fields
      operationId: searchFormFields
      requestBody:
        $ref: "#/components/requestBodies/SearchFormFieldsBody"
      responses:
        "200":
          $ref: "#/components/responses/B2FormFieldsData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  "/documents/b2product/{productId}/info":
    get:
      tags:
        - B2Product
      security:
        - BearerAuth: []
      summary: Get product by ID
      operationId: getProductInfo
      parameters:
        - $ref: "#/components/parameters/productIdParam"
      responses:
        "200":
          $ref: "#/components/responses/B2ProductWithData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/DocumentNotFound"
  "/documents/b2product/{productId}/configuration/{configId}":
    get:
      tags:
        - B2Product
      security:
        - BearerAuth: []
      summary: Get product configuration data
      operationId: getProductConfigurationData
      parameters:
        - $ref: "#/components/parameters/productIdParam"
        - $ref: "#/components/parameters/productConfigIdParam"
      responses:
        "200":
          $ref: "#/components/responses/B2ProductConfigRow"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/DocumentNotFound"
  "/documents/b2product/batches/{batchId}":
    get:
      tags:
        - B2Product
      security:
        - BearerAuth: []
      summary: Get product batch by ID
      operationId: getProductBatch
      parameters:
        - $ref: "#/components/parameters/productBatchIdParam"
      responses:
        "200":
          $ref: "#/components/responses/B2ProductBatchWithData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/ProductBatchNotFound"
  "/documents/b2storage/{storageId}/info":
    get:
      tags:
        - B2Storage
      security:
        - BearerAuth: []
      summary: Get storage by ID
      operationId: getStorageInfo
      parameters:
        - $ref: "#/components/parameters/storageIdParam"
      responses:
        "200":
          $ref: "#/components/responses/B2StorageWithData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/DocumentNotFound"
  /documents/b2storage/balances/search:
    post:
      tags:
        - B2Storage
      security:
        - BearerAuth: []
      summary: Search storage balances
      operationId: searchStorageBalances
      requestBody:
        $ref: "#/components/requestBodies/SearchB2StorageBalances"
      responses:
        "200":
          $ref: "#/components/responses/B2StorageBalancesSearchData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  "/documents/b2storage/balances/{balanceId}":
    get:
      tags:
        - B2Storage
      security:
        - BearerAuth: []
      summary: Get storage balance by ID
      operationId: getStorageBalance
      parameters:
        - $ref: "#/components/parameters/storageBalanceId"
      responses:
        "200":
          $ref: "#/components/responses/B2StorageBalanceWithData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/B2StorageBalanceNotFound"
  /documents/b2storage/operations/search:
    post:
      tags:
        - B2Storage
      security:
        - BearerAuth: []
      summary: Search storage operations
      operationId: searchStorageOperations
      requestBody:
        $ref: "#/components/requestBodies/SearchB2StorageOperations"
      responses:
        "200":
          $ref: "#/components/responses/B2StorageOperationsSearchData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  /documents/b2storage/operations:
    post:
      tags:
        - B2Storage
      security:
        - BearerAuth: []
      summary: Create storage operation
      operationId: createStorageOperation
      requestBody:
        $ref: "#/components/requestBodies/CreateB2StorageOperation"
      responses:
        "200":
          $ref: "#/components/responses/B2StorageOperation"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  "/documents/b2storage/operations/{operationId}":
    get:
      tags:
        - B2Storage
      security:
        - BearerAuth: []
      summary: Get storage operation by ID
      operationId: getStorageOperation
      parameters:
        - $ref: "#/components/parameters/storageOperationId"
      responses:
        "200":
          $ref: "#/components/responses/B2StorageOperationWithData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/B2StorageOperationNotFound"
  "/documents/b2table/{tableId}":
    get:
      tags:
        - B2Table
      security:
        - BearerAuth: []
      summary: Export b2table to CSV
      operationId: getTableBinary
      parameters:
        - $ref: "#/components/parameters/tableIdParam"
      responses:
        "200":
          $ref: "#/components/responses/B2TableBinary"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/DocumentNotFound"
    patch:
      tags:
        - B2Table
      security:
        - BearerAuth: []
      summary: Edit b2table info
      operationId: editTableInfo
      parameters:
        - $ref: "#/components/parameters/tableIdParam"
      requestBody:
        $ref: "#/components/requestBodies/EditB2TableBody"
      responses:
        "200":
          $ref: "#/components/responses/B2Table"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/DocumentNotFound"
  "/documents/b2table/{tableId}/info":
    get:
      tags:
        - B2Table
      security:
        - BearerAuth: []
      summary: Get table info
      operationId: getTableInfo
      parameters:
        - $ref: "#/components/parameters/tableIdParam"
      responses:
        "200":
          $ref: "#/components/responses/B2Table"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/DocumentNotFound"
  "/documents/b2table/{tableId}/rows":
    post:
      tags:
        - B2Table
      security:
        - BearerAuth: []
      summary: Search b2table rows
      operationId: searchTableRows
      parameters:
        - $ref: "#/components/parameters/tableIdParam"
      requestBody:
        $ref: "#/components/requestBodies/SearchB2TableRowsBody"
      responses:
        "200":
          $ref: "#/components/responses/SearchB2TableRowWithData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/DocumentNotFound"
  /documents/b2table/search-references:
    post:
      tags:
        - B2Table
      security:
        - BearerAuth: []
      summary: Search b2table references
      operationId: searchTableReferences
      requestBody:
        $ref: "#/components/requestBodies/SearchB2TableReferencesBody"
      responses:
        "200":
          $ref: "#/components/responses/SearchB2TableReference"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/DocumentNotFound"
  /documents/b2table/search-references-options:
    post:
      tags:
        - B2Table
      security:
        - BearerAuth: []
      summary: Search b2table references options
      operationId: searchTableReferencesOptions
      requestBody:
        $ref: "#/components/requestBodies/SearchB2TableReferencesOptionsBody"
      responses:
        "200":
          $ref: "#/components/responses/SearchB2TableReferencesOptions"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/DocumentNotFound"
  /documents/b2task/search:
    post:
      tags:
        - B2Task
      security:
        - BearerAuth: []
      summary: Search tasks
      operationId: searchTasks
      requestBody:
        $ref: "#/components/requestBodies/SearchB2TaskBody"
      responses:
        "200":
          $ref: "#/components/responses/SearchB2TaskData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  "/documents/b2task/{taskId}/info":
    get:
      tags:
        - B2Task
      security:
        - BearerAuth: []
      summary: Get task by ID
      operationId: getTaskInfo
      parameters:
        - $ref: "#/components/parameters/taskIdParam"
      responses:
        "200":
          $ref: "#/components/responses/B2TaskWithData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/DocumentNotFound"
  "/documents/b2task/{taskId}":
    patch:
      tags:
        - B2Task
      security:
        - BearerAuth: []
      summary: Edit task by ID
      operationId: editTask
      parameters:
        - $ref: "#/components/parameters/taskIdParam"
      requestBody:
        $ref: "#/components/requestBodies/EditB2TaskBody"
      responses:
        "200":
          $ref: "#/components/responses/B2TaskWithData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/DocumentNotFound"
  "/documents/b2task/{taskId}/work-logs/search":
    post:
      tags:
        - B2Task
      security:
        - BearerAuth: []
      summary: Search work logs for a task
      operationId: searchTaskWorkLogs
      parameters:
        - $ref: "#/components/parameters/taskIdParam"
      requestBody:
        $ref: "#/components/requestBodies/SearchB2TaskWorkLogsBody"
      responses:
        "200":
          $ref: "#/components/responses/SearchB2TaskWorkLogsData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/DocumentNotFound"
  "/documents/b2task/{taskId}/work-log":
    post:
      tags:
        - B2Task
      security:
        - BearerAuth: []
      summary: Create a work log for a task
      operationId: createTaskWorkLog
      parameters:
        - $ref: "#/components/parameters/taskIdParam"
      requestBody:
        $ref: "#/components/requestBodies/ManageB2TaskWorkLogBody"
      responses:
        "200":
          $ref: "#/components/responses/B2TaskWorkLog"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/DocumentNotFound"
  "/documents/b2task/{taskId}/work-logs/{logId}":
    patch:
      tags:
        - B2Task
      security:
        - BearerAuth: []
      summary: Edit task work log by ID
      operationId: editTaskWorkLog
      parameters:
        - $ref: "#/components/parameters/taskIdParam"
        - $ref: "#/components/parameters/taskLogIdParam"
      requestBody:
        $ref: "#/components/requestBodies/ManageB2TaskWorkLogBody"
      responses:
        "200":
          $ref: "#/components/responses/B2TaskWorkLog"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/DocumentNotFound"
    delete:
      tags:
        - B2Task
      security:
        - BearerAuth: []
      summary: Delete task work log by ID
      operationId: deleteTaskWorkLog
      parameters:
        - $ref: "#/components/parameters/taskIdParam"
        - $ref: "#/components/parameters/taskLogIdParam"
      responses:
        "200":
          $ref: "#/components/responses/B2TaskWorkLog"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/DocumentNotFound"
  "/documents/b2task/{taskId}/comment/search":
    post:
      tags:
        - B2Task
      security:
        - BearerAuth: []
      summary: Search comments for a task
      operationId: searchTaskComments
      parameters:
        - $ref: "#/components/parameters/taskIdParam"
      requestBody:
        $ref: "#/components/requestBodies/SearchB2TaskCommentsBody"
      responses:
        "200":
          $ref: "#/components/responses/SearchB2TaskCommentsData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/DocumentNotFound"
  "/documents/b2task/{taskId}/comment":
    post:
      tags:
        - B2Task
      security:
        - BearerAuth: []
      summary: Create a comment for a task
      operationId: createTaskComment
      parameters:
        - $ref: "#/components/parameters/taskIdParam"
      requestBody:
        $ref: "#/components/requestBodies/ManageB2TaskCommentBody"
      responses:
        "200":
          $ref: "#/components/responses/B2TaskComment"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/DocumentNotFound"
  "/documents/b2task/{taskId}/comment/{commentId}":
    patch:
      tags:
        - B2Task
      security:
        - BearerAuth: []
      summary: Edit task comment by ID
      operationId: editTaskComment
      parameters:
        - $ref: "#/components/parameters/taskIdParam"
        - $ref: "#/components/parameters/taskCommentIdParam"
      requestBody:
        $ref: "#/components/requestBodies/ManageB2TaskCommentBody"
      responses:
        "200":
          $ref: "#/components/responses/B2TaskComment"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/DocumentNotFound"
    delete:
      tags:
        - B2Task
      security:
        - BearerAuth: []
      summary: Delete task comment by ID
      operationId: deleteTaskComment
      parameters:
        - $ref: "#/components/parameters/taskIdParam"
        - $ref: "#/components/parameters/taskCommentIdParam"
      responses:
        "200":
          $ref: "#/components/responses/B2TaskComment"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/DocumentNotFound"
  "/documents/{docId}/info":
    get:
      tags:
        - Documents
      security:
        - BearerAuth: []
      summary: Get document info
      parameters:
        - $ref: "#/components/parameters/documentId"
      operationId: getDocumentInfo
      responses:
        "200":
          $ref: "#/components/responses/DocumentWithData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/DocumentNotFound"
  "/documents/{docId}":
    patch:
      tags:
        - Documents
      security:
        - BearerAuth: []
      summary: Edit document
      parameters:
        - $ref: "#/components/parameters/documentId"
      operationId: editDocument
      requestBody:
        $ref: "#/components/requestBodies/EditDocumentBody"
      responses:
        "200":
          $ref: "#/components/responses/DocumentWithData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/DocumentNotFound"
    delete:
      tags:
        - Documents
      security:
        - BearerAuth: []
      summary: Delete document
      parameters:
        - $ref: "#/components/parameters/documentId"
        - in: query
          name: version
          schema:
            type: number
          description: Version to delete
      operationId: deleteDocument
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                description: List of deleted document versions and documentId
                items:
                  type: string
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/DocumentNotFound"
  /documents:
    post:
      tags:
        - Documents
      security:
        - BearerAuth: []
      summary: Create document
      operationId: createDocument
      requestBody:
        $ref: "#/components/requestBodies/CreateDocumentBody"
      responses:
        "200":
          $ref: "#/components/responses/DocumentWithFolders"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  /documents/search:
    post:
      tags:
        - Documents
      security:
        - BearerAuth: []
      summary: Search documents
      operationId: searchDocuments
      requestBody:
        $ref: "#/components/requestBodies/SearchDocumentsBody"
      responses:
        "200":
          $ref: "#/components/responses/SearchDocumentsData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  "/documents/{docId}/restore":
    post:
      tags:
        - Documents
      security:
        - BearerAuth: []
      summary: Restore document
      parameters:
        - $ref: "#/components/parameters/documentId"
      operationId: restoreDocument
      responses:
        "200":
          $ref: "#/components/responses/DocumentWithFolders"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/DocumentNotFound"
  "/documents/{docId}/tags":
    put:
      tags:
        - Documents
      security:
        - BearerAuth: []
      summary: Edit document tags
      parameters:
        - $ref: "#/components/parameters/documentId"
      operationId: editDocumentTags
      requestBody:
        $ref: "#/components/requestBodies/EditDocumentTagsBody"
      responses:
        "200":
          $ref: "#/components/responses/TagWithData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/DocumentNotFound"
  "/documents/{docId}/signatures/{versionId}":
    get:
      tags:
        - Documents
      security:
        - BearerAuth: []
      summary: Get document signatures
      parameters:
        - $ref: "#/components/parameters/documentId"
        - $ref: "#/components/parameters/versionId"
      operationId: getDocumentSignatures
      responses:
        "200":
          $ref: "#/components/responses/DocumentSignatureData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/DocumentNotFound"
  "/documents/{docId}/signatures/{versionId}/request":
    post:
      tags:
        - Documents
      security:
        - BearerAuth: []
      summary: Request document signature
      parameters:
        - $ref: "#/components/parameters/documentId"
        - $ref: "#/components/parameters/versionId"
      operationId: requestDocumentSignatures
      responses:
        "200":
          $ref: "#/components/responses/DocumentSignatureData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/DocumentNotFound"
  "/documents/{docId}/references":
    post:
      tags:
        - Documents
      security:
        - BearerAuth: []
      summary: Create document reference
      parameters:
        - $ref: "#/components/parameters/documentId"
      operationId: createDocumentReference
      requestBody:
        $ref: "#/components/requestBodies/ModifyDocumentReferenceBody"
      responses:
        "200":
          $ref: "#/components/responses/DocumentReferenceData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/DocumentNotFound"
    put:
      tags:
        - Documents
      security:
        - BearerAuth: []
      summary: Edit document references
      parameters:
        - $ref: "#/components/parameters/documentId"
      operationId: editDocumentReferences
      requestBody:
        $ref: "#/components/requestBodies/EditDocumentReferencesBody"
      responses:
        "200":
          $ref: "#/components/responses/DocumentReferencesData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/DocumentNotFound"
  "/documents/{docId}/references/search":
    post:
      tags:
        - Documents
      security:
        - BearerAuth: []
      summary: Search document references
      parameters:
        - $ref: "#/components/parameters/documentId"
      operationId: searchDocumentReferences
      requestBody:
        $ref: "#/components/requestBodies/SearchDocumentReferencesBody"
      responses:
        "200":
          $ref: "#/components/responses/DocumentReferencesData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
  "/documents/{docId}/references/{refId}":
    patch:
      tags:
        - Documents
      security:
        - BearerAuth: []
      summary: Edit document reference
      parameters:
        - $ref: "#/components/parameters/documentId"
        - name: refId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Reference Document ID
      operationId: editDocumentReference
      requestBody:
        $ref: "#/components/requestBodies/ModifyDocumentReferenceBody"
      responses:
        "200":
          $ref: "#/components/responses/DocumentReferenceData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/DocumentNotFound"
    delete:
      tags:
        - Documents
      security:
        - BearerAuth: []
      summary: Delete document reference
      parameters:
        - $ref: "#/components/parameters/documentId"
        - name: refId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Reference Document ID
      operationId: deleteDocumentReference
      responses:
        "200":
          $ref: "#/components/responses/DocumentReferenceData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/DocumentNotFound"
  "/documents/files/{fileId}":
    get:
      tags:
        - Files
      security:
        - BearerAuth: []
      summary: Get file binary
      operationId: getFileBinary
      parameters:
        - $ref: "#/components/parameters/fileId"
      responses:
        "200":
          $ref: "#/components/responses/FileBinary"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/DocumentVersionNotFound"
  "/documents/files/{fileId}/info":
    get:
      tags:
        - Files
      security:
        - BearerAuth: []
      summary: Get file information
      operationId: getFileInfo
      parameters:
        - $ref: "#/components/parameters/fileId"
      responses:
        "200":
          $ref: "#/components/responses/FileData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/DocumentVersionNotFound"
  /groups/my:
    get:
      summary: Get my groups
      tags:
        - Groups
      security:
        - BearerAuth: []
      operationId: getMyGroups
      responses:
        "200":
          $ref: "#/components/responses/GroupTreeItemData"
        "401":
          $ref: "#/components/responses/Unauthorized"
  /groups/my/admin:
    get:
      summary: Get my admin groups
      tags:
        - Groups
      security:
        - BearerAuth: []
      operationId: getMyAdminGroups
      responses:
        "200":
          $ref: "#/components/responses/GroupsIdsData"
        "401":
          $ref: "#/components/responses/Unauthorized"
  /groups/my/supervisor:
    get:
      summary: Get my supervisor groups
      tags:
        - Groups
      security:
        - BearerAuth: []
      operationId: getMySupervisorGroups
      responses:
        "200":
          $ref: "#/components/responses/GroupsIdsData"
        "401":
          $ref: "#/components/responses/Unauthorized"
  /groups:
    post:
      summary: Create a new group
      tags:
        - Groups
      security:
        - BearerAuth: []
      operationId: createGroup
      requestBody:
        $ref: "#/components/requestBodies/CreateGroupBody"
      responses:
        "200":
          $ref: "#/components/responses/GroupData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
  "/groups/{groupId}":
    get:
      summary: Get a group by ID
      tags:
        - Groups
      security:
        - BearerAuth: []
      operationId: getGroup
      parameters:
        - $ref: "#/components/parameters/groupId"
      responses:
        "200":
          $ref: "#/components/responses/GroupData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/GroupNotFound"
    patch:
      summary: Edit a group
      tags:
        - Groups
      security:
        - BearerAuth: []
      operationId: editGroup
      parameters:
        - $ref: "#/components/parameters/groupId"
      requestBody:
        $ref: "#/components/requestBodies/EditGroupBody"
      responses:
        "200":
          $ref: "#/components/responses/GroupData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/GroupNotFound"
    delete:
      summary: Delete a group
      tags:
        - Groups
      security:
        - BearerAuth: []
      operationId: deleteGroup
      parameters:
        - $ref: "#/components/parameters/groupId"
      responses:
        "200":
          $ref: "#/components/responses/GroupData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/GroupNotFound"
  /groups/move:
    put:
      summary: Move a group
      tags:
        - Groups
      security:
        - BearerAuth: []
      operationId: moveGroup
      requestBody:
        $ref: "#/components/requestBodies/MoveGroupBody"
      responses:
        "200":
          $ref: "#/components/responses/GroupData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/GroupNotFound"
  /notifications/unread:
    get:
      summary: Get unread notifications
      tags:
        - Notifications
      security:
        - BearerAuth: []
      operationId: getUnreadNotifications
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: integer
        "401":
          $ref: "#/components/responses/Unauthorized"
  /notifications/search:
    post:
      summary: Search notifications
      tags:
        - Notifications
      security:
        - BearerAuth: []
      operationId: searchNotifications
      requestBody:
        $ref: "#/components/requestBodies/SearchNotificationsBody"
      responses:
        "200":
          $ref: "#/components/responses/SearchNotificationsData"
        "401":
          $ref: "#/components/responses/Unauthorized"
  "/notifications/read/{id}":
    post:
      summary: Set notification as read by ID
      tags:
        - Notifications
      security:
        - BearerAuth: []
      operationId: readNotification
      parameters:
        - $ref: "#/components/parameters/notificationId"
      responses:
        "200":
          description: Notification read response
          content:
            application/json:
              schema:
                type: string
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotificationNotFound"
  /notifications/read/all:
    post:
      summary: Set all notifications as read
      tags:
        - Notifications
      security:
        - BearerAuth: []
      operationId: readAllNotifications
      responses:
        "200":
          description: All notifications read response
          content:
            application/json:
              schema:
                type: string
        "401":
          $ref: "#/components/responses/Unauthorized"
  /notifications/callback:
    post:
      summary: Send callback notification
      tags:
        - Notifications
      security:
        - BearerAuth: []
      operationId: sendCallbackNotification
      requestBody:
        $ref: "#/components/requestBodies/SendCallbackNotificationBody"
      responses:
        "200":
          description: Callback notification response
          content:
            application/json:
              schema:
                type: string
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotificationNotFound"
  /permissions/search:
    post:
      tags:
        - Permissions
      summary: Search permissions
      operationId: searchPermissions
      security:
        - BearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/SearchPermissionsBody"
      responses:
        "200":
          $ref: "#/components/responses/SearchPermissionsResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  /permissions/search-options:
    post:
      tags:
        - Permissions
      summary: Search permissions options
      operationId: searchPermissionsOptions
      security:
        - BearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/SearchPermissionsOptionsBody"
      responses:
        "200":
          $ref: "#/components/responses/SearchPermissionsOptionsResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  /permissions/search-unique:
    post:
      tags:
        - Permissions
      summary: Search unique permissions
      operationId: searchPermissionsUnique
      security:
        - BearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/SearchPermissionsUniqueBody"
      responses:
        "200":
          $ref: "#/components/responses/SearchPermissionsUniqueResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  /permissions/search-by-system:
    post:
      tags:
        - Permissions
      summary: Search permissions by system
      operationId: searchPermissionsBySystem
      security:
        - BearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/SearchPermissionsBySystemBody"
      responses:
        "200":
          $ref: "#/components/responses/SearchPermissionsBySystemResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  /permissions/search-by-assignee:
    post:
      tags:
        - Permissions
      summary: Search permissions by assignee
      operationId: searchPermissionsByAssignee
      security:
        - BearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/SearchPermissionsByAssigneeBody"
      responses:
        "200":
          $ref: "#/components/responses/SearchPermissionsByAssigneeResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  /permissions:
    post:
      tags:
        - Permissions
      summary: Create permission
      operationId: createPermission
      security:
        - BearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/CreatePermissionBody"
      responses:
        "200":
          $ref: "#/components/responses/PermissionResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  "/permissions/{permissionId}":
    patch:
      tags:
        - Permissions
      summary: Edit permission
      operationId: editPermission
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/permissionId"
      requestBody:
        $ref: "#/components/requestBodies/EditPermissionBody"
      responses:
        "200":
          $ref: "#/components/responses/PermissionResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/PermissionNotFound"
    delete:
      tags:
        - Permissions
      summary: Delete permission
      operationId: deletePermission
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/permissionId"
      responses:
        "204":
          description: Successful operation
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/PermissionNotFound"
  /permissions/statistics:
    get:
      tags:
        - Permissions
      summary: Get permissions statistics
      operationId: getPermissionsStatistics
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/permissionArtefactId"
        - $ref: "#/components/parameters/permissionType"
      responses:
        "200":
          $ref: "#/components/responses/GetPermissionsStatisticsResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  /permissions/check-access:
    get:
      tags:
        - Permissions
      summary: Check permissions access
      operationId: checkPermissionsAccess
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/permissionArtefactId"
        - $ref: "#/components/parameters/permissionType"
        - $ref: "#/components/parameters/permissionSystemId"
      responses:
        "200":
          $ref: "#/components/responses/CheckPermissionsAccessResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  /sales/orders/search:
    post:
      tags:
        - Sales
      security:
        - BearerAuth: []
      summary: Search Sale Orders
      operationId: searchSaleOrders
      requestBody:
        $ref: "#/components/requestBodies/SearchSaleOrdersBody"
      responses:
        "200":
          $ref: "#/components/responses/SearchSaleOrdersData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  "/sales/orders/{orderId}":
    get:
      tags:
        - Sales
      security:
        - BearerAuth: []
      summary: Get Sale Order
      operationId: getSaleOrder
      parameters:
        - $ref: "#/components/parameters/saleOrderIdParam"
      responses:
        "200":
          $ref: "#/components/responses/SaleOrderWithData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/SaleOrderNotFound"
  "/sales/orders/{orderId}/positions/{posId}":
    get:
      tags:
        - Sales
      security:
        - BearerAuth: []
      summary: Get Sale Order Position (filter order positions)
      operationId: getSaleOrderPosition
      parameters:
        - $ref: "#/components/parameters/saleOrderIdParam"
        - $ref: "#/components/parameters/saleOrderPositionIdParam"
      responses:
        "200":
          $ref: "#/components/schemas/SaleOrderWithData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/SaleOrderPositionNotFound"
  /spaces/my:
    get:
      summary: Get my spaces
      tags:
        - Spaces
      security:
        - BearerAuth: []
      operationId: getMySpaces
      responses:
        "200":
          $ref: "#/components/responses/SpaceArrayData"
        "401":
          $ref: "#/components/responses/Unauthorized"
  /spaces:
    post:
      summary: Create a new space
      tags:
        - Spaces
      security:
        - BearerAuth: []
      operationId: createSpace
      requestBody:
        $ref: "#/components/requestBodies/CreateSpaceBody"
      responses:
        "200":
          $ref: "#/components/responses/SpaceData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
  "/spaces/{id}":
    patch:
      summary: Edit a space
      tags:
        - Spaces
      security:
        - BearerAuth: []
      operationId: editSpace
      parameters:
        - $ref: "#/components/parameters/spaceIdParam"
      requestBody:
        $ref: "#/components/requestBodies/EditSpaceBody"
      responses:
        "200":
          $ref: "#/components/responses/SpaceData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/SpaceNotFound"
    delete:
      summary: Delete a space
      tags:
        - Spaces
      security:
        - BearerAuth: []
      operationId: deleteSpace
      parameters:
        - $ref: "#/components/parameters/spaceIdParam"
      responses:
        "200":
          $ref: "#/components/responses/SpaceData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/SpaceNotFound"
  /spaces/users/search:
    post:
      summary: Search space users
      tags:
        - Spaces
      security:
        - BearerAuth: []
      operationId: searchSpaceUsers
      requestBody:
        $ref: "#/components/requestBodies/SearchSpaceUsersBody"
      responses:
        "200":
          $ref: "#/components/responses/SearchSpaceUsersData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
  /spaces/users/search-options:
    post:
      summary: Search space users or groups
      tags:
        - Spaces
      security:
        - BearerAuth: []
      operationId: searchSpaceUsersGroups
      requestBody:
        $ref: "#/components/requestBodies/SearchSpaceUsersGroupsBody"
      responses:
        "200":
          $ref: "#/components/responses/SearchSpaceUsersGroupsData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
  "/spaces/users/{id}":
    get:
      summary: Get space user details
      tags:
        - Spaces
      security:
        - BearerAuth: []
      operationId: getSpaceUser
      parameters:
        - $ref: "#/components/parameters/userIdParam"
      responses:
        "200":
          $ref: "#/components/responses/SpaceUserSearchData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
  /spaces/users:
    post:
      summary: Create a new space user
      tags:
        - Spaces
      security:
        - BearerAuth: []
      operationId: createSpaceUser
      requestBody:
        $ref: "#/components/requestBodies/ModifySpaceUserBody"
      responses:
        "200":
          $ref: "#/components/responses/SpaceUserWithData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
    patch:
      summary: Edit a space user
      tags:
        - Spaces
      security:
        - BearerAuth: []
      operationId: editSpaceUser
      requestBody:
        $ref: "#/components/requestBodies/EditSpaceUserBody"
      responses:
        "200":
          $ref: "#/components/responses/SpaceUserWithData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/SpaceUserNotFound"
    delete:
      summary: Delete a space user
      tags:
        - Spaces
      security:
        - BearerAuth: []
      operationId: deleteSpaceUser
      parameters:
        - name: userId
          in: query
          description: User ID
          required: true
          schema:
            type: string
        - name: groupId
          in: query
          description: Group ID
          required: false
          schema:
            type: string
            format: uuid
      responses:
        "200":
          $ref: "#/components/responses/SpaceUserWithData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/SpaceUserNotFound"
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Authorization using Auth routes
    ProviderClientId:
      type: apiKey
      name: client-id
      in: header
      description: Authorization for providers requests
    ProviderClientSecret:
      type: apiKey
      name: client-secret
      in: header
      description: Authorization for providers requests
    ProviderUserId:
      type: apiKey
      name: user-id
      in: header
      description: Authorization for providers requests
  schemas:
    ErrorResponse:
      type: object
      required:
        - errorCode
        - message
      properties:
        errorCode:
          type: string
        message:
          type: string
    SortModel:
      type: object
      required:
        - field
      properties:
        field:
          type: string
          description: The field for sorting
        sort:
          type: string
          nullable: true
          enum:
            - asc
            - desc
          description: The sorting order
    SearchModel:
      type: object
      properties:
        limit:
          type: number
          description: Number of return items
        offset:
          type: number
          description: Number of skip items
        sort:
          type: array
          items:
            $ref: "#/components/schemas/SortModel"
    User:
      type: object
      required:
        - id
        - firstName
      properties:
        id:
          type: string
          description: Wallet Address
          example: 0:c424531feb64afeb46607e0aff5609628207213308b62c123891d817389fc35b
        firstName:
          type: string
          description: First Name
        lastName:
          type: string
          description: Last Name
        middleName:
          type: string
          description: Middle Name
        avatar:
          type: string
          description: Avatar
    AuthErrorCodes:
      type: string
      enum:
        - api:403
        - auth:401
        - auth:403
        - auth:404
        - user:404
    ActivityType:
      type: string
      description: Activity Type
    ActivityLog:
      type: object
      required:
        - id
        - type
        - userId
        - spaceId
        - artefactId
        - data
        - createdAt
      properties:
        id:
          type: string
          format: uuid
        type:
          $ref: "#/components/schemas/ActivityType"
        userId:
          type: string
          description: Wallet Address
          example: 0:c424531feb64afeb46607e0aff5609628207213308b62c123891d817389fc35b
        spaceId:
          type: string
          format: uuid
        artefactId:
          type: string
          format: uuid
        data:
          type: object
          description: Activity Data depends on type
        createdAt:
          type: string
          format: date-time
        userData:
          $ref: "#/components/schemas/User"
    B2CounterpartyType:
      type: string
      enum:
        - personality
        - organization
    B2CounterpartyWorkPlace:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        position:
          type: string
        scopes:
          type: array
          items:
            type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        current:
          type: boolean
    B2CounterpartyData:
      type: object
      properties:
        type:
          $ref: "#/components/schemas/B2CounterpartyType"
        birthday:
          type: string
          format: date-time
        phone:
          type: string
        email:
          type: string
          format: email
        ogrn:
          type: string
        site:
          type: string
        wallet:
          type: string
        photos:
          type: array
          items:
            type: string
        workPlaces:
          type: array
          items:
            $ref: "#/components/schemas/B2CounterpartyWorkPlace"
    B2CounterpartySearchQuery:
      type: object
      properties:
        types:
          type: array
          items:
            $ref: "#/components/schemas/B2CounterpartyType"
        ids:
          type: array
          items:
            type: string
    B2DocConfig:
      type: object
      properties:
        showPrefix:
          type: boolean
        showIndentOffset:
          type: boolean
        showNavigation:
          type: boolean
        excludeDocumentName:
          type: boolean
    B2DocData:
      allOf:
        - $ref: "#/components/schemas/DocumentDataCommon"
        - type: object
          properties:
            config:
              $ref: "#/components/schemas/B2DocConfig"
            signData:
              type: array
              items:
                $ref: "#/components/schemas/DocumentSignData"
            variables:
              type: array
              items:
                type: string
    B2DocBlockType:
      type: string
      enum:
        - text
        - heading
        - task
        - actors
        - sign
    B2DocBlockBase:
      type: object
      required:
        - id
        - type
        - prefix
        - offset
      properties:
        id:
          type: string
        type:
          $ref: "#/components/schemas/B2DocBlockType"
        prefix:
          type: string
        offset:
          type: number
        hidePrefix:
          type: boolean
    B2DocBlock:
      allOf:
        - $ref: "#/components/schemas/B2DocBlockBase"
        - type: object
          required:
            - spaceId
            - createdAt
            - updatedAt
          properties:
            spaceId:
              type: string
            isTemplate:
              type: boolean
            createdBy:
              type: string
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time
    B2DocBlockVariantVote:
      type: object
      required:
        - variantId
        - createdAt
      properties:
        variantId:
          type: string
        createdBy:
          type: string
        createdAt:
          type: string
          format: date-time
    B2DocBlockVariantVoteWithData:
      allOf:
        - $ref: "#/components/schemas/B2DocBlockVariantVote"
        - type: object
          properties:
            createdByData:
              type: object
              description: User data
    B2DocBlockMention:
      type: object
      required:
        - from
        - to
        - id
        - name
      properties:
        from:
          type: number
        to:
          type: number
        id:
          type: string
        name:
          type: string
        detailId:
          type: string
        detailLabel:
          type: string
    B2DocBlockReference:
      type: object
      required:
        - from
        - to
        - docId
        - docName
      properties:
        from:
          type: number
        to:
          type: number
        docId:
          type: string
        docName:
          type: string
        versionId:
          type: string
        versionName:
          type: string
        blockId:
          type: string
        blockName:
          type: string
    B2DocBlockVariantBase:
      type: object
      required:
        - id
        - blockId
        - isCurrent
        - data
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
        blockId:
          type: string
        isCurrent:
          type: boolean
        data:
          type: object
        createdBy:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    B2DocBlockVariantText:
      allOf:
        - $ref: "#/components/schemas/B2DocBlockVariantBase"
        - type: object
          properties:
            data:
              type: object
              required:
                - text
              properties:
                text:
                  type: string
                variables:
                  type: array
                  items:
                    type: string
                align:
                  type: string
                  enum:
                    - center
                    - left
                    - right
                    - justify
                width:
                  type: string
                  enum:
                    - r/4
                    - r/3
                    - r/2
                    - l/4
                    - l/3
                    - l/2
                    - c/4
                    - c/3
                    - c/2
                    - full
                mentions:
                  type: array
                  items:
                    $ref: "#/components/schemas/B2DocBlockMention"
                references:
                  type: array
                  items:
                    $ref: "#/components/schemas/B2DocBlockReference"
    B2DocBlockVariantHeading:
      allOf:
        - $ref: "#/components/schemas/B2DocBlockVariantBase"
        - type: object
          properties:
            data:
              type: object
              required:
                - text
                - level
              properties:
                text:
                  type: string
                level:
                  type: number
                  minimum: 1
                  maximum: 6
    B2DocBlockVariantTask:
      allOf:
        - $ref: "#/components/schemas/B2DocBlockVariantBase"
        - type: object
          properties:
            data:
              type: object
              required:
                - text
              properties:
                text:
                  type: string
                taskId:
                  type: string
                taskData:
                  type: object
                  properties:
                    name:
                      type: string
                    assigneeId:
                      type: string
                    dueDate:
                      type: string
                      format: date-time
                    controlId:
                      type: string
    B2DocBlockVariantActors:
      allOf:
        - $ref: "#/components/schemas/B2DocBlockVariantBase"
        - type: object
          properties:
            data:
              type: object
              required:
                - text
              properties:
                text:
                  type: string
                actors:
                  type: array
                  items:
                    allOf:
                      - $ref: "#/components/schemas/B2DocBlockMention"
                      - type: object
                        required:
                          - isUser
                        properties:
                          isUser:
                            type: boolean
    B2DocBlockVariantSign:
      allOf:
        - $ref: "#/components/schemas/B2DocBlockVariantBase"
        - type: object
          properties:
            data:
              type: object
              required:
                - text
                - users
              properties:
                text:
                  type: string
                users:
                  type: array
                  items:
                    allOf:
                      - $ref: "#/components/schemas/B2DocBlockMention"
                      - type: object
                        properties:
                          order:
                            type: number
    B2DocBlockVariant:
      oneOf:
        - $ref: "#/components/schemas/B2DocBlockVariantText"
        - $ref: "#/components/schemas/B2DocBlockVariantHeading"
        - $ref: "#/components/schemas/B2DocBlockVariantTask"
        - $ref: "#/components/schemas/B2DocBlockVariantActors"
        - $ref: "#/components/schemas/B2DocBlockVariantSign"
    B2DocBlockVariantWithData:
      allOf:
        - $ref: "#/components/schemas/B2DocBlockVariant"
        - type: object
          properties:
            createdByData:
              type: object
              description: User data
            votes:
              type: array
              items:
                $ref: "#/components/schemas/B2DocBlockVariantVoteWithData"
    B2DocStructure:
      type: object
      required:
        - documentId
        - versionId
        - blockId
        - order
      properties:
        documentId:
          type: string
        versionId:
          type: string
        blockId:
          type: string
        order:
          type: integer
    B2DocStructureWithData:
      allOf:
        - $ref: "#/components/schemas/B2DocStructure"
        - type: object
          required:
            - type
            - prefix
            - offset
            - variants
          properties:
            type:
              type: string
              enum:
                - text
                - heading
                - task
                - actors
                - sign
            prefix:
              type: string
            offset:
              type: number
            isTemplate:
              type: boolean
            variants:
              type: array
              items:
                $ref: "#/components/schemas/B2DocBlockVariantWithData"
    B2DocSearchQuery:
      type: object
      properties:
        ids:
          type: array
          items:
            type: string
            format: uuid
        docs:
          type: array
          items:
            type: string
            format: uuid
        versions:
          type: array
          items:
            type: number
        withVariables:
          type: boolean
        specific:
          $ref: "#/components/schemas/DocumentVersionSpecific"
    B2FormFieldType:
      type: string
      enum:
        - info
        - text
        - number
        - date
        - select
        - dictionary
        - checkbox
        - attachments
    B2FormFieldLayout:
      type: object
      required:
        - x
        - y
        - h
        - w
      properties:
        x:
          type: number
        y:
          type: number
        h:
          type: number
        w:
          type: number
        maxH:
          type: number
        minH:
          type: number
        maxW:
          type: number
        minW:
          type: number
    B2FormFieldConfig:
      type: object
      properties:
        placeholder:
          type: string
        helperText:
          type: string
        dateOnly:
          type: boolean
        multiple:
          type: boolean
        refDocId:
          type: string
          nullable: true
          description: Reference to external 'b2table' document
        refColumn:
          type: string
          nullable: true
        refDictContext:
          type: string
          nullable: true
          description: Context key from 'dictionary'
        tags:
          type: array
          items:
            type: string
            description: Tags that add to uploaded files
    B2FormFieldValidation:
      type: object
      properties:
        required:
          type: boolean
        regExp:
          type: string
        minLength:
          type: number
        maxLength:
          type: number
        min:
          type: number
        max:
          type: number
        minDate:
          type: string
        maxDate:
          type: string
        accept:
          type: string
    B2FormField:
      type: object
      required:
        - id
        - spaceId
        - key
        - label
        - type
        - config
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
        spaceId:
          type: string
        key:
          type: string
        label:
          type: string
        type:
          $ref: "#/components/schemas/B2FormFieldType"
        config:
          $ref: "#/components/schemas/B2FormFieldConfig"
        validation:
          $ref: "#/components/schemas/B2FormFieldValidation"
        createdBy:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    B2FormStructure:
      type: object
      required:
        - documentId
        - versionId
        - fieldId
      properties:
        documentId:
          type: string
        versionId:
          type: string
        fieldId:
          type: string
        layoutMobile:
          $ref: "#/components/schemas/B2FormFieldLayout"
          nullable: true
        layoutTablet:
          $ref: "#/components/schemas/B2FormFieldLayout"
          nullable: true
        layoutDesktop:
          $ref: "#/components/schemas/B2FormFieldLayout"
          nullable: true
    B2FormStructureWithData:
      allOf:
        - $ref: "#/components/schemas/B2FormStructure"
        - type: object
          required:
            - key
            - label
            - type
            - config
          properties:
            key:
              type: string
            label:
              type: string
            type:
              $ref: "#/components/schemas/B2FormFieldType"
            config:
              $ref: "#/components/schemas/B2FormFieldConfig"
            validation:
              $ref: "#/components/schemas/B2FormFieldValidation"
    PlaceBase:
      type: object
      required:
        - id
        - name
        - lat
        - long
      properties:
        id:
          type: string
          format: uuid
          description: Place ID
        name:
          type: string
          description: Place name
        description:
          type: string
          description: Place description
        photos:
          type: array
          items:
            type: string
          description: Place photos
        lat:
          type: number
          description: Place latitude coordinate
        long:
          type: number
          description: Place longitude coordinate
    B2ProductUnitInfo:
      type: object
      properties:
        unit:
          type: string
        systemUnit:
          type: string
        coeff:
          type: number
    B2ProductData:
      type: object
      properties:
        description:
          type: string
        photos:
          type: array
          items:
            type: string
        unitInfo:
          $ref: "#/components/schemas/B2ProductUnitInfo"
        processId:
          type: string
        structureId:
          type: string
        requirementId:
          type: string
        configId:
          type: string
    B2ProductWithData:
      allOf:
        - $ref: "#/components/schemas/DocumentDataCommon"
        - $ref: "#/components/schemas/B2ProductData"
    B2ProductConfigRow:
      type: object
      properties:
        id:
          type: string
        columns:
          type: object
          additionalProperties:
            type: string
    B2ProductBatchStatus:
      type: string
      enum:
        - inStorage
        - sold
        - dispose
        - deleted
    B2ProductBatchInfo:
      type: object
      required:
        - id
        - documentId
        - versionId
        - key
        - name
        - status
        - amount
        - unitInfo
        - produceDate
      properties:
        id:
          type: string
        documentId:
          type: string
        versionId:
          type: string
        configId:
          type: string
          nullable: true
        key:
          type: string
        name:
          type: string
        status:
          $ref: "#/components/schemas/B2ProductBatchStatus"
        amount:
          type: number
        unitInfo:
          $ref: "#/components/schemas/B2ProductUnitInfo"
        produceDate:
          type: string
          format: date-time
        latestPrice:
          type: number
          nullable: true
        amountInIdp:
          type: number
          nullable: true
    B2ProductBatch:
      allOf:
        - $ref: "#/components/schemas/B2ProductBatchInfo"
        - type: object
          required:
            - spaceId
            - logisticInfo
            - storageInfo
            - createdAt
            - updatedAt
          properties:
            spaceId:
              type: string
            logisticInfo:
              type: object
              additionalProperties:
                type: number
                nullable: true
            storageInfo:
              type: object
              additionalProperties:
                type: number
                nullable: true
            registerAmount:
              type: number
              nullable: true
            inStorageAmount:
              type: number
              nullable: true
            outStorageAmount:
              type: number
              nullable: true
            deliveryAmount:
              type: number
              nullable: true
            deliveryAmountPrice:
              type: number
              nullable: true
            soldAmount:
              type: number
              nullable: true
            soldAmountPrice:
              type: number
              nullable: true
            disputeAmount:
              type: number
              nullable: true
            disputeAmountPrice:
              type: number
              nullable: true
            createdBy:
              type: string
              nullable: true
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time
            deletedAt:
              type: string
              format: date-time
              nullable: true
    B2ProductBatchWithData:
      allOf:
        - $ref: "#/components/schemas/B2ProductBatch"
        - type: object
          properties:
            createdByData:
              $ref: "#/components/schemas/User"
    B2StorageWithData:
      allOf:
        - $ref: "#/components/schemas/DocumentDataCommon"
    B2StorageOperationType:
      type: string
      enum:
        - incoming
        - outgoing
        - movement
    B2StorageBalance:
      type: object
      required:
        - id
        - spaceId
        - storageId
        - amount
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
        spaceId:
          type: string
        storageId:
          type: string
        resourceId:
          type: string
          nullable: true
        batchId:
          type: string
          nullable: true
        amount:
          type: number
        produceDate:
          type: string
          format: date-time
          nullable: true
        expiryDays:
          type: number
          nullable: true
        temperatureMin:
          type: number
          nullable: true
        temperatureMax:
          type: number
          nullable: true
        humidityMin:
          type: number
          nullable: true
        humidityMax:
          type: number
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    B2StorageBalanceWithData:
      allOf:
        - $ref: "#/components/schemas/B2StorageBalance"
        - type: object
          required:
            - storageName
          properties:
            expireDate:
              type: string
              format: date
            remainingDays:
              type: number
            storageName:
              type: string
            resourceData:
              $ref: "#/components/schemas/ResourceInfo"
            batchData:
              $ref: "#/components/schemas/B2ProductBatchInfo"
    B2StorageOperation:
      type: object
      required:
        - id
        - spaceId
        - storageId
        - key
        - type
        - amount
        - createdAt
      properties:
        id:
          type: string
        spaceId:
          type: string
        storageId:
          type: string
        resourceId:
          type: string
          nullable: true
        batchId:
          type: string
          nullable: true
        key:
          type: string
        type:
          $ref: "#/components/schemas/B2StorageOperationType"
        amount:
          type: number
        counterpartyId:
          type: string
          nullable: true
        createdBy:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
    B2StorageOperationWithData:
      allOf:
        - $ref: "#/components/schemas/B2StorageOperation"
        - type: object
          required:
            - storageName
            - spaceData
          properties:
            storageName:
              type: string
            counterpartyName:
              type: string
              nullable: true
            resourceData:
              $ref: "#/components/schemas/ResourceInfo"
              nullable: true
            batchData:
              $ref: "#/components/schemas/B2ProductBatchInfo"
              nullable: true
            spaceData:
              $ref: "#/components/schemas/SpaceBase"
            createdByData:
              $ref: "#/components/schemas/User"
              nullable: true
    B2Table:
      allOf:
        - $ref: "#/components/schemas/DocumentDataCommon"
        - type: object
          properties:
            config:
              $ref: "#/components/schemas/B2TableConfig"
    B2TableColType:
      type: string
      enum:
        - string
        - number
        - date
        - dateTime
        - boolean
        - select
        - selectRef
        - dictionary
        - photos
        - logistic
    B2TableColAlignment:
      type: string
      enum:
        - left
        - right
        - center
    B2TableColumn:
      type: object
      description: Represents a column definition in a B2Table.
      required:
        - field
      properties:
        field:
          type: string
          description: The column identifier
        headerName:
          type: string
          description: The title of the column rendered in the column header cell.
        width:
          type: number
          description: Set the width of the column.
          default: 100
        minWidth:
          type: number
          description: Sets the minimum width of a column.
          default: 50
        maxWidth:
          type: number
          description: Sets the maximum width of a column.
        hideable:
          type: boolean
          description: If false, removes the buttons for hiding this column.
          default: true
        sortable:
          type: boolean
          description: If true, the column is sortable.
          default: true
        resizable:
          type: boolean
          description: If true, the column is resizable.
          default: true
        pinnable:
          type: boolean
          description: If false, the menu items for column pinning menu will not be
            rendered.
          default: true
        type:
          $ref: "#/components/schemas/B2TableColType"
          description: The type of the column.
          default: string
        align:
          $ref: "#/components/schemas/B2TableColAlignment"
          description: Allows to align the column values in cells.
        headerAlign:
          $ref: "#/components/schemas/B2TableColAlignment"
          description: Header cell element alignment.
        disableReorder:
          type: boolean
          description: If true, this column cannot be reordered.
          default: false
        refDocId:
          type: string
          description: Reference to external b2table document.
        refColumn:
          type: string
          description: Reference to external b2table column.
        refColumnType:
          allOf:
            - $ref: "#/components/schemas/B2TableColType"
          nullable: true
          description: Reference to external b2table column type.
        refWordId:
          type: string
          description: Reference to external dictionary-word.
    B2TableRow:
      type: object
      required:
        - documentId
        - versionId
        - number
        - id
      properties:
        documentId:
          type: string
        versionId:
          type: string
        number:
          type: number
        id:
          type: string
      additionalProperties:
        type: string
    B2TableRowWithData:
      allOf:
        - $ref: "#/components/schemas/B2TableRow"
        - type: object
          properties:
            refData:
              type: object
              description: Map of reference data keyed by field name.
              additionalProperties:
                type: object
                additionalProperties:
                  type: string
            refWord:
              type: object
              description: Map of dictionary words keyed by field name.
              additionalProperties:
                $ref: "#/components/schemas/DictionaryWord"
    B2TableConfig:
      type: object
      properties:
        columns:
          type: array
          items:
            $ref: "#/components/schemas/B2TableColumn"
        pinnedColumns:
          type: object
          properties:
            left:
              type: array
              items:
                type: string
            right:
              type: array
              items:
                type: string
        pinnedRows:
          type: object
          properties:
            top:
              type: array
              items:
                type: string
            bottom:
              type: array
              items:
                type: string
    B2TableReference:
      type: object
      required:
        - id
        - name
        - latestVersion
        - columns
      properties:
        id:
          type: string
        name:
          type: string
        latestVersion:
          type: string
        columns:
          type: array
          items:
            $ref: "#/components/schemas/B2TableReferenceColumn"
    B2TableReferenceColumn:
      type: object
      required:
        - id
        - name
        - type
      properties:
        id:
          type: string
        name:
          type: string
        type:
          $ref: "#/components/schemas/B2TableColType"
        refWordId:
          type: string
        refDocId:
          type: string
        refColumn:
          type: string
    TaskType:
      type: string
      enum:
        - simple
        - fillIdt
        - receiveIdt
        - giveOutIdt
        - factoryTask
    TaskSource:
      type: string
      enum:
        - user
        - b2process
        - b2market
        - b2doc
    TaskStatus:
      type: string
      enum:
        - new
        - todo
        - progress
        - blocked
        - review
        - done
        - discard
    TaskPriority:
      type: string
      enum:
        - low
        - medium
        - high
    TaskArtefactType:
      type: string
      enum:
        - product
        - batch
    TaskParticipant:
      type: object
      properties:
        userId:
          type: string
        groupId:
          type: string
        spaceId:
          type: string
        name:
          type: string
    TaskParticipantWithData:
      allOf:
        - $ref: "#/components/schemas/TaskParticipant"
        - type: object
          properties:
            userData:
              $ref: "#/components/schemas/User"
            groupData:
              $ref: "#/components/schemas/GroupBase"
            spaceData:
              $ref: "#/components/schemas/SpaceBase"
    BaseB2TaskData:
      type: object
      required:
        - id
        - source
        - status
        - priority
        - priorityLevel
        - key
        - name
      properties:
        source:
          $ref: "#/components/schemas/TaskSource"
        status:
          $ref: "#/components/schemas/TaskStatus"
        priority:
          $ref: "#/components/schemas/TaskPriority"
        priorityLevel:
          type: number
        artefactId:
          type: string
          nullable: true
        artefactType:
          $ref: "#/components/schemas/TaskArtefactType"
          nullable: true
        key:
          type: string
        name:
          type: string
        description:
          type: string
          nullable: true
        storyPoints:
          type: number
          nullable: true
        timeSpent:
          type: number
          nullable: true
        startDate:
          type: string
          format: date-time
          nullable: true
        dueDate:
          type: string
          format: date-time
          nullable: true
        assigneeId:
          type: string
          nullable: true
        assigneeGroupId:
          type: string
          nullable: true
        controlId:
          type: string
          nullable: true
        participants:
          type: array
          items:
            $ref: "#/components/schemas/TaskParticipant"
          nullable: true
        createdBy:
          type: string
          nullable: true
        systemId:
          type: string
          nullable: true
    B2TaskDataSimple:
      allOf:
        - $ref: "#/components/schemas/BaseB2TaskData"
        - type: object
          required:
            - type
            - data
          properties:
            type:
              enum:
                - simple
            data:
              type: object
    B2TaskDataFillIdt:
      allOf:
        - $ref: "#/components/schemas/BaseB2TaskData"
        - type: object
          required:
            - type
            - data
          properties:
            type:
              enum:
                - fillIdt
            data:
              type: object
              required:
                - externalId
                - productId
                - itemId
                - providerData
                - orders
                - name
                - amount
                - amountInIdt
              properties:
                externalId:
                  type: string
                productId:
                  type: string
                  description: Product ID in B2Market
                itemId:
                  type: string
                  description: Product Items ID in B2Market
                providerData:
                  type: object
                  properties:
                    productId:
                      type: string
                      description: Product ID from Provider
                    versionId:
                      type: string
                      description: Product Version ID from Provider
                    configId:
                      type: string
                      description: Product Config ID from Provider
                      nullable: true
                orders:
                  type: array
                  items:
                    type: string
                name:
                  type: string
                amount:
                  type: number
                amountInIdt:
                  type: number
                idtList:
                  type: array
                  items:
                    $ref: "#/components/schemas/TaskDataIdtWithIdp"
    B2TaskDataReceiveIdt:
      allOf:
        - $ref: "#/components/schemas/BaseB2TaskData"
        - type: object
          required:
            - type
            - data
          properties:
            type:
              enum:
                - receiveIdt
            data:
              type: object
              required:
                - externalId
                - place
                - fromUserId
                - fromUserName
                - idtList
              properties:
                externalId:
                  type: string
                place:
                  $ref: "#/components/schemas/PlaceBase"
                fromUserId:
                  type: string
                fromUserName:
                  type: string
                idtList:
                  type: array
                  items:
                    $ref: "#/components/schemas/TaskDataIdtWithIdp"
    B2TaskDataGiveOutIdt:
      allOf:
        - $ref: "#/components/schemas/BaseB2TaskData"
        - type: object
          required:
            - type
            - data
          properties:
            type:
              enum:
                - giveOutIdt
            data:
              type: object
              required:
                - externalId
                - place
                - toUserId
                - toUserName
                - idtList
              properties:
                externalId:
                  type: string
                place:
                  $ref: "#/components/schemas/PlaceBase"
                toUserId:
                  type: string
                toUserName:
                  type: string
                idtList:
                  type: array
                  items:
                    $ref: "#/components/schemas/TaskDataIdtWithIdp"
    B2TaskDataFactoryTask:
      allOf:
        - $ref: "#/components/schemas/BaseB2TaskData"
        - type: object
          required:
            - type
            - data
          properties:
            type:
              enum:
                - factoryTask
            data:
              type: object
              required:
                - type
                - documentId
                - versionId
                - amount
              properties:
                type:
                  type: string
                  enum:
                    - plan
                    - preOrder
                documentId:
                  type: string
                versionId:
                  type: string
                configId:
                  type: string
                  nullable: true
                amount:
                  type: number
                duration:
                  type: number
                  nullable: true
                condition:
                  type: number
                  nullable: true
                startDate:
                  type: string
                  format: date-time
                  nullable: true
                endDate:
                  type: string
                  format: date-time
                  nullable: true
                storages:
                  type: array
                  items:
                    type: object
                    required:
                      - storageId
                      - amount
                    properties:
                      storageId:
                        type: string
                      amount:
                        type: number
                  nullable: true
    B2TaskData:
      oneOf:
        - $ref: "#/components/schemas/B2TaskDataSimple"
        - $ref: "#/components/schemas/B2TaskDataFillIdt"
        - $ref: "#/components/schemas/B2TaskDataReceiveIdt"
        - $ref: "#/components/schemas/B2TaskDataGiveOutIdt"
        - $ref: "#/components/schemas/B2TaskDataFactoryTask"
    B2Task:
      allOf:
        - $ref: "#/components/schemas/DocumentDataCommon"
        - $ref: "#/components/schemas/B2TaskData"
        - type: object
          properties:
            documentId:
              type: string
              description: This property does not used in B2Task
              nullable: true
    B2TaskWithData:
      allOf:
        - $ref: "#/components/schemas/B2Task"
        - type: object
          required:
            - spaceData
          properties:
            createdByData:
              $ref: "#/components/schemas/User"
            assigneeData:
              $ref: "#/components/schemas/User"
            assigneeGroupData:
              $ref: "#/components/schemas/GroupBase"
            controlData:
              $ref: "#/components/schemas/User"
            participantsData:
              type: array
              items:
                $ref: "#/components/schemas/TaskParticipantWithData"
            spaceData:
              $ref: "#/components/schemas/SpaceBase"
    B2TaskWorkLog:
      type: object
      required:
        - id
        - taskId
        - time
        - logDate
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
        taskId:
          type: string
          format: uuid
        time:
          type: number
        logDate:
          type: string
          format: date-time
        comment:
          type: string
          nullable: true
        createdBy:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    B2TaskWorkLogWithData:
      allOf:
        - $ref: "#/components/schemas/B2TaskWorkLog"
        - type: object
          properties:
            createdByData:
              $ref: "#/components/schemas/User"
    B2TaskComment:
      type: object
      required:
        - id
        - taskId
        - comment
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
        taskId:
          type: string
          format: uuid
        comment:
          type: string
        attachments:
          type: array
          items:
            type: string
          nullable: true
        createdBy:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    B2TaskCommentWithData:
      allOf:
        - $ref: "#/components/schemas/B2TaskComment"
        - type: object
          properties:
            createdByData:
              $ref: "#/components/schemas/User"
    TaskDataIdtWithIdp:
      type: object
      required:
        - id
        - key
        - contains
      properties:
        id:
          type: string
          description: Delivery idT
          format: uuid
        key:
          type: string
          description: Delivery idT unique key in format `A_000001`
          example: A_000000
        contains:
          type: array
          description: List of idP in idT
          items:
            type: object
            required:
              - id
              - number
              - name
              - batchId
            properties:
              id:
                type: string
                format: uuid
                description: idP unique ID
              number:
                type: number
                description: idP number in B2Market
              name:
                type: string
                description: Product Item name
              batchId:
                type: string
                format: uuid
                description: Product Batch ID
    B2TaskSearchQuery:
      type: object
      properties:
        view:
          type: string
          enum:
            - all
            - assignee
            - participant
            - control
            - creator
        ids:
          type: array
          items:
            type: string
        types:
          type: array
          items:
            $ref: "#/components/schemas/TaskType"
        source:
          type: array
          items:
            $ref: "#/components/schemas/TaskSource"
        status:
          type: array
          items:
            $ref: "#/components/schemas/TaskStatus"
        notStatus:
          type: array
          items:
            $ref: "#/components/schemas/TaskStatus"
        priority:
          type: array
          items:
            $ref: "#/components/schemas/TaskPriority"
        assignee:
          type: array
          items:
            type: string
        assigneeGroup:
          type: array
          items:
            type: string
        control:
          type: array
          items:
            type: string
        artifacts:
          type: array
          items:
            type: string
        createdBy:
          type: array
          items:
            type: string
        systemId:
          type: string
    CreateB2TaskBody:
      type: object
      required:
        - type
        - source
        - priority
        - data
      properties:
        type:
          $ref: "#/components/schemas/TaskType"
        source:
          $ref: "#/components/schemas/TaskSource"
        status:
          $ref: "#/components/schemas/TaskStatus"
        priority:
          $ref: "#/components/schemas/TaskPriority"
        priorityLevel:
          type: number
        artefactId:
          type: string
          nullable: true
        artefactType:
          $ref: "#/components/schemas/TaskArtefactType"
          nullable: true
        description:
          type: string
          nullable: true
        references:
          type: array
          items:
            $ref: "#/components/schemas/B2TaskNewReference"
        data:
          type: object
        storyPoints:
          type: number
          nullable: true
        startDate:
          type: string
          format: date-time
          nullable: true
        dueDate:
          type: string
          format: date-time
          nullable: true
        assigneeId:
          type: string
          nullable: true
        assigneeGroupId:
          type: string
          nullable: true
        controlId:
          type: string
          nullable: true
        participants:
          type: array
          items:
            $ref: "#/components/schemas/TaskParticipant"
          nullable: true
    B2TaskNewReference:
      type: object
      required:
        - targetId
        - targetType
      properties:
        targetId:
          type: string
          format: uuid
        targetType:
          $ref: "#/components/schemas/DocumentType"
        targetVersion:
          type: string
          format: uuid
        targetCurrent:
          type: boolean
        targetSigned:
          type: boolean
    DictionaryWord:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
          nullable: true
        photo:
          type: string
          nullable: true
        unit:
          type: string
          nullable: true
        systemUnit:
          type: string
          nullable: true
        coeff:
          type: number
          nullable: true
    DocumentBase:
      type: object
      required:
        - id
        - spaceId
        - name
        - type
      properties:
        id:
          type: string
        spaceId:
          type: string
        name:
          type: string
        type:
          $ref: "#/components/schemas/DocumentType"
        isPublic:
          type: boolean
          nullable: true
        isSystem:
          type: boolean
          nullable: true
        systemId:
          type: string
          nullable: true
        systemType:
          $ref: "#/components/schemas/SystemType"
          nullable: true
        currentVersion:
          $ref: "#/components/schemas/DocumentVersionCacheData"
          nullable: true
        latestVersion:
          $ref: "#/components/schemas/DocumentVersionCacheData"
          nullable: true
        signedVersion:
          $ref: "#/components/schemas/DocumentVersionCacheData"
          nullable: true
    DocumentType:
      type: string
      enum:
        - file
        - b2doc
        - b2table
        - b2process
        - b2map
        - b2product
        - b2storage
        - b2counterparty
        - b2task
    SystemType:
      type: string
      enum:
        - product
        - storage
    SystemData:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
        name:
          type: string
    DocumentVersionCacheData:
      type: object
      required:
        - id
        - key
        - type
        - version
        - data
      properties:
        id:
          type: string
        key:
          type: string
        type:
          $ref: "#/components/schemas/DocumentType"
        version:
          type: number
        data:
          type: object
    Document:
      allOf:
        - $ref: "#/components/schemas/DocumentBase"
        - type: object
          required:
            - createdAt
            - updatedAt
          properties:
            createdBy:
              type: string
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time
            deletedAt:
              type: string
              format: date-time
              nullable: true
    DocumentWithFolders:
      allOf:
        - $ref: "#/components/schemas/Document"
        - type: object
          required:
            - folders
            - spaceData
          properties:
            folders:
              type: array
              items:
                type: string
            spaceData:
              $ref: "#/components/schemas/SpaceBase"
            createdByData:
              $ref: "#/components/schemas/User"
            hasAccess:
              type: boolean
    DocumentWithData:
      allOf:
        - $ref: "#/components/schemas/Document"
        - type: object
          required:
            - data
          properties:
            access:
              $ref: "#/components/schemas/PermissionAccess"
            spaceData:
              $ref: "#/components/schemas/SpaceBase"
            createdByData:
              $ref: "#/components/schemas/User"
            tagsData:
              type: array
              items:
                $ref: "#/components/schemas/TagWithData"
            versions:
              type: array
              items:
                $ref: "#/components/schemas/DocumentDataCommon"
                description: Need to formalize
            fromPublic:
              type: boolean
            fromDeleted:
              type: boolean
    DocumentDataCommon:
      type: object
      required:
        - id
        - spaceId
        - documentId
        - key
        - version
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
        spaceId:
          type: string
        documentId:
          type: string
        createdBy:
          type: string
        key:
          type: string
        version:
          type: number
        current:
          type: boolean
        latest:
          type: boolean
        signed:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    DocumentSignData:
      type: object
      required:
        - order
        - userId
        - userName
        - spaceId
      properties:
        userId:
          type: string
        userName:
          type: string
        spaceId:
          type: string
        spaceName:
          type: string
        order:
          type: number
    DocumentSignature:
      allOf:
        - $ref: "#/components/schemas/DocumentSignData"
        - type: object
          required:
            - documentId
            - versionId
            - hash
            - createdAt
            - updatedAt
          properties:
            documentId:
              type: string
            versionId:
              type: string
            hash:
              type: string
            signature:
              type: string
            timestamp:
              type: number
            createdBy:
              type: string
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time
    DocumentReference:
      type: object
      required:
        - sourceId
        - sourceType
        - sourceVersion
        - targetId
        - targetType
        - createdAt
        - updatedAt
      properties:
        sourceId:
          type: string
          format: uuid
        sourceType:
          $ref: "#/components/schemas/DocumentType"
        sourceVersion:
          type: string
          format: uuid
        targetId:
          type: string
          format: uuid
        targetType:
          $ref: "#/components/schemas/DocumentType"
        targetVersion:
          type: string
          format: uuid
          nullable: true
        targetCurrent:
          type: boolean
        targetSigned:
          type: boolean
        metadata:
          type: object
          additionalProperties:
            type: string
        createdBy:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    DocumentVersionSpecific:
      type: object
      required:
        - docId
      properties:
        docId:
          type: string
          format: uuid
        versionId:
          type: string
          format: uuid
        current:
          type: boolean
        signed:
          type: boolean
    FileData:
      allOf:
        - $ref: "#/components/schemas/DocumentDataCommon"
        - type: object
          required:
            - mimeType
            - filename
            - size
          properties:
            mimeType:
              type: string
              description: MIME Type
            filename:
              type: string
              description: Original File Name
            size:
              type: number
              description: File Size
            encoding:
              type: string
              nullable: true
              description: File Encoding
    Folder:
      type: object
      required:
        - id
        - spaceId
        - parentId
        - name
        - createdBy
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
        spaceId:
          type: string
        parentId:
          type: string
          nullable: true
        name:
          type: string
        photo:
          type: string
          nullable: true
        order:
          type: integer
          nullable: true
        isPublic:
          type: boolean
          nullable: true
        isSystem:
          type: boolean
          nullable: true
        systemId:
          type: string
          nullable: true
        systemType:
          $ref: "#/components/schemas/SystemType"
          nullable: true
        createdBy:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        deletedAt:
          type: string
          format: date-time
          nullable: true
    GroupBase:
      type: object
      required:
        - id
        - spaceId
        - parentId
        - name
      properties:
        id:
          type: string
          format: uuid
        spaceId:
          type: string
          format: uuid
        parentId:
          type: string
          format: uuid
          nullable: true
        name:
          type: string
    Group:
      allOf:
        - $ref: "#/components/schemas/GroupBase"
        - type: object
          required:
            - order
            - createdAt
            - updatedAt
          properties:
            order:
              type: integer
            description:
              type: string
              nullable: true
            createdBy:
              type: string
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time
    GroupWithData:
      allOf:
        - $ref: "#/components/schemas/Group"
        - type: object
          properties:
            createdByData:
              $ref: "#/components/schemas/User"
    GroupTreeItem:
      allOf:
        - $ref: "#/components/schemas/GroupBase"
        - type: object
          properties:
            children:
              type: array
              items: null
              $ref: "#/components/schemas/GroupTreeItem"
              nullable: true
            hasAccess:
              type: boolean
              nullable: true
    NotificationType:
      type: string
      enum:
        - inviteToSpaceAsAdmin
        - excludeFromSpaceAsAdmin
        - inviteToGroup
        - toggleAdminGroup
        - excludeFromGroup
        - addedToFolder
        - modifyAccessInFolder
        - excludeFromFolder
        - addedToDocument
        - modifyAccessInDocument
        - excludeFromDocument
        - addedToModule
        - modifyAccessInModule
        - excludeFromModule
        - newTask
    NotificationCallbackAction:
      type: string
      enum:
        - accept
        - deny
        - error
    BaseNotification:
      type: object
      required:
        - id
        - userId
        - artefactId
        - type
        - data
        - updatedAt
        - createdAt
      properties:
        id:
          type: string
        userId:
          type: string
        artefactId:
          type: string
        type:
          $ref: "#/components/schemas/NotificationType"
        isRead:
          type: boolean
        data:
          type: object
        callbackAction:
          $ref: "#/components/schemas/NotificationCallbackAction"
        createdBy:
          type: string
        updatedAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
    NotificationAddedToDocument:
      allOf:
        - $ref: "#/components/schemas/BaseNotification"
        - type: object
          properties:
            type:
              enum:
                - addedToDocument
            data:
              type: object
              required:
                - document
                - access
              properties:
                document:
                  $ref: "#/components/schemas/Document"
                systemData:
                  $ref: "#/components/schemas/SystemData"
                access:
                  $ref: "#/components/schemas/PermissionAccess"
    NotificationModifyAccessInDocument:
      allOf:
        - $ref: "#/components/schemas/BaseNotification"
        - type: object
          properties:
            type:
              enum:
                - modifyAccessInDocument
            data:
              type: object
              required:
                - document
                - access
              properties:
                document:
                  $ref: "#/components/schemas/Document"
                systemData:
                  $ref: "#/components/schemas/SystemData"
                access:
                  $ref: "#/components/schemas/PermissionAccess"
    NotificationExcludeFromDocument:
      allOf:
        - $ref: "#/components/schemas/BaseNotification"
        - type: object
          properties:
            type:
              enum:
                - excludeFromDocument
            data:
              type: object
              required:
                - document
                - access
              properties:
                document:
                  $ref: "#/components/schemas/Document"
                systemData:
                  $ref: "#/components/schemas/SystemData"
                access:
                  $ref: "#/components/schemas/PermissionAccess"
    NotificationAddedToFolder:
      allOf:
        - $ref: "#/components/schemas/BaseNotification"
        - type: object
          properties:
            type:
              enum:
                - addedToFolder
            data:
              type: object
              required:
                - folder
                - access
              properties:
                folder:
                  $ref: "#/components/schemas/Folder"
                systemData:
                  $ref: "#/components/schemas/SystemData"
                access:
                  $ref: "#/components/schemas/PermissionAccess"
    NotificationModifyAccessInFolder:
      allOf:
        - $ref: "#/components/schemas/BaseNotification"
        - type: object
          properties:
            type:
              enum:
                - modifyAccessInFolder
            data:
              type: object
              required:
                - folder
                - access
              properties:
                folder:
                  $ref: "#/components/schemas/Folder"
                systemData:
                  $ref: "#/components/schemas/SystemData"
                access:
                  $ref: "#/components/schemas/PermissionAccess"
    NotificationExcludeFromFolder:
      allOf:
        - $ref: "#/components/schemas/BaseNotification"
        - type: object
          properties:
            type:
              enum:
                - excludeFromFolder
            data:
              type: object
              required:
                - folder
                - access
              properties:
                folder:
                  $ref: "#/components/schemas/Folder"
                systemData:
                  $ref: "#/components/schemas/SystemData"
                access:
                  $ref: "#/components/schemas/PermissionAccess"
    NotificationInviteToSpaceAsAdmin:
      allOf:
        - $ref: "#/components/schemas/BaseNotification"
        - type: object
          properties:
            type:
              enum:
                - inviteToSpaceAsAdmin
            data:
              $ref: "#/components/schemas/SpaceUserWithData"
    NotificationExcludeFromSpaceAsAdmin:
      allOf:
        - $ref: "#/components/schemas/BaseNotification"
        - type: object
          properties:
            type:
              enum:
                - excludeFromSpaceAsAdmin
            data:
              $ref: "#/components/schemas/SpaceUserWithData"
    NotificationInviteToGroup:
      allOf:
        - $ref: "#/components/schemas/BaseNotification"
        - type: object
          properties:
            type:
              enum:
                - inviteToGroup
            data:
              $ref: "#/components/schemas/SpaceUserWithData"
    NotificationToggleAdminGroup:
      allOf:
        - $ref: "#/components/schemas/BaseNotification"
        - type: object
          properties:
            type:
              enum:
                - toggleAdminGroup
            data:
              $ref: "#/components/schemas/SpaceUserWithData"
    NotificationExcludeFromGroup:
      allOf:
        - $ref: "#/components/schemas/BaseNotification"
        - type: object
          properties:
            type:
              enum:
                - excludeFromGroup
            data:
              $ref: "#/components/schemas/SpaceUserWithData"
    NotificationAddedToModule:
      allOf:
        - $ref: "#/components/schemas/BaseNotification"
        - type: object
          properties:
            type:
              enum:
                - addedToModule
            data:
              type: object
              required:
                - spaceData
                - module
                - access
              properties:
                spaceData:
                  $ref: "#/components/schemas/SpaceBase"
                module:
                  $ref: "#/components/schemas/PermissionType"
                createdByData:
                  $ref: "#/components/schemas/User"
                systemData:
                  $ref: "#/components/schemas/SystemData"
                systemType:
                  $ref: "#/components/schemas/SystemType"
                access:
                  $ref: "#/components/schemas/PermissionAccess"
    NotificationModifyAccessInModule:
      allOf:
        - $ref: "#/components/schemas/BaseNotification"
        - type: object
          properties:
            type:
              enum:
                - modifyAccessInModule
            data:
              type: object
              required:
                - spaceData
                - module
                - access
              properties:
                spaceData:
                  $ref: "#/components/schemas/SpaceBase"
                module:
                  $ref: "#/components/schemas/PermissionType"
                createdByData:
                  $ref: "#/components/schemas/User"
                systemData:
                  $ref: "#/components/schemas/SystemData"
                systemType:
                  $ref: "#/components/schemas/SystemType"
                access:
                  $ref: "#/components/schemas/PermissionAccess"
    NotificationExcludeFromModule:
      allOf:
        - $ref: "#/components/schemas/BaseNotification"
        - type: object
          properties:
            type:
              enum:
                - excludeFromModule
            data:
              type: object
              required:
                - spaceData
                - module
                - access
              properties:
                spaceData:
                  $ref: "#/components/schemas/SpaceBase"
                module:
                  $ref: "#/components/schemas/PermissionType"
                createdByData:
                  $ref: "#/components/schemas/User"
                systemData:
                  $ref: "#/components/schemas/SystemData"
                systemType:
                  $ref: "#/components/schemas/SystemType"
                access:
                  $ref: "#/components/schemas/PermissionAccess"
    NotificationNewTask:
      allOf:
        - $ref: "#/components/schemas/BaseNotification"
        - type: object
          properties:
            type:
              enum:
                - newTask
            data:
              $ref: "#/components/schemas/B2TaskWithData"
    Notification:
      oneOf:
        - $ref: "#/components/schemas/NotificationAddedToDocument"
        - $ref: "#/components/schemas/NotificationModifyAccessInDocument"
        - $ref: "#/components/schemas/NotificationExcludeFromDocument"
        - $ref: "#/components/schemas/NotificationAddedToFolder"
        - $ref: "#/components/schemas/NotificationModifyAccessInFolder"
        - $ref: "#/components/schemas/NotificationExcludeFromFolder"
        - $ref: "#/components/schemas/NotificationInviteToSpaceAsAdmin"
        - $ref: "#/components/schemas/NotificationExcludeFromSpaceAsAdmin"
        - $ref: "#/components/schemas/NotificationInviteToGroup"
        - $ref: "#/components/schemas/NotificationToggleAdminGroup"
        - $ref: "#/components/schemas/NotificationExcludeFromGroup"
        - $ref: "#/components/schemas/NotificationAddedToModule"
        - $ref: "#/components/schemas/NotificationModifyAccessInModule"
        - $ref: "#/components/schemas/NotificationExcludeFromModule"
        - $ref: "#/components/schemas/NotificationNewTask"
    NotificationWithData:
      allOf:
        - $ref: "#/components/schemas/Notification"
        - type: object
          required:
            - userData
            - createdByData
          properties:
            createdByData:
              $ref: "#/components/schemas/User"
            userData:
              $ref: "#/components/schemas/User"
    PermissionAccess:
      type: string
      enum:
        - read
        - write
        - sign
    PermissionType:
      type: string
      enum:
        - folder
        - document
        - sales
        - factory
        - resources
        - products
        - storages
    Permission:
      type: object
      required:
        - id
        - artefactId
        - type
        - access
        - spaceId
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
        artefactId:
          type: string
        type:
          $ref: "#/components/schemas/PermissionType"
        access:
          $ref: "#/components/schemas/PermissionAccess"
        spaceId:
          type: string
        groupId:
          type: string
          nullable: true
        userId:
          type: string
          nullable: true
        systemId:
          type: string
          nullable: true
        systemType:
          type: string
          nullable: true
        createdBy:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    PermissionWithData:
      allOf:
        - $ref: "#/components/schemas/Permission"
        - type: object
          required:
            - spaceData
          properties:
            userData:
              $ref: "#/components/schemas/User"
            groupData:
              $ref: "#/components/schemas/GroupBase"
            spaceData:
              $ref: "#/components/schemas/SpaceBase"
    PermissionWithArtefactData:
      allOf:
        - $ref: "#/components/schemas/PermissionWithData"
        - type: object
          properties:
            artefactData:
              oneOf:
                - $ref: "#/components/schemas/Document"
                - $ref: "#/components/schemas/Folder"
            systemData:
              $ref: "#/components/schemas/SystemData"
    PermissionSearchOption:
      type: object
      required:
        - spaceId
        - spaceData
      properties:
        userId:
          type: string
          nullable: true
        groupId:
          type: string
          nullable: true
        spaceId:
          type: string
        userData:
          $ref: "#/components/schemas/User"
        groupData:
          $ref: "#/components/schemas/GroupBase"
        spaceData:
          $ref: "#/components/schemas/SpaceBase"
    AssigneePermissions:
      allOf:
        - $ref: "#/components/schemas/PermissionSearchOption"
        - type: object
          required:
            - permissions
          properties:
            permissions:
              type: number
    ResourceStatus:
      type: string
      enum:
        - draft
        - inUse
        - archive
    ResourceType:
      type: string
      enum:
        - idt
        - material
        - mechanism
        - worker
        - animal
        - plant
        - fossil
        - workCenter
    ResourceInfo:
      type: object
      required:
        - id
        - spaceId
        - type
        - name
      properties:
        id:
          type: string
        type:
          $ref: "#/components/schemas/ResourceType"
        name:
          type: string
        unit:
          type: string
          nullable: true
        systemUnit:
          type: string
          nullable: true
        coeff:
          type: number
          nullable: true
    Resource:
      allOf:
        - $ref: "#/components/schemas/ResourceInfo"
        - type: object
          required:
            - spaceId
            - status
            - createdAt
            - updatedAt
          properties:
            spaceId:
              type: string
            createdBy:
              type: string
              nullable: true
            status:
              $ref: "#/components/schemas/ResourceStatus"
            description:
              type: string
              nullable: true
            photos:
              type: array
              items:
                type: string
              nullable: true
            storageAmount:
              type: number
              nullable: true
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time
            deletedAt:
              type: string
              format: date-time
              nullable: true
    SaleOrderStatus:
      type: string
      enum:
        - created
        - processing
        - completed
        - paid
        - failed
        - cancelled
    SaleOrder:
      type: object
      required:
        - id
        - spaceId
        - key
        - status
        - totalPrice
        - placeId
        - createdBy
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
        spaceId:
          type: string
        key:
          type: string
        status:
          $ref: "#/components/schemas/SaleOrderStatus"
        totalPrice:
          type: number
        placeId:
          type: string
        txHash:
          type: string
          nullable: true
        createdBy:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    SaleOrderPositionStatus:
      type: string
      enum:
        - created
        - confirmed
        - production
        - delivery
        - cancelling
        - cancelled
        - completed
        - dispute
        - returned
        - failed
    SaleOrderPosition:
      type: object
      required:
        - id
        - orderId
        - documentId
        - versionId
        - name
        - status
        - price
        - amount
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
        orderId:
          type: string
        documentId:
          type: string
        versionId:
          type: string
        configId:
          type: string
          nullable: true
        name:
          type: string
        status:
          $ref: "#/components/schemas/SaleOrderPositionStatus"
        price:
          type: number
        amount:
          type: number
        txHash:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    SaleOrderWithData:
      allOf:
        - $ref: "#/components/schemas/SaleOrder"
        - type: object
          required:
            - positions
          properties:
            positions:
              type: array
              items:
                $ref: "#/components/schemas/SaleOrderPosition"
    SpaceBase:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
        name:
          type: string
        logo:
          type: string
          nullable: true
        isPersonal:
          type: boolean
          nullable: true
    Space:
      allOf:
        - $ref: "#/components/schemas/SpaceBase"
        - type: object
          required:
            - isAdmin
            - createdAt
            - updatedAt
          properties:
            isAdmin:
              type: boolean
            createdBy:
              type: string
            createdByData:
              $ref: "#/components/schemas/User"
              nullable: true
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time
    SpaceUser:
      type: object
      required:
        - spaceId
        - userId
        - groupId
        - isAdmin
        - isActive
        - isSupervisor
        - createdAt
        - updatedAt
      properties:
        spaceId:
          type: string
        userId:
          type: string
        groupId:
          type: string
          nullable: true
        isAdmin:
          type: boolean
        isActive:
          type: boolean
        isSupervisor:
          type: boolean
        createdBy:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    SpaceUserWithData:
      allOf:
        - $ref: "#/components/schemas/SpaceUser"
        - type: object
          required:
            - userData
            - spaceData
          properties:
            userData:
              $ref: "#/components/schemas/User"
            groupData:
              $ref: "#/components/schemas/GroupBase"
              nullable: true
            spaceData:
              $ref: "#/components/schemas/SpaceBase"
    SpaceUserOrGroup:
      type: object
      required:
        - spaceId
        - spaceData
      properties:
        spaceId:
          type: string
        userId:
          type: string
          nullable: true
        groupId:
          type: string
          nullable: true
        userData:
          $ref: "#/components/schemas/User"
          nullable: true
        groupData:
          $ref: "#/components/schemas/GroupBase"
          nullable: true
        spaceData:
          $ref: "#/components/schemas/SpaceBase"
    SpaceUserSearch:
      allOf:
        - $ref: "#/components/schemas/User"
        - type: object
          properties:
            groups:
              type: array
              items:
                type: object
                required:
                  - spaceId
                  - spaceName
                  - groupId
                  - isActive
                  - isAdmin
                  - isSupervisor
                properties:
                  spaceId:
                    type: string
                    format: uuid
                  spaceName:
                    type: string
                  groupId:
                    type: string
                    nullable: true
                  groupName:
                    type: string
                    nullable: true
                  isActive:
                    type: boolean
                  isAdmin:
                    type: boolean
                  isSupervisor:
                    type: boolean
                  createdBy:
                    type: string
    TagData:
      type: object
      properties:
        id:
          type: string
        spaceId:
          type: string
        category:
          type: string
          nullable: true
        field:
          type: string
        value:
          type: string
        isSystem:
          type: boolean
        isConfig:
          type: boolean
        createdBy:
          type: string
        createdAt:
          type: string
          format: date-time
    TagWithData:
      allOf:
        - $ref: "#/components/schemas/TagData"
        - type: object
          properties:
            categoryData:
              $ref: "#/components/schemas/DictionaryWord"
            fieldData:
              $ref: "#/components/schemas/DictionaryWord"
            valueData:
              $ref: "#/components/schemas/DictionaryWord"
    EditTagContentBody:
      type: object
      required:
        - field
        - value
      properties:
        field:
          type: string
        value:
          type: string
        category:
          type: string
        isConfig:
          type: boolean
  requestBodies:
    EmptyBody:
      content:
        application/json:
          schema:
            type: object
    SearchActivitiesBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              artifacts:
                type: array
                items:
                  type: string
                  format: uuid
              spaceId:
                type: string
                format: uuid
              users:
                type: array
                items:
                  type: string
                  description: Wallet Address
                  example: 0:c424531feb64afeb46607e0aff5609628207213308b62c123891d817389fc35b
              types:
                type: array
                items:
                  $ref: "#/components/schemas/ActivityType"
              limit:
                type: number
                description: Number of return items
              offset:
                type: number
                description: Number of skip items
              sort:
                type: array
                items:
                  $ref: "#/components/schemas/SortModel"
    EditB2DocBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              config:
                $ref: "#/components/schemas/B2DocConfig"
    SearchFormFieldsBody:
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/SearchModel"
              - type: object
                required:
                  - spaceId
                properties:
                  spaceId:
                    type: string
                    format: uuid
                  versions:
                    type: array
                    items:
                      type: string
                      format: uuid
                  specific:
                    $ref: "#/components/schemas/DocumentVersionSpecific"
                  fields:
                    type: array
                    items:
                      type: string
                      format: uuid
    SearchB2StorageBalances:
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/SearchModel"
              - type: object
                properties:
                  ids:
                    type: array
                    items:
                      type: string
                  storages:
                    type: array
                    items:
                      type: string
                  batches:
                    type: array
                    items:
                      type: string
                  searchTerm:
                    type: string
                  expired:
                    type: boolean
                  positive:
                    type: boolean
                  ownProduction:
                    type: boolean
                  batchQuery:
                    type: object
                    properties:
                      products:
                        type: array
                        items:
                          type: string
                      versions:
                        type: array
                        items:
                          type: string
                      configs:
                        type: array
                        items:
                          type: string
                          nullable: true
    SearchB2StorageOperations:
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/SearchModel"
              - type: object
                properties:
                  ids:
                    type: array
                    items:
                      type: string
                  storages:
                    type: array
                    items:
                      type: string
                  products:
                    type: array
                    items:
                      type: string
                  searchTerm:
                    type: string
                  type:
                    type: array
                    items:
                      $ref: "#/components/schemas/B2StorageOperationType"
                  counterpartyId:
                    type: array
                    items:
                      type: string
    CreateB2StorageOperation:
      content:
        application/json:
          schema:
            type: object
            required:
              - storageId
              - type
              - amount
            properties:
              storageId:
                type: string
              type:
                $ref: "#/components/schemas/B2StorageOperationType"
              amount:
                type: number
              batchId:
                type: string
                nullable: true
              resourceId:
                type: string
                nullable: true
              counterpartyId:
                type: string
                nullable: true
              balanceId:
                type: string
                nullable: true
    EditB2TableBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - config
            properties:
              config:
                $ref: "#/components/schemas/B2TableConfig"
    SearchB2TableRowsBody:
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/SearchModel"
              - type: object
                properties:
                  ids:
                    type: array
                    items:
                      type: string
                  searchTerm:
                    type: string
    SearchB2TableReferencesBody:
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/SearchModel"
              - type: object
                required:
                  - spaceId
                properties:
                  spaceId:
                    type: string
                    format: uuid
                  systemId:
                    type: string
                    format: uuid
                  searchTerm:
                    type: string
                  ids:
                    type: array
                    items:
                      type: string
                      format: uuid
    SearchB2TableReferencesOptionsBody:
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/SearchModel"
              - type: object
                required:
                  - columns
                properties:
                  columns:
                    type: array
                    items:
                      type: string
                  fromDocumentId:
                    type: string
                    format: uuid
                  versionId:
                    type: string
                    format: uuid
                  documentId:
                    type: string
                    format: uuid
                  searchTerm:
                    type: string
                  searchColumn:
                    type: string
                  rows:
                    type: array
                    items:
                      type: string
                      format: uuid
                  uniqueValues:
                    type: boolean
    SearchB2TaskBody:
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/SearchModel"
              - type: object
                properties:
                  view:
                    type: string
                    enum:
                      - all
                      - assignee
                      - participant
                      - control
                      - creator
                  searchTerm:
                    type: string
                  ids:
                    type: array
                    items:
                      type: string
                  types:
                    type: array
                    items:
                      $ref: "#/components/schemas/TaskType"
                  notTypes:
                    type: array
                    items:
                      $ref: "#/components/schemas/TaskType"
                  source:
                    type: array
                    items:
                      $ref: "#/components/schemas/TaskSource"
                  status:
                    type: array
                    items:
                      $ref: "#/components/schemas/TaskStatus"
                  notStatus:
                    type: array
                    items:
                      $ref: "#/components/schemas/TaskStatus"
                  priority:
                    type: array
                    items:
                      $ref: "#/components/schemas/TaskPriority"
                  assignee:
                    type: array
                    items:
                      type: string
                  assigneeGroup:
                    type: array
                    items:
                      type: string
                  control:
                    type: array
                    items:
                      type: string
                  artifacts:
                    type: array
                    items:
                      type: string
                  createdBy:
                    type: array
                    items:
                      type: string
                  systemId:
                    type: string
    EditB2TaskBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                $ref: "#/components/schemas/TaskStatus"
              priority:
                $ref: "#/components/schemas/TaskPriority"
              priorityLevel:
                type: number
              name:
                type: string
              description:
                type: string
                nullable: true
              data:
                type: object
              storyPoints:
                type: number
                nullable: true
              startDate:
                type: string
                format: date-time
                nullable: true
              dueDate:
                type: string
                format: date-time
                nullable: true
              assigneeId:
                type: string
                nullable: true
              assigneeGroupId:
                type: string
                nullable: true
              controlId:
                type: string
                nullable: true
              participants:
                type: array
                items:
                  $ref: "#/components/schemas/TaskParticipant"
                nullable: true
              references:
                type: array
                items:
                  $ref: "#/components/schemas/B2TaskNewReference"
    SearchB2TaskWorkLogsBody:
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/SearchModel"
              - type: object
                properties:
                  createdBy:
                    type: array
                    items:
                      type: string
    SearchB2TaskCommentsBody:
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/SearchModel"
              - type: object
                properties:
                  createdBy:
                    type: array
                    items:
                      type: string
    ManageB2TaskWorkLogBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - time
              - logDate
            properties:
              time:
                type: number
              logDate:
                type: string
                format: date-time
              comment:
                type: string
                nullable: true
    ManageB2TaskCommentBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - comment
            properties:
              comment:
                type: string
              attachments:
                type: array
                items:
                  type: string
                nullable: true
    SearchDocumentsBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              ids:
                type: array
                items:
                  type: string
                  format: uuid
              searchTerm:
                type: string
                description: Partly match
              search:
                type: string
                description: Exactly match
              spaceId:
                type: string
                format: uuid
              folderId:
                type: string
                format: uuid
              types:
                type: array
                items:
                  $ref: "#/components/schemas/DocumentType"
              systemId:
                type: string
                format: uuid
              tags:
                type: array
                items:
                  type: string
              withoutFolders:
                type: boolean
              isSigned:
                type: boolean
              isShared:
                type: boolean
              isSystem:
                type: boolean
              isDeleted:
                type: boolean
              withShared:
                type: boolean
              b2taskQuery:
                $ref: "#/components/schemas/B2TaskSearchQuery"
              b2counterpartyQuery:
                $ref: "#/components/schemas/B2CounterpartySearchQuery"
              b2docQuery:
                $ref: "#/components/schemas/B2DocSearchQuery"
              limit:
                type: number
              offset:
                type: number
              sort:
                type: array
                items:
                  $ref: "#/components/schemas/SortModel"
    CreateDocumentBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - spaceId
              - name
              - type
            properties:
              spaceId:
                type: string
              name:
                type: string
              type:
                $ref: "#/components/schemas/DocumentType"
              documentId:
                type: string
                description: If set, new version will be created from this document
                nullable: true
              isPublic:
                type: boolean
                nullable: true
              systemId:
                type: string
                nullable: true
              systemType:
                $ref: "#/components/schemas/SystemType"
                nullable: true
              tags:
                type: array
                items:
                  $ref: "#/components/schemas/EditTagContentBody"
              productVersionData:
                $ref: "#/components/schemas/B2ProductData"
              taskVersionData:
                $ref: "#/components/schemas/CreateB2TaskBody"
              counterpartyVersionData:
                $ref: "#/components/schemas/B2CounterpartyData"
    EditDocumentBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
              isPublic:
                type: boolean
                nullable: true
              currentVersion:
                type: number
    EditDocumentTagsBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - action
              - tags
            properties:
              action:
                type: string
                enum:
                  - set
                  - append
              tags:
                type: array
                items:
                  $ref: "#/components/schemas/EditTagContentBody"
    SearchDocumentReferencesBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              types:
                type: array
                items:
                  $ref: "#/components/schemas/DocumentType"
              versionId:
                type: string
                format: uuid
    ModifyDocumentReferenceBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - sourceVersion
              - targetId
              - targetType
            properties:
              sourceVersion:
                type: string
                format: uuid
              targetId:
                type: string
                format: uuid
              targetType:
                $ref: "#/components/schemas/DocumentType"
              targetVersion:
                type: string
                format: uuid
                nullable: true
              targetCurrent:
                type: boolean
              targetSigned:
                type: boolean
              metadata:
                type: object
                additionalProperties:
                  type: string
    EditDocumentReferencesBody:
      content:
        application/json:
          schema:
            type: array
            items:
              type: object
              required:
                - sourceVersion
                - targetId
                - targetType
              properties:
                sourceVersion:
                  type: string
                  format: uuid
                targetId:
                  type: string
                  format: uuid
                targetType:
                  $ref: "#/components/schemas/DocumentType"
                targetVersion:
                  type: string
                  format: uuid
                  nullable: true
                targetCurrent:
                  type: boolean
                targetSigned:
                  type: boolean
                metadata:
                  type: object
                  additionalProperties:
                    type: string
    CreateGroupBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - name
            properties:
              parentId:
                type: string
                format: uuid
                nullable: true
              name:
                type: string
    EditGroupBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
    MoveGroupBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - id
              - parentId
              - order
            properties:
              id:
                type: string
                format: uuid
              parentId:
                type: string
                format: uuid
              order:
                type: integer
    SearchNotificationsBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              limit:
                type: integer
              offset:
                type: integer
    SendCallbackNotificationBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: string
              action:
                $ref: "#/components/schemas/NotificationCallbackAction"
    SearchPermissionsBody:
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/SearchModel"
              - type: object
                required:
                  - artefactId
                  - type
                properties:
                  artefactId:
                    type: string
                  type:
                    $ref: "#/components/schemas/PermissionType"
                  access:
                    $ref: "#/components/schemas/PermissionAccess"
                    nullable: true
                  variant:
                    type: string
                    enum:
                      - all
                      - users
                      - groups
                    nullable: true
                  searchTerm:
                    type: string
                    nullable: true
                  systemId:
                    type: string
                    nullable: true
                  assignee:
                    type: array
                    items:
                      type: string
    SearchPermissionsOptionsBody:
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/SearchModel"
              - type: object
                required:
                  - artefactId
                  - type
                properties:
                  artefactId:
                    type: string
                  type:
                    $ref: "#/components/schemas/PermissionType"
                  searchTerm:
                    type: string
                    nullable: true
                  systemId:
                    type: string
                    nullable: true
    SearchPermissionsUniqueBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - artefactId
              - type
              - column
            properties:
              artefactId:
                type: string
              type:
                $ref: "#/components/schemas/PermissionType"
              column:
                type: string
                enum:
                  - spaceId
                  - userId
                  - groupId
    SearchPermissionsBySystemBody:
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/SearchModel"
              - type: object
                required:
                  - systemId
                properties:
                  systemId:
                    type: string
                  spaceId:
                    type: string
                    nullable: true
                  access:
                    $ref: "#/components/schemas/PermissionAccess"
                    nullable: true
                  searchTerm:
                    type: string
                    nullable: true
    SearchPermissionsByAssigneeBody:
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/SearchModel"
              - type: object
                properties:
                  groupId:
                    type: string
                    nullable: true
                  userId:
                    type: string
                    nullable: true
                  systemId:
                    type: string
                    nullable: true
                  types:
                    type: array
                    items:
                      $ref: "#/components/schemas/PermissionType"
                    nullable: true
                  access:
                    type: array
                    items:
                      $ref: "#/components/schemas/PermissionAccess"
                    nullable: true
    CreatePermissionBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - artefactId
              - type
              - access
            properties:
              artefactId:
                type: string
              type:
                $ref: "#/components/schemas/PermissionType"
              access:
                $ref: "#/components/schemas/PermissionAccess"
              systemType:
                type: string
                nullable: true
              systemId:
                type: string
                nullable: true
              users:
                type: array
                items:
                  type: string
              groups:
                type: array
                items:
                  type: string
    EditPermissionBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              access:
                $ref: "#/components/schemas/PermissionAccess"
    SearchSaleOrdersBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              ids:
                type: array
                items:
                  type: string
                  format: uuid
              documents:
                type: array
                items:
                  type: string
                  format: uuid
              status:
                type: array
                items:
                  $ref: "#/components/schemas/SaleOrderStatus"
              searchTerm:
                type: string
              createdAt:
                type: string
                format: date
              limit:
                type: number
              offset:
                type: number
              sort:
                type: array
                items:
                  $ref: "#/components/schemas/SortModel"
    CreateSpaceBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
              logo:
                type: string
                nullable: true
              isPersonal:
                type: boolean
                nullable: true
    EditSpaceBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                nullable: true
              logo:
                type: string
                nullable: true
    SearchSpaceUsersBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              searchTerm:
                type: string
                nullable: true
              groups:
                type: array
                items:
                  type: string
              isActive:
                type: boolean
                nullable: true
              isSupervisor:
                type: boolean
                nullable: true
              isAdmin:
                type: boolean
                nullable: true
              ids:
                type: array
                items:
                  type: string
              limit:
                type: number
                nullable: true
              offset:
                type: number
                nullable: true
              sort:
                type: array
                items:
                  $ref: "#/components/schemas/SortModel"
    SearchSpaceUsersGroupsBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - spaceId
            properties:
              searchTerm:
                type: string
                nullable: true
              spaceId:
                type: string
              limit:
                type: number
                nullable: true
              offset:
                type: number
                nullable: true
              sort:
                type: array
                items:
                  $ref: "#/components/schemas/SortModel"
    ModifySpaceUserBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              userId:
                type: string
              groupId:
                type: string
                nullable: true
    EditSpaceUserBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              isAdmin:
                type: boolean
              userId:
                type: string
              groupId:
                type: string
                nullable: true
  responses:
    InvalidData:
      description: Invalid request data
    Unauthorized:
      description: Unauthorized
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: api:403
            message: You don't have access to this method
    UserData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/User"
    UserNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: user:404
            message: User does not exist
    SearchActivitiesData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - total
              - items
            properties:
              total:
                type: number
              items:
                type: array
                items:
                  $ref: "#/components/schemas/ActivityLog"
    B2DocData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/B2DocData"
    B2DocBinary:
      description: Successful operation
      content:
        text/plain:
          schema:
            type: string
            format: binary
        application/pdf:
          schema:
            type: string
            format: binary
    B2DocBlockData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - total
              - items
            properties:
              total:
                type: integer
              items:
                type: array
                items:
                  $ref: "#/components/schemas/B2DocStructureWithData"
    B2DocBlockPrefixes:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            additionalProperties:
              type: string
    B2FormBinary:
      description: Successful operation
      content:
        text/csv:
          schema:
            type: string
            format: binary
    B2FormData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DocumentDataCommon"
    B2FormFieldsData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - total
              - items
            properties:
              total:
                type: integer
              items:
                type: array
                items:
                  $ref: "#/components/schemas/B2FormStructureWithData"
    B2ProductWithData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/B2ProductWithData"
    B2ProductConfigRow:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/B2ProductConfigRow"
    B2ProductBatchWithData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/B2ProductBatchWithData"
    ProductBatchNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: document:b2product:404-batch
            message: B2Product batch not found
    B2StorageWithData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/B2StorageWithData"
    B2StorageBalanceWithData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/B2StorageBalanceWithData"
    B2StorageOperation:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/B2StorageOperation"
    B2StorageOperationWithData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/B2StorageOperationWithData"
    B2StorageBalancesSearchData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - total
              - items
            properties:
              total:
                type: number
              items:
                type: array
                items:
                  $ref: "#/components/schemas/B2StorageBalanceWithData"
    B2StorageOperationsSearchData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - total
              - items
            properties:
              total:
                type: number
              items:
                type: array
                items:
                  $ref: "#/components/schemas/B2StorageOperationWithData"
    B2StorageBalanceNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: document:b2storage:404-balance
            message: B2Storage balance not found
    B2StorageOperationNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: document:b2storage:404-operation
            message: B2Storage operation not found
    B2TableBinary:
      description: Successful operation
      content:
        text/csv:
          schema:
            type: string
            format: binary
    B2Table:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/B2Table"
    SearchB2TableRowWithData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - items
              - total
            properties:
              items:
                type: array
                items:
                  $ref: "#/components/schemas/B2TableRowWithData"
              total:
                type: integer
    SearchB2TableReference:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - items
              - total
            properties:
              items:
                type: array
                items:
                  $ref: "#/components/schemas/B2TableReference"
              total:
                type: integer
    SearchB2TableReferencesOptions:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - items
              - total
            properties:
              items:
                type: array
                items:
                  $ref: "#/components/schemas/B2TableRowWithData"
              total:
                type: integer
    B2Task:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/B2Task"
    B2TaskWithData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/B2TaskWithData"
    B2TaskWorkLog:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/B2TaskWorkLog"
    B2TaskWorkLogWithData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/B2TaskWorkLogWithData"
    B2TaskComment:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/B2TaskComment"
    B2TasCommentWithData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/B2TaskCommentWithData"
    SearchB2TaskData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - total
              - items
            properties:
              total:
                type: integer
              items:
                type: array
                items:
                  $ref: "#/components/schemas/B2TaskWithData"
    SearchB2TaskWorkLogsData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - total
              - items
            properties:
              total:
                type: integer
              items:
                type: array
                items:
                  $ref: "#/components/schemas/B2TaskWorkLogWithData"
    SearchB2TaskCommentsData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - total
              - items
            properties:
              total:
                type: integer
              items:
                type: array
                items:
                  $ref: "#/components/schemas/B2TaskCommentWithData"
    DocumentNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: document:404
            message: Document not found
    DocumentVersionNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: document:404-version
            message: Document version not found
    DocumentWithFolders:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DocumentWithFolders"
    DocumentWithData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DocumentWithData"
    SearchDocumentsData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - total
              - items
            properties:
              total:
                type: number
              items:
                type: array
                items:
                  $ref: "#/components/schemas/DocumentWithFolders"
    DocumentSignatureData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/DocumentSignature"
    DocumentReferencesData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/DocumentReference"
    DocumentReferenceData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DocumentReference"
    FileBinary:
      description: Successful operation
      content:
        text/plain:
          schema:
            type: string
            format: binary
    FileData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/FileData"
    GroupTreeItemData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/GroupTreeItem"
    GroupsIdsData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: array
            items:
              type: string
    GroupData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Group"
    GroupNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: group:404
            message: Group not found
    SearchNotificationsData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            properties:
              total:
                type: integer
              items:
                type: array
                items:
                  $ref: "#/components/schemas/NotificationWithData"
    NotificationNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: notification:404
            message: Notification not found
    PermissionResponse:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Permission"
    PermissionWithDataResponse:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/PermissionWithData"
    PermissionsWithDataResponse:
      description: Successful operation
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/PermissionWithData"
    SearchPermissionsResponse:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - items
              - total
            properties:
              items:
                type: array
                items:
                  $ref: "#/components/schemas/PermissionWithData"
              total:
                type: number
    SearchPermissionsOptionsResponse:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - items
              - total
            properties:
              items:
                type: array
                items:
                  $ref: "#/components/schemas/PermissionSearchOption"
              total:
                type: number
    SearchPermissionsUniqueResponse:
      description: Successful operation
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/PermissionSearchOption"
    SearchPermissionsBySystemResponse:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - items
              - total
            properties:
              items:
                type: array
                items:
                  $ref: "#/components/schemas/AssigneePermissions"
              total:
                type: number
    SearchPermissionsByAssigneeResponse:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - items
              - total
            properties:
              items:
                type: array
                items:
                  $ref: "#/components/schemas/PermissionWithArtefactData"
              total:
                type: number
    GetPermissionsStatisticsResponse:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - users
              - groups
            properties:
              users:
                type: number
              groups:
                type: number
              total:
                type: number
                description: returns only if has write/sign access to artefact
              items:
                type: array
                items:
                  $ref: "#/components/schemas/PermissionWithData"
                description: returns only if has write/sign access to artefact. max 5 items
    CheckPermissionsAccessResponse:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - hasReadAccess
              - hasEditAccess
              - hasSignAccess
            properties:
              hasReadAccess:
                type: boolean
              hasEditAccess:
                type: boolean
              hasSignAccess:
                type: boolean
    PermissionNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: permission:404
            message: Permission not found
    SearchSaleOrdersData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - total
              - items
            properties:
              items:
                type: array
                items:
                  $ref: "#/components/schemas/SaleOrderWithData"
              total:
                type: number
    SaleOrderWithData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SaleOrderWithData"
    SaleOrderNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: sales:404-order
            message: Order not found
    SaleOrderPositionNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: sales:404-order-position
            message: Order position not found
    SpaceArrayData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Space"
    SpaceData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Space"
    SearchSpaceUsersData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            properties:
              items:
                type: array
                items:
                  $ref: "#/components/schemas/SpaceUserSearch"
              total:
                type: integer
    SearchSpaceUsersGroupsData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            properties:
              items:
                type: array
                items:
                  $ref: "#/components/schemas/SpaceUserOrGroup"
              total:
                type: integer
    SpaceUserSearchData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SpaceUserSearch"
    SpaceUserWithData:
      description: The created space user
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SpaceUserWithData"
    SpaceNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: space:404
            message: Space not found
    SpaceUserNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: space:404-user
            message: Space user not found
    TagWithData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/TagWithData"
  parameters:
    docIdParam:
      in: path
      name: docId
      description: Document ID
      required: true
      schema:
        type: string
        format: uuid
    formIdParam:
      in: path
      name: formId
      description: Form ID
      required: true
      schema:
        type: string
        format: uuid
    productIdParam:
      in: path
      name: productId
      description: Product ID
      required: true
      schema:
        type: string
        format: uuid
    productConfigIdParam:
      in: path
      name: configId
      description: Product Configuration ID
      required: true
      schema:
        type: string
        format: uuid
    productBatchIdParam:
      in: path
      name: batchId
      description: Product Batch ID
      required: true
      schema:
        type: string
        format: uuid
    storageIdParam:
      in: path
      name: storageId
      description: Storage ID
      required: true
      schema:
        type: string
        format: uuid
    storageBalanceId:
      in: path
      name: balanceId
      description: Storage Balance ID
      required: true
      schema:
        type: string
        format: uuid
    storageOperationId:
      in: path
      name: operationId
      description: Storage Operation ID
      required: true
      schema:
        type: string
        format: uuid
    tableIdParam:
      in: path
      name: tableId
      description: Table ID
      required: true
      schema:
        type: string
        format: uuid
    taskIdParam:
      in: path
      name: taskId
      description: Task ID
      required: true
      schema:
        type: string
        format: uuid
    taskLogIdParam:
      in: path
      name: logId
      description: Task work log ID
      required: true
      schema:
        type: string
        format: uuid
    taskCommentIdParam:
      in: path
      name: commentId
      description: Task comment ID
      required: true
      schema:
        type: string
        format: uuid
    documentId:
      name: docId
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: Document ID
    versionId:
      name: versionId
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: Version ID
    fileId:
      in: path
      name: fileId
      description: Document Version ID
      required: true
      schema:
        type: string
        format: uuid
    groupId:
      name: groupId
      in: path
      required: true
      schema:
        type: string
        format: uuid
    notificationId:
      name: id
      in: path
      required: true
      schema:
        type: string
        format: uuid
    permissionId:
      name: permissionId
      in: path
      required: true
      schema:
        type: string
      description: Permission ID
    permissionArtefactId:
      name: artefactId
      in: query
      required: true
      schema:
        type: string
      description: Artefact ID
    permissionType:
      name: type
      in: query
      required: true
      schema:
        $ref: "#/components/schemas/PermissionType"
      description: Permission type
    permissionSystemId:
      name: systemId
      in: query
      required: true
      schema:
        type: string
      description: System ID
    saleOrderIdParam:
      in: path
      name: orderId
      description: Sale Order ID
      required: true
      schema:
        type: string
        format: uuid
    saleOrderPositionIdParam:
      in: path
      name: posId
      description: Sale Order Position ID
      required: true
      schema:
        type: string
        format: uuid
    spaceIdParam:
      in: path
      name: id
      description: Space ID
      required: true
      schema:
        type: string
        format: uuid
    userIdParam:
      in: path
      name: id
      description: User ID
      required: true
      schema:
        type: string
