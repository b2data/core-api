openapi: 3.0.0
info:
  title: REST API for Providers
  version: 1.0.0
servers:
  - url: http://localhost:8081
  - url: http://54.37.199.51
tags:
  - name: Providers
paths:
  /providers/my:
    get:
      tags:
        - Providers
        - Available Providers
      security:
        - ProviderClientId: []
          ProviderClientSecret: []
      summary: Get provider data
      operationId: getProvider
      responses:
        "200":
          $ref: "#/components/responses/ProviderData"
        "404":
          $ref: "#/components/responses/ProviderNotFound"
    patch:
      tags:
        - Providers
        - Available Providers
      security:
        - ProviderClientId: []
          ProviderClientSecret: []
      summary: Update provider data
      operationId: updateProvider
      requestBody:
        $ref: "#/components/requestBodies/ProviderRequestBody"
      responses:
        "200":
          $ref: "#/components/responses/ProviderData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "404":
          $ref: "#/components/responses/ProviderNotFound"
    delete:
      tags:
        - Providers
        - Available Providers
      security:
        - ProviderClientId: []
          ProviderClientSecret: []
      summary: Delete provider
      operationId: deleteProvider
      responses:
        "200":
          $ref: "#/components/responses/ProviderData"
        "404":
          $ref: "#/components/responses/ProviderNotFound"
  /providers/register:
    post:
      tags:
        - Providers
        - Available Public
      summary: Register new provider
      operationId: registerProvider
      requestBody:
        $ref: "#/components/requestBodies/ProviderRequestBody"
      responses:
        "200":
          $ref: "#/components/responses/ProviderWithSecretData"
        "400":
          $ref: "#/components/responses/InvalidData"
  /providers/search:
    post:
      tags:
        - Providers
      security:
        - BearerAuth: []
      summary: Search providers
      operationId: searchProviders
      description: Required `Admin` access
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchModel"
      responses:
        "200":
          $ref: "#/components/responses/SearchProvidersData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  "/providers/{id}/block":
    post:
      tags:
        - Providers
      security:
        - BearerAuth: []
      summary: Block provider
      operationId: blockProvider
      description: Required `Admin` access
      parameters:
        - $ref: "#/components/parameters/providerIdParam"
      requestBody:
        $ref: "#/components/requestBodies/EmptyBody"
      responses:
        "200":
          $ref: "#/components/responses/ProviderData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/ProviderNotFound"
  "/providers/{id}/unblock":
    post:
      tags:
        - Providers
      security:
        - BearerAuth: []
      summary: Unblock provider
      operationId: unblockProvider
      description: Required `Admin` access
      parameters:
        - $ref: "#/components/parameters/providerIdParam"
      requestBody:
        $ref: "#/components/requestBodies/EmptyBody"
      responses:
        "200":
          $ref: "#/components/responses/ProviderData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/ProviderNotFound"
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Authorization using Auth routes
    ProviderClientId:
      type: apiKey
      name: client-id
      in: header
      description: Authorization for providers requests
    ProviderClientSecret:
      type: apiKey
      name: client-secret
      in: header
      description: Authorization for providers requests
    ProviderUserId:
      type: apiKey
      name: user-id
      in: header
      description: Authorization for providers requests
  schemas:
    ErrorResponse:
      type: object
      required:
        - errorCode
        - message
      properties:
        errorCode:
          type: string
        message:
          type: string
    SortModel:
      type: object
      required:
        - field
      properties:
        field:
          type: string
          description: The field for sorting
        sort:
          type: string
          nullable: true
          enum:
            - asc
            - desc
          description: The sorting order
    SearchModel:
      type: object
      properties:
        limit:
          type: number
          description: Number of return items
        offset:
          type: number
          description: Number of skip items
        sort:
          type: array
          items:
            $ref: "#/components/schemas/SortModel"
    Provider:
      type: object
      required:
        - id
        - name
        - address
        - callback
        - blocked
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
          description: Provider ID
        name:
          type: string
          description: Provider Name
        address:
          type: string
          description: Provider URL Address
        callback:
          type: string
          description: Provider Callback Address
        blocked:
          type: boolean
          description: If `true` provider is blocked
        createdAt:
          type: string
          format: date-time
          description: Creation Date
        updatedAt:
          type: string
          format: date-time
          description: Last Updating Date
    ProviderWithSecret:
      type: object
      required:
        - id
        - secret
        - name
        - address
        - callback
        - blocked
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
          description: Provider ID
        secret:
          type: string
          description: Provider Secret for API requests
        name:
          type: string
          description: Provider Name
        address:
          type: string
          description: Provider URL Address
        callback:
          type: string
          description: Provider Callback Address
        createdAt:
          type: string
          format: date-time
          description: Creation Date
        updatedAt:
          type: string
          format: date-time
          description: Last Updating Date
  requestBodies:
    EmptyBody:
      content:
        application/json:
          schema:
            type: object
    ProviderRequestBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - name
              - address
              - callback
            properties:
              name:
                type: string
                description: Provider Name
              address:
                type: string
                description: Provider URL Address
              callback:
                type: string
                description: Provider Callback Address
  responses:
    InvalidData:
      description: Invalid request data
    Unauthorized:
      description: Unauthorized
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: api:403
            message: You don't have access to this method
    ProviderData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Provider"
    ProviderWithSecretData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProviderWithSecret"
    SearchProvidersData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - total
              - items
            properties:
              total:
                type: number
              items:
                type: array
                items:
                  $ref: "#/components/schemas/Provider"
    ProviderNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: provider:404
            message: Provider not found
  parameters:
    providerIdParam:
      in: path
      name: id
      description: Provider ID
      required: true
      schema:
        type: string
        format: uuid
