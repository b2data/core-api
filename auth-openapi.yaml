openapi: 3.0.0
info:
  title: REST API for Auth
  version: 1.0.0
servers:
  - url: https://b2p.space/api
  - url: https://market.b2p.space/api
  - url: https://sign.b2p.space/api
  - url: https://pay.b2p.space/api
  - url: https://dictionary.b2p.space/api
  - url: https://beta.data.b2p.space/api
  - url: https://beta.market.b2p.space/api
  - url: https://beta.sign.b2p.space/api
  - url: https://beta.pay.b2p.space/api
  - url: https://beta.dictionary.b2p.space/api
tags:
  - name: Auth
    description: Authenticate by TON Connect
  - name: Available Public
    description: Public API requests
paths:
  /auth/start:
    post:
      tags:
        - Auth
        - Available Public
      summary: Start authentication process
      operationId: startAuth
      requestBody:
        $ref: "#/components/requestBodies/EmptyBody"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - proof
                properties:
                  proof:
                    type: string
  /auth/verify:
    post:
      tags:
        - Auth
        - Available Public
      summary: Verify authentication wallet
      operationId: verifyAuth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - proof
                - account
              properties:
                spaceId:
                  type: string
                  description: Selected Space ID
                proof:
                  type: object
                  required:
                    - payload
                    - signature
                    - timestamp
                    - domain
                  properties:
                    payload:
                      type: string
                      description: TON Connect payload
                    signature:
                      type: string
                      description: TON Connect signature
                    timestamp:
                      type: number
                      description: Timestamp of authentication
                    domain:
                      type: object
                      required:
                        - lengthBytes
                        - value
                      properties:
                        lengthBytes:
                          type: number
                        value:
                          type: string
                account:
                  type: object
                  required:
                    - address
                    - network
                    - publicKey
                    - walletStateInit
                  properties:
                    address:
                      type: string
                      description: Wallet Address
                      example: 0:c424531feb64afeb46607e0aff5609628207213308b62c123891d817389fc35b
                    network:
                      type: string
                      description: Blockchain chain
                    publicKey:
                      type: string
                      description: Wallet Public Key
                    walletStateInit:
                      type: string
                      description: Wallet Public Key
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - accessToken
                  - refreshToken
                  - profile
                properties:
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
                  profile:
                    $ref: "#/components/schemas/User"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                errorCode: auth:404
                message: The proof has not found
  /auth/refresh:
    post:
      tags:
        - Auth
      security:
        - BearerAuth: []
      summary: Refresh Access Token by Refresh token
      operationId: refreshToken
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - accessToken
                - refreshToken
              properties:
                spaceId:
                  type: string
                  description: Selected Space ID
                accessToken:
                  type: string
                refreshToken:
                  type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - accessToken
                  - refreshToken
                  - profile
                properties:
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
                  profile:
                    $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/UserNotFound"
  /auth/profile:
    get:
      tags:
        - Auth
      security:
        - BearerAuth: []
      summary: Get Profile
      operationId: getProfile
      responses:
        "200":
          $ref: "#/components/responses/UserFullData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/UserNotFound"
    patch:
      tags:
        - Auth
      security:
        - BearerAuth: []
      summary: Update Profile
      operationId: updateProfile
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  description: First Name
                lastName:
                  type: string
                  description: Last Name
                middleName:
                  type: string
                  description: Middle Name
                avatar:
                  type: string
                  description: Avatar
      responses:
        "200":
          $ref: "#/components/responses/UserFullData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/UserNotFound"
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: User authorization
    ApiClientAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: API Client Authorization
  schemas:
    ErrorResponse:
      type: object
      required:
        - errorCode
        - message
      properties:
        errorCode:
          type: string
        message:
          type: string
    SortModel:
      type: object
      required:
        - field
      properties:
        field:
          type: string
          description: The field for sorting
        sort:
          type: string
          nullable: true
          enum:
            - asc
            - desc
          description: The sorting order
    SearchModel:
      type: object
      properties:
        limit:
          type: number
          description: Number of return items
        offset:
          type: number
          description: Number of skip items
        sort:
          type: array
          items:
            $ref: "#/components/schemas/SortModel"
    User:
      type: object
      required:
        - id
        - firstName
      properties:
        id:
          type: string
          description: Wallet Address
          example: 0:c424531feb64afeb46607e0aff5609628207213308b62c123891d817389fc35b
        firstName:
          type: string
          description: First Name
        lastName:
          type: string
          description: Last Name
        middleName:
          type: string
          description: Middle Name
        avatar:
          type: string
          description: Avatar
    TMAUser:
      type: object
      required:
        - id
        - firstName
      properties:
        id:
          type: number
          description: Telegram User ID
        firstName:
          type: string
          description: First Name
        lastName:
          type: string
          description: Last Name
        username:
          type: string
          description: Username
        isBot:
          type: boolean
          description: If `true` user is a bot
        isPremium:
          type: boolean
          description: If `true` user is a premium user
        languageCode:
          type: string
          description: Language Code
        photoUrl:
          type: string
          description: URL to User Photo
        addedToAttachmentMenu:
          type: boolean
          description: If `true` user has added the bot to attachment menu
        allowsWriteToPm:
          type: boolean
          description: If `true` user allows writing to PM
    UserFull:
      allOf:
        - $ref: "#/components/schemas/User"
        - type: object
          required:
            - createdAt
          properties:
            publicKeys:
              type: array
              items:
                type: string
              description: List of Public Keys
            tma:
              $ref: "#/components/schemas/TMAUser"
            createdAt:
              type: string
              format: date-time
              description: Date and time of creation
            updatedAt:
              type: string
              format: date-time
              description: Date and time of last update
    AuthErrorCodes:
      type: string
      enum:
        - api:403
        - api:403-system
        - auth:401
        - auth:403
        - auth:404
        - user:404
  requestBodies:
    EmptyBody:
      content:
        application/json:
          schema:
            type: object
  responses:
    InvalidData:
      description: Invalid request data
    TooManyRequests:
      description: Too many requests
    NotImplemented:
      description: Not implemented
    Unauthorized:
      description: Unauthorized
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: api:403
            message: You don't have access to this method
    UserData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/User"
    UserFullData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UserFull"
    UserNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: user:404
            message: User does not exist
