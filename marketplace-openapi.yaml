openapi: 3.0.0
info:
  title: REST API for B2Marketplace
  version: 1.0.0
servers:
  - url: https://localhost:8082
  - url: https://b2p.space/api
tags:
  - name: Apps
  - name: Auth
  - name: Activities
  - name: Admin Access
  - name: Files
  - name: Folders
  - name: Providers
  - name: Tags
  - name: Products
  - name: Places
  - name: Available Public
    description: This methods does not require authorization
  - name: Available Providers
    description: "description: This methods requires Authorizations by `client-id` +
      `client-secret` + `user-id`"
paths:
  /apps:
    get:
      tags:
        - Apps
      security:
        - BearerAuth: []
      summary: Get activated apps
      description: Available for everyone for
      operationId: getApps
      responses:
        "200":
          $ref: "#/components/responses/AppPublicData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  /apps/full:
    get:
      tags:
        - Apps
      security:
        - BearerAuth: []
      summary: Get activated apps full data
      description: Available for supper admins
      operationId: getAppsFull
      responses:
        "200":
          $ref: "#/components/responses/AppListData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  /apps/activate:
    post:
      tags:
        - Apps
      security:
        - BearerAuth: []
      summary: Activate app
      description: Available for supper admins
      operationId: activateApp
      requestBody:
        $ref: "#/components/requestBodies/ActivateAppBody"
      responses:
        "200":
          $ref: "#/components/responses/AppData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/AppNotFound"
        "500":
          $ref: "#/components/responses/AppRegistrationError"
  "/apps/deactivate/{name}":
    post:
      tags:
        - Apps
      security:
        - BearerAuth: []
      summary: Deactivate app
      description: Available for supper admins
      operationId: deactivateApp
      parameters:
        - $ref: "#/components/parameters/appNameParam"
      responses:
        "200":
          $ref: "#/components/responses/AppData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/AppNotFound"
  /auth/start:
    post:
      tags:
        - Auth
      summary: Start authentication process
      operationId: startAuth
      requestBody:
        $ref: "#/components/requestBodies/EmptyBody"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - proof
                properties:
                  proof:
                    type: string
  /auth/verify:
    post:
      tags:
        - Auth
      summary: Verify authentication wallet
      operationId: verifyAuth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - proof
                - account
              properties:
                spaceId:
                  type: string
                  description: Selected Space ID
                proof:
                  type: object
                  required:
                    - payload
                    - signature
                    - timestamp
                  properties:
                    payload:
                      type: string
                      description: TON Connect payload
                    signature:
                      type: string
                      description: TON Connect signature
                    timestamp:
                      type: number
                      description: Timestamp of authentication
                account:
                  type: object
                  required:
                    - address
                    - chain
                  properties:
                    address:
                      type: string
                      description: Wallet Address
                      example: 0:c424531feb64afeb46607e0aff5609628207213308b62c123891d817389fc35b
                    chain:
                      type: string
                      description: Blockchain chain
                    publicKey:
                      type: string
                      description: Wallet Public Key
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - accessToken
                  - refreshToken
                  - profile
                properties:
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
                  profile:
                    $ref: "#/components/schemas/User"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                errorCode: auth:404
                message: The proof has not found
  /auth/refresh:
    post:
      tags:
        - Auth
      summary: Refresh Access Token by Refresh token
      operationId: refreshToken
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - accessToken
                - refreshToken
              properties:
                spaceId:
                  type: string
                  description: Selected Space ID
                accessToken:
                  type: string
                refreshToken:
                  type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - accessToken
                  - refreshToken
                  - profile
                properties:
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
                  profile:
                    $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/UserNotFound"
  /auth/profile:
    get:
      tags:
        - Auth
      security:
        - BearerAuth: []
      summary: Get Profile
      operationId: getProfile
      responses:
        "200":
          $ref: "#/components/responses/UserData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/UserNotFound"
    patch:
      tags:
        - Auth
      security:
        - BearerAuth: []
      summary: Update Profile
      operationId: updateProfile
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  description: First Name
                lastName:
                  type: string
                  description: Last Name
                middleName:
                  type: string
                  description: Middle Name
                avatar:
                  type: string
                  description: Avatar
      responses:
        "200":
          $ref: "#/components/responses/UserData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/UserNotFound"
  /providers/my:
    get:
      tags:
        - Providers
        - Available Providers
      security:
        - ProviderClientId: []
          ProviderClientSecret: []
      summary: Get provider data
      operationId: getProvider
      responses:
        "200":
          $ref: "#/components/responses/ProviderData"
        "404":
          $ref: "#/components/responses/ProviderNotFound"
    patch:
      tags:
        - Providers
        - Available Providers
      security:
        - ProviderClientId: []
          ProviderClientSecret: []
      summary: Update provider data
      operationId: updateProvider
      requestBody:
        $ref: "#/components/requestBodies/ProviderRequestBody"
      responses:
        "200":
          $ref: "#/components/responses/ProviderData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "404":
          $ref: "#/components/responses/ProviderNotFound"
    delete:
      tags:
        - Providers
        - Available Providers
      security:
        - ProviderClientId: []
          ProviderClientSecret: []
      summary: Delete provider
      operationId: deleteProvider
      responses:
        "200":
          $ref: "#/components/responses/ProviderData"
        "404":
          $ref: "#/components/responses/ProviderNotFound"
  /providers/register:
    post:
      tags:
        - Providers
        - Available Public
      summary: Register new provider
      operationId: registerProvider
      requestBody:
        $ref: "#/components/requestBodies/RegisterProviderRequestBody"
      responses:
        "200":
          $ref: "#/components/responses/ProviderWithSecretData"
        "400":
          $ref: "#/components/responses/InvalidData"
  /providers/search:
    post:
      tags:
        - Providers
      security:
        - BearerAuth: []
      summary: Search providers
      operationId: searchProviders
      description: Required `Admin` access
      requestBody:
        $ref: "#/components/requestBodies/SearchProvidersBody"
      responses:
        "200":
          $ref: "#/components/responses/SearchProvidersData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  "/providers/{id}/block":
    post:
      tags:
        - Providers
      security:
        - BearerAuth: []
      summary: Block provider
      operationId: blockProvider
      description: Required `Admin` access
      parameters:
        - $ref: "#/components/parameters/providerIdParam"
      requestBody:
        $ref: "#/components/requestBodies/EmptyBody"
      responses:
        "200":
          $ref: "#/components/responses/ProviderData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/ProviderNotFound"
  "/providers/{id}/unblock":
    post:
      tags:
        - Providers
      security:
        - BearerAuth: []
      summary: Unblock provider
      operationId: unblockProvider
      description: Required `Admin` access
      parameters:
        - $ref: "#/components/parameters/providerIdParam"
      requestBody:
        $ref: "#/components/requestBodies/EmptyBody"
      responses:
        "200":
          $ref: "#/components/responses/ProviderData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/ProviderNotFound"
  /activities/search:
    post:
      tags:
        - Activities
        - Available Providers
      security:
        - BearerAuth: []
        - ProviderClientId: []
          ProviderClientSecret: []
          ProviderUserId: []
      summary: Search activities
      operationId: searchActivities
      requestBody:
        $ref: "#/components/requestBodies/SearchActivitiesBody"
      responses:
        "200":
          $ref: "#/components/responses/SearchActivitiesData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
  /admin-access/check:
    get:
      tags:
        - Admin Access
      security:
        - BearerAuth: []
      summary: Check Admin Access
      operationId: checkAdminAccess
      responses:
        "200":
          $ref: "#/components/responses/CheckUserAccess"
        "401":
          $ref: "#/components/responses/Unauthorized"
  /admin-access/search:
    post:
      tags:
        - Admin Access
      security:
        - BearerAuth: []
      summary: Search System Admins
      description: Required `Wallet Admin` access
      operationId: searchAdminAccess
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchModel"
      responses:
        "200":
          $ref: "#/components/responses/SearchAdminAccess"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  /admin-access:
    post:
      tags:
        - Admin Access
      security:
        - BearerAuth: []
      summary: Add System Admin
      description: Required `Wallet Admin` access
      operationId: addAdminAccess
      requestBody:
        $ref: "#/components/requestBodies/CreateAdminAccessBody"
      responses:
        "200":
          $ref: "#/components/responses/AdminAccessData"
        "400":
          $ref: "#/components/responses/AdminAccessExist"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  "/admin-access/{wallet}":
    delete:
      tags:
        - Admin Access
      security:
        - BearerAuth: []
      summary: Delete System Admin
      description: Required `Wallet Admin` access
      operationId: deleteAdminAccess
      parameters:
        - $ref: "#/components/parameters/walletParam"
      responses:
        "200":
          $ref: "#/components/responses/AdminAccessData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/AdminAccessNotFound"
  /files:
    post:
      tags:
        - Files
        - Available Providers
      security:
        - BearerAuth: []
        - ProviderClientId: []
          ProviderClientSecret: []
          ProviderUserId: []
      summary: Upload file
      operationId: uploadFile
      requestBody:
        $ref: "#/components/requestBodies/UploadFileBody"
      responses:
        "200":
          $ref: "#/components/responses/FileData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/FileNotFound"
  "/files/{id}":
    get:
      tags:
        - Files
        - Available Public
      summary: Get file
      operationId: getFile
      parameters:
        - $ref: "#/components/parameters/fileIdParam"
      responses:
        "200":
          $ref: "#/components/responses/FileBinary"
        "404":
          $ref: "#/components/responses/FileNotFound"
    delete:
      tags:
        - Files
        - Available Providers
      security:
        - BearerAuth: []
        - ProviderClientId: []
          ProviderClientSecret: []
          ProviderUserId: []
      summary: Delete File
      description: Delete by file ID or external ID
      operationId: deleteFile
      parameters:
        - $ref: "#/components/parameters/fileIdParam"
      responses:
        "200":
          $ref: "#/components/responses/FileData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/FileNotFound"
  "/files/{id}/info":
    get:
      tags:
        - Files
        - Available Public
      summary: Get file info
      operationId: getFileInfo
      parameters:
        - $ref: "#/components/parameters/fileIdParam"
      responses:
        "200":
          $ref: "#/components/responses/FileData"
        "404":
          $ref: "#/components/responses/FileNotFound"
  /folders:
    post:
      tags:
        - Folders
      security:
        - BearerAuth: []
      summary: Create folder
      description: Available for `System Admin`
      operationId: createFolder
      requestBody:
        $ref: "#/components/requestBodies/CreateFolderBody"
      responses:
        "200":
          $ref: "#/components/responses/FolderData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/ParentFolderNotFound"
  "/folders/{id}":
    get:
      tags:
        - Folders
        - Available Public
      summary: Get full folder data
      operationId: getFolder
      parameters:
        - $ref: "#/components/parameters/folderIdParam"
      responses:
        "200":
          $ref: "#/components/responses/FolderFullData"
        "404":
          $ref: "#/components/responses/FolderNotFound"
    patch:
      tags:
        - Folders
      security:
        - BearerAuth: []
      summary: Update folder
      description: Available for `System Admin`
      operationId: updateFolder
      parameters:
        - $ref: "#/components/parameters/folderIdParam"
      requestBody:
        $ref: "#/components/requestBodies/EditFolderBody"
      responses:
        "200":
          $ref: "#/components/responses/FolderData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/FolderNotFound"
    delete:
      tags:
        - Folders
      security:
        - BearerAuth: []
      summary: Delete folder
      description: Available for `System Admin`
      operationId: deleteFolder
      parameters:
        - $ref: "#/components/parameters/folderIdParam"
      responses:
        "200":
          $ref: "#/components/responses/FolderData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/FolderNotFound"
  /folders/search:
    get:
      tags:
        - Folders
        - Available Public
      summary: Search folders
      operationId: searchFolders
      parameters:
        - in: query
          name: asTree
          description: Return as tree nodes
          schema:
            type: boolean
        - in: query
          name: searchTerm
          description: Search by name
          schema:
            type: string
        - in: query
          name: parentId
          description: Search by parent ID
          schema:
            type: string
            nullable: true
            format: uuid
        - in: query
          name: productId
          description: Search by product ID
          schema:
            type: string
            nullable: true
            format: uuid
        - in: query
          name: productExternalId
          description: Search by product external ID
          schema:
            type: string
            nullable: true
            format: uuid
        - in: query
          name: ids
          description: Search by ids
          schema:
            type: array
            items:
              type: string
              format: uuid
      responses:
        "200":
          $ref: "#/components/responses/FolderTreeData"
        "400":
          $ref: "#/components/responses/InvalidData"
  /folders/move:
    put:
      tags:
        - Folders
      security:
        - BearerAuth: []
      summary: Change folder order
      description: Available for `System Admin`
      operationId: moveFolder
      requestBody:
        $ref: "#/components/requestBodies/MoveFolderBody"
      responses:
        "200":
          $ref: "#/components/responses/FolderData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/FolderNotFound"
  "/folders/{id}/filters":
    post:
      tags:
        - Folders
        - Available Providers
      security:
        - BearerAuth: []
        - ProviderClientId: []
          ProviderClientSecret: []
          ProviderUserId: []
      summary: Create folder filter
      operationId: createFolderFilter
      parameters:
        - $ref: "#/components/parameters/folderIdParam"
      requestBody:
        $ref: "#/components/requestBodies/CreateFolderFilterBody"
      responses:
        "200":
          $ref: "#/components/responses/FolderFilterData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/FolderNotFound"
  "/folders/{id}/filters/{filterId}":
    patch:
      tags:
        - Folders
        - Available Providers
      security:
        - BearerAuth: []
        - ProviderClientId: []
          ProviderClientSecret: []
          ProviderUserId: []
      summary: Update folder filter
      description: Available for `creator` or `System Admin`
      operationId: updateFolderFilter
      parameters:
        - $ref: "#/components/parameters/folderIdParam"
        - $ref: "#/components/parameters/filterIdParam"
      requestBody:
        $ref: "#/components/requestBodies/EditFolderFilterBody"
      responses:
        "200":
          $ref: "#/components/responses/FolderFilterData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/FolderFilterNotFound"
    delete:
      tags:
        - Folders
        - Available Providers
      security:
        - BearerAuth: []
        - ProviderClientId: []
          ProviderClientSecret: []
          ProviderUserId: []
      summary: Delete folder filter
      description: Available for `creator` or `System Admin`
      operationId: deleteFolderFilter
      parameters:
        - $ref: "#/components/parameters/folderIdParam"
        - $ref: "#/components/parameters/filterIdParam"
      responses:
        "200":
          $ref: "#/components/responses/FolderFilterData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/FolderFilterNotFound"
  /folders/filters/search:
    post:
      tags:
        - Folders
        - Available Public
      summary: Search folders filters
      description: Return all filters values and tags that were created
      operationId: searchFoldersFilters
      requestBody:
        $ref: "#/components/requestBodies/SearchFoldersFiltersBody"
      responses:
        "200":
          $ref: "#/components/responses/SearchFolderFilterData"
        "400":
          $ref: "#/components/responses/InvalidData"
  "/folders/{id}/check-reference":
    get:
      tags:
        - Folders
        - Available Public
      summary: Check folder filters data for references
      description: Return data for create tags to make references with the folder
      operationId: checkFolderReference
      parameters:
        - $ref: "#/components/parameters/folderIdParam"
      responses:
        "200":
          $ref: "#/components/responses/CheckFolderReferenceData"
        "404":
          $ref: "#/components/responses/FolderNotFound"
  "/folders/{id}/filters/move":
    put:
      tags:
        - Folders
      security:
        - BearerAuth: []
      summary: Move folder filter
      operationId: moveFolderFilter
      parameters:
        - $ref: "#/components/parameters/folderIdParam"
      requestBody:
        $ref: "#/components/requestBodies/MoveFolderFilterBody"
      responses:
        "200":
          $ref: "#/components/responses/FolderFilterData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/FolderNotFound"
  /folders/stats:
    get:
      tags:
        - Folders
        - Available Public
      summary: Get folders stats
      operationId: getFoldersStats
      responses:
        "200":
          $ref: "#/components/responses/FoldersStatsData"
  /places:
    post:
      tags:
        - Places
      security:
        - BearerAuth: []
      summary: Create place
      description: Available for `System Admin`
      operationId: createPlace
      requestBody:
        $ref: "#/components/requestBodies/CreatePlaceBody"
      responses:
        "200":
          $ref: "#/components/responses/PlaceData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  "/places/{id}":
    get:
      tags:
        - Places
        - Available Public
      summary: Get place info
      operationId: getPlace
      parameters:
        - $ref: "#/components/parameters/placeIdParam"
      responses:
        "200":
          $ref: "#/components/responses/PlaceData"
        "404":
          $ref: "#/components/responses/PlaceNotFound"
    patch:
      tags:
        - Places
      security:
        - BearerAuth: []
      summary: Update place
      description: Available for `System Admin`
      operationId: updatePlace
      parameters:
        - $ref: "#/components/parameters/placeIdParam"
      requestBody:
        $ref: "#/components/requestBodies/EditPlaceBody"
      responses:
        "200":
          $ref: "#/components/responses/PlaceData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/PlaceNotFound"
    delete:
      tags:
        - Places
      security:
        - BearerAuth: []
      summary: Delete place
      description: Available for `System Admin`
      operationId: deletePlace
      parameters:
        - $ref: "#/components/parameters/placeIdParam"
      responses:
        "200":
          $ref: "#/components/responses/PlaceData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/PlaceNotFound"
  /places/search:
    get:
      tags:
        - Places
        - Available Public
      summary: Search places
      operationId: searchPlaces
      parameters:
        - in: query
          name: type
          description: Places type
          schema:
            type: string
            enum:
              - pick-up
              - dispatch
        - in: query
          name: searchTerm
          description: Search by name
          schema:
            type: string
        - in: query
          name: limit
          schema:
            type: number
        - in: query
          name: offset
          schema:
            type: number
        - in: query
          name: sort
          schema:
            type: array
            items:
              $ref: "#/components/schemas/SortModel"
      responses:
        "200":
          $ref: "#/components/responses/SearchPlaceData"
        "400":
          $ref: "#/components/responses/InvalidData"
  /products/search:
    post:
      tags:
        - Products
        - Available Public
      summary: Search products
      operationId: searchProducts
      requestBody:
        $ref: "#/components/requestBodies/SearchProductsBody"
      responses:
        "200":
          $ref: "#/components/responses/SearchProductData"
        "400":
          $ref: "#/components/responses/InvalidData"
  /products/search/suggester:
    post:
      tags:
        - Products
        - Available Public
      summary: Search products name suggester
      description: Returns 5 suggested names by searchTerm
      operationId: searchProductSuggester
      requestBody:
        $ref: "#/components/requestBodies/SearchProductSuggesterBody"
      responses:
        "200":
          $ref: "#/components/responses/SearchProductSuggesterData"
        "400":
          $ref: "#/components/responses/InvalidData"
  /products/search/filters:
    post:
      tags:
        - Products
        - Available Public
      summary: Search products filters
      description: Returns products available filters
      operationId: searchProductFilters
      requestBody:
        $ref: "#/components/requestBodies/SearchProductFiltersBody"
      responses:
        "200":
          $ref: "#/components/responses/SearchProductFiltersData"
        "400":
          $ref: "#/components/responses/InvalidData"
  /products:
    post:
      tags:
        - Products
        - Available Providers
      security:
        - ProviderClientId: []
          ProviderClientSecret: []
          ProviderUserId: []
      summary: Register new product
      description: Available for `providers`
      operationId: registerProduct
      requestBody:
        $ref: "#/components/requestBodies/ModifyProductBody"
      responses:
        "200":
          $ref: "#/components/responses/ProductFullData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  "/products/{id}":
    get:
      tags:
        - Products
        - Available Public
      summary: Get product with full data
      operationId: getProduct
      parameters:
        - $ref: "#/components/parameters/productIdParam"
      responses:
        "200":
          $ref: "#/components/responses/ProductFullData"
        "404":
          $ref: "#/components/responses/ProductNotFound"
    patch:
      tags:
        - Products
        - Available Providers
      security:
        - ProviderClientId: []
          ProviderClientSecret: []
          ProviderUserId: []
      summary: Update product data
      description: Available for `providers`
      operationId: updateProduct
      parameters:
        - $ref: "#/components/parameters/productIdParam"
      requestBody:
        $ref: "#/components/requestBodies/ModifyProductBody"
      responses:
        "200":
          $ref: "#/components/responses/ProductFullData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/ProductNotFound"
    delete:
      tags:
        - Products
        - Available Providers
      security:
        - ProviderClientId: []
          ProviderClientSecret: []
          ProviderUserId: []
      summary: Delete product
      description: Available for `providers`. Mark that product was deleted.
      operationId: deleteProduct
      parameters:
        - $ref: "#/components/parameters/productIdParam"
      responses:
        "200":
          $ref: "#/components/responses/ProductData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/ProductNotFound"
  "/products/{id}/block":
    post:
      tags:
        - Products
      security:
        - BearerAuth: []
      summary: Block product
      description: Available for `System Admin`
      operationId: blockProduct
      parameters:
        - $ref: "#/components/parameters/productIdParam"
      responses:
        "200":
          $ref: "#/components/responses/ProductData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/ProductNotFound"
  "/products/{id}/unblock":
    post:
      tags:
        - Products
      security:
        - BearerAuth: []
      summary: Unblock product
      description: Available for `System Admin`
      operationId: unblockProduct
      parameters:
        - $ref: "#/components/parameters/productIdParam"
      responses:
        "200":
          $ref: "#/components/responses/ProductData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/ProductNotFound"
  "/providers/{id}/profile":
    get:
      tags:
        - Providers
        - Available Public
      summary: Get provider profile info
      operationId: getProviderProfile
      parameters:
        - $ref: "#/components/parameters/providerIdParam"
      responses:
        "200":
          $ref: "#/components/responses/ProviderProfileWithDataResponse"
        "400":
          $ref: "#/components/responses/InvalidData"
        "404":
          $ref: "#/components/responses/ProviderNotFound"
  /providers/my/profile:
    get:
      tags:
        - Providers
        - Available Providers
      summary: Get provider profile info
      operationId: getMyProviderProfile
      responses:
        "200":
          $ref: "#/components/responses/ProviderProfileWithDataResponse"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/ProviderNotFound"
    put:
      tags:
        - Providers
        - Available Providers
      security:
        - ProviderClientId: []
          ProviderClientSecret: []
          ProviderUserId: []
      summary: Create or update provider profile on marketplace
      description: Available for `providers`
      operationId: updateProviderProfile
      requestBody:
        $ref: "#/components/requestBodies/UpdateProviderProfileBody"
      responses:
        "200":
          $ref: "#/components/responses/ProviderProfileResponse"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/ProviderNotFound"
  /tags/search:
    post:
      tags:
        - Tags
        - Available Public
      summary: Search tags
      operationId: searchTags
      requestBody:
        $ref: "#/components/requestBodies/SearchTagsBody"
      responses:
        "200":
          $ref: "#/components/responses/SearchTagsData"
        "400":
          $ref: "#/components/responses/InvalidData"
components:
  schemas:
    App:
      type: object
      required:
        - key
        - name
        - url
        - id
        - secret
        - createdAt
      properties:
        key:
          type: string
          description: App key
        name:
          type: string
          description: Unique name
        url:
          type: string
          description: App URL
        id:
          type: string
          format: uuid
          description: Client ID for API requests
        secret:
          type: string
          description: Client Secret for API requests
        createdAt:
          type: string
          format: date-time
          description: Activation Date
    AppPublic:
      type: object
      required:
        - key
        - name
        - url
      properties:
        key:
          type: string
          description: App key
        name:
          type: string
          description: Unique name
        url:
          type: string
          description: App URL
    User:
      type: object
      required:
        - id
        - firstName
      properties:
        id:
          type: string
          description: Wallet Address
          example: 0:c424531feb64afeb46607e0aff5609628207213308b62c123891d817389fc35b
        firstName:
          type: string
          description: First Name
        lastName:
          type: string
          description: Last Name
        middleName:
          type: string
          description: Middle Name
        avatar:
          type: string
          description: Avatar
    ErrorResponse:
      type: object
      required:
        - errorCode
        - message
      properties:
        errorCode:
          type: string
        message:
          type: string
    SortModel:
      type: object
      required:
        - field
      properties:
        field:
          type: string
          description: The field for sorting
        sort:
          type: string
          nullable: true
          enum:
            - asc
            - desc
          description: The sorting order
    SearchModel:
      type: object
      properties:
        limit:
          type: number
          description: Number of return items
        offset:
          type: number
          description: Number of skip items
        sort:
          type: array
          items:
            $ref: "#/components/schemas/SortModel"
    Provider:
      type: object
      required:
        - id
        - name
        - address
        - callback
        - blocked
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
          description: Provider ID
        name:
          type: string
          description: Provider Name
        address:
          type: string
          description: Provider URL Address
        callback:
          type: string
          description: Provider Callback Address
        blocked:
          type: boolean
          description: If `true` provider is blocked
        createdAt:
          type: string
          format: date-time
          description: Creation Date
        updatedAt:
          type: string
          format: date-time
          description: Last Updating Date
    ProviderWithSecret:
      type: object
      required:
        - id
        - secret
        - name
        - address
        - callback
        - blocked
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
          description: Provider ID
        secret:
          type: string
          description: Provider Secret for API requests
        name:
          type: string
          description: Provider Name
        address:
          type: string
          description: Provider URL Address
        callback:
          type: string
          description: Provider Callback Address
        createdAt:
          type: string
          format: date-time
          description: Creation Date
        updatedAt:
          type: string
          format: date-time
          description: Last Updating Date
    ActivityType:
      type: string
      description: Activity Type
      enum:
        - tagCreated
        - tagUpdated
        - tagDeleted
        - folderCreated
        - folderUpdated
        - folderMoved
        - folderDeleted
        - folderFilterCreated
        - folderFilterUpdated
        - folderFilterMoved
        - folderFilterDeleted
    ActivityLog:
      type: object
      required:
        - id
        - type
        - userId
        - artefactId
        - data
      properties:
        id:
          type: string
          format: uuid
          description: Artefact ID
        type:
          $ref: "#/components/schemas/ActivityType"
        userId:
          type: string
          description: Wallet Address
          example: 0:c424531feb64afeb46607e0aff5609628207213308b62c123891d817389fc35b
        artefactId:
          type: string
          format: uuid
          description: Artefact ID
        providerId:
          type: string
          format: uuid
          description: Provider ID
        data:
          type: object
          description: Activity Data depends on type
        createdAt:
          type: string
          format: date-time
          description: Creation Date
    AdminAccess:
      type: object
      required:
        - wallet
        - createdAt
      properties:
        wallet:
          type: string
          description: Wallet Address
          example: 0:c424531feb64afeb46607e0aff5609628207213308b62c123891d817389fc35b
        createdAt:
          type: string
          format: date-time
          description: Creation Date
        userData:
          $ref: "#/components/schemas/User"
    DictionaryWord:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          format: uuid
          description: Word ID
        name:
          type: string
          description: Word name
        shortName:
          type: string
          description: Word short name
        description:
          type: string
          description: Word description
        unit:
          type: string
          description: Word unit
        systemUnit:
          type: string
          description: System unit key
        coeff:
          type: number
          description: Coeff for mapping systemUnit with unit
        photo:
          type: string
          description: Word main photo
        video:
          type: string
          description: Word main video
    FileData:
      type: object
      required:
        - id
        - name
        - mimeType
        - size
        - createdBy
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
          description: File ID
        name:
          type: string
          description: File name
        mimeType:
          type: string
          description: File mime type
        size:
          type: number
          description: File size in bytes
        createdBy:
          type: string
          description: Wallet Address
          example: 0:c424531feb64afeb46607e0aff5609628207213308b62c123891d817389fc35b
        providerId:
          type: string
          format: uuid
          description: Provider ID
        createdAt:
          type: string
          format: date-time
          description: Creation Date
        updatedAt:
          type: string
          format: date-time
          description: Last Updating Date
    Folder:
      type: object
      required:
        - id
        - name
        - createdBy
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
          description: Folder ID
        parentId:
          type: string
          nullable: true
          format: uuid
          description: Folder parent ID
        name:
          type: string
          description: Folder name
        photo:
          type: string
          description: Folder photo
        order:
          type: number
          description: Folder order
        isPublic:
          type: boolean
          description: If `true` - shows everyone, if `null` - on review to make public,
            if `false` - shows only for creator
        createdBy:
          type: string
          description: Wallet Address
          example: 0:c424531feb64afeb46607e0aff5609628207213308b62c123891d817389fc35b
        providerId:
          type: string
          format: uuid
          description: Provider ID
        createdAt:
          type: string
          format: date-time
          description: Creation Date
        updatedAt:
          type: string
          format: date-time
          description: Last Updating Date
    FolderFormulaOperator:
      type: string
      description: Formula operator
      enum:
        - equal
        - not_equal
    FolderFilter:
      type: object
      required:
        - id
        - folderId
        - field
        - operator
        - createdBy
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
          description: Filter ID
        folder:
          type: string
          format: uuid
          description: Folder ID
        field:
          type: string
          description: Formula attribute
        fieldData:
          $ref: "#/components/schemas/DictionaryWord"
        operator:
          $ref: "#/components/schemas/FolderFormulaOperator"
        value:
          type: string
          description: Formula value
        valueData:
          $ref: "#/components/schemas/DictionaryWord"
        unit:
          type: string
          description: Formula unit
        order:
          type: number
          description: Filter order
        createdBy:
          type: string
          description: Wallet Address
          example: 0:c424531feb64afeb46607e0aff5609628207213308b62c123891d817389fc35b
        providerId:
          type: string
          format: uuid
          description: Provider ID
        createdAt:
          type: string
          format: date-time
          description: Creation Date
        updatedAt:
          type: string
          format: date-time
          description: Last Updating Date
    FolderTreeItem:
      type: object
      required:
        - id
        - name
        - createdBy
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
          description: Folder ID
        parentId:
          type: string
          nullable: true
          format: uuid
          description: Folder parent ID
        name:
          type: string
          description: Folder name
        photo:
          type: string
          description: Folder photo
        order:
          type: number
          description: Folder order
        isPublic:
          type: boolean
          description: If `true` - shows everyone, if `null` - on review to make public,
            if `false` - shows only for creator
        createdBy:
          type: string
          description: Wallet Address
          example: 0:c424531feb64afeb46607e0aff5609628207213308b62c123891d817389fc35b
        providerId:
          type: string
          format: uuid
          description: Provider ID
        createdAt:
          type: string
          format: date-time
          description: Creation Date
        updatedAt:
          type: string
          format: date-time
          description: Last Updating Date
        children:
          type: array
          items:
            $ref: "#/components/schemas/FolderTreeItem"
    FolderFullData:
      type: object
      required:
        - id
        - name
        - createdBy
        - createdAt
        - updatedAt
        - filters
      properties:
        id:
          type: string
          format: uuid
          description: Folder ID
        parentId:
          type: string
          nullable: true
          format: uuid
          description: Folder parent ID
        name:
          type: string
          description: Folder name
        photo:
          type: string
          description: Folder photo
        order:
          type: number
          description: Folder order
        isPublic:
          type: boolean
          description: If `true` - shows everyone, if `null` - on review to make public,
            if `false` - shows only for creator
        createdBy:
          type: string
          description: Wallet Address
          example: 0:c424531feb64afeb46607e0aff5609628207213308b62c123891d817389fc35b
        providerId:
          type: string
          format: uuid
          description: Provider ID
        createdAt:
          type: string
          format: date-time
          description: Creation Date
        updatedAt:
          type: string
          format: date-time
          description: Last Updating Date
        createdByData:
          $ref: "#/components/schemas/User"
        filters:
          type: array
          items:
            $ref: "#/components/schemas/FolderFilter"
    Place:
      type: object
      required:
        - id
        - type
        - name
        - lat
        - long
        - createdBy
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
          description: Place ID
        type:
          type: string
          enum:
            - pick-up
            - dispatch
          description: Place Type
        name:
          type: string
          description: Place name
        description:
          type: string
          description: Place description
        photos:
          type: array
          items:
            type: string
          description: Place photos
        workHours:
          $ref: "#/components/schemas/PlaceWorkHours"
          description: Place working hours
        color:
          type: string
          description: Place color showing on map
        lat:
          type: number
          description: Place latitude coordinate
        long:
          type: number
          description: Place longitude coordinate
        createdBy:
          type: string
          description: Wallet Address
          example: 0:c424531feb64afeb46607e0aff5609628207213308b62c123891d817389fc35b
        createdAt:
          type: string
          format: date-time
          description: Creation Date
        updatedAt:
          type: string
          format: date-time
          description: Last Updating Date
        deletedAt:
          type: string
          format: date-time
          nullable: true
          description: Deleted Date
    PlaceWorkHours:
      type: object
      required:
        - mon
        - tue
        - wed
        - thu
        - fri
        - sat
        - sun
      properties:
        mon:
          type: array
          items:
            type: string
          example:
            - HH:MM
            - HH:MM
        tue:
          type: array
          items:
            type: string
          example:
            - HH:MM
            - HH:MM
        wed:
          type: array
          items:
            type: string
          example:
            - HH:MM
            - HH:MM
        thu:
          type: array
          items:
            type: string
          example:
            - HH:MM
            - HH:MM
        fri:
          type: array
          items:
            type: string
          example:
            - HH:MM
            - HH:MM
        sat:
          type: array
          items:
            type: string
          example:
            - HH:MM
            - HH:MM
        sun:
          type: array
          items:
            type: string
          example:
            - HH:MM
            - HH:MM
    Product:
      type: object
      required:
        - id
        - externalId
        - name
        - description
        - photos
        - videos
        - providerId
        - createdBy
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
          description: Product ID
        externalId:
          type: string
          format: uuid
          description: Product External ID form Provider
        name:
          type: string
          description: Product name
        description:
          type: string
          description: Product description
        photos:
          type: array
          items:
            type: string
          description: Product photos
        videos:
          type: array
          items:
            type: string
          description: Product videos
        createdBy:
          type: string
          description: Wallet Address
        providerId:
          type: string
          format: uuid
          description: Provider ID
        providerName:
          type: string
          description: Provider Name
        isBlocked:
          type: boolean
        createdAt:
          type: string
          format: date-time
          description: Creation Date
        updatedAt:
          type: string
          format: date-time
          description: Last Updating Date
        deletedAt:
          type: string
          format: date-time
          description: Delete Date
    ProductFull:
      type: object
      required:
        - id
        - externalId
        - name
        - description
        - photos
        - videos
        - providerId
        - createdBy
        - createdAt
        - updatedAt
        - folders
        - createdByData
        - providerData
        - tagsData
      properties:
        id:
          type: string
          format: uuid
          description: Product ID
        externalId:
          type: string
          format: uuid
          description: Product External ID form Provider
        name:
          type: string
          description: Product name
        description:
          type: string
          description: Product description
        photos:
          type: array
          items:
            type: string
          description: Product photos
        videos:
          type: array
          items:
            type: string
          description: Product videos
        createdBy:
          type: string
          description: Wallet Address
        providerId:
          type: string
          format: uuid
          description: Provider ID
        providerName:
          type: string
          description: Provider Name
        isBlocked:
          type: boolean
        createdAt:
          type: string
          format: date-time
          description: Creation Date
        updatedAt:
          type: string
          format: date-time
          description: Last Updating Date
        deletedAt:
          type: string
          format: date-time
          description: Delete Date
        folders:
          type: array
          description: Folders to that product linked
          items:
            type: string
            format: uuid
        createdByData:
          $ref: "#/components/schemas/User"
        providerData:
          type: object
          required:
            - id
            - name
          properties:
            id:
              type: string
              description: Provider ID
              format: uuid
            name:
              type: string
              description: Provider name
        tagsData:
          type: array
          items:
            $ref: "#/components/schemas/Tag"
    ProductFilter:
      type: object
      required:
        - field
        - operator
        - values
      properties:
        field:
          type: string
        operator:
          type: string
          enum:
            - equal
            - between
        values:
          type: array
          items:
            type: string
    ProductFilterOption:
      type: object
      required:
        - field
        - values
      properties:
        field:
          type: string
        fieldData:
          $ref: "#/components/schemas/DictionaryWord"
        values:
          type: array
          items:
            type: string
        valuesData:
          type: array
          items:
            $ref: "#/components/schemas/DictionaryWord"
            nullable: true
    ProviderProfile:
      type: object
      required:
        - id
        - name
        - createdBy
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
          description: Provider Profile ID (same as Provider ID)
        name:
          type: string
          description: Provider trade name shows in marketplace
        content:
          type: string
          description: Provider Profile context shows
        photos:
          type: array
          items:
            type: string
          description: Provider Profile photos
        video:
          type: string
          description: Provider Profile intro video
        dispatchPlaceId:
          type: string
          format: uuid
          description: Dispatch place ID
        locationExternalId:
          type: string
          description: External ID of place where provider is mentioned
        locationLat:
          type: number
          description: Place latitude coordinate
        locationLong:
          type: number
          description: Place longitude coordinate
        createdBy:
          type: string
          description: Wallet Address
          example: 0:c424531feb64afeb46607e0aff5609628207213308b62c123891d817389fc35b
        createdAt:
          type: string
          format: date-time
          description: Creation Date
        updatedAt:
          type: string
          format: date-time
          description: Last Updating Date
        deletedAt:
          type: string
          format: date-time
          nullable: true
          description: Deleted Date
    ProviderProfileWithData:
      type: object
      required:
        - id
        - name
        - createdBy
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
          description: Provider Profile ID (same as Provider ID)
        name:
          type: string
          description: Provider trade name shows in marketplace
        content:
          type: string
          description: Provider Profile context shows
        photos:
          type: array
          items:
            type: string
          description: Provider Profile photos
        video:
          type: string
          description: Provider Profile intro video
        dispatchPlaceId:
          type: string
          format: uuid
          description: Dispatch place ID
        locationExternalId:
          type: string
          description: External ID of place where provider is mentioned
        locationLat:
          type: number
          description: Place latitude coordinate
        locationLong:
          type: number
          description: Place longitude coordinate
        createdBy:
          type: string
          description: Wallet Address
          example: 0:c424531feb64afeb46607e0aff5609628207213308b62c123891d817389fc35b
        createdAt:
          type: string
          format: date-time
          description: Creation Date
        updatedAt:
          type: string
          format: date-time
          description: Last Updating Date
        deletedAt:
          type: string
          format: date-time
          nullable: true
          description: Deleted Date
        produceCategories:
          type: array
          items:
            type: string
          description: 2d level catalogs in marketplace based on products
        deployProducts:
          type: number
          description: Number of products that was created on marketplace including deleted
        completedOrders:
          type: number
          description: Number of completed orders
        activeOrders:
          type: number
          description: Number of active orders
        totalOrders:
          type: number
          description: Number of total orders
    Tag:
      type: object
      required:
        - id
        - field
        - createdBy
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
          description: Tag ID
        field:
          type: string
          description: Tag name
        fieldData:
          $ref: "#/components/schemas/DictionaryWord"
        value:
          type: string
          description: Tag value
        valueData:
          $ref: "#/components/schemas/DictionaryWord"
        createdBy:
          type: string
          description: Wallet Address
          example: 0:c424531feb64afeb46607e0aff5609628207213308b62c123891d817389fc35b
        providerId:
          type: string
          format: uuid
          description: Provider ID
        createdAt:
          type: string
          format: date-time
          description: Creation Date
        updatedAt:
          type: string
          format: date-time
          description: Last Updating Date
  parameters:
    appNameParam:
      in: path
      name: name
      description: Unique name
      required: true
      schema:
        type: string
    providerIdParam:
      in: path
      name: id
      description: Provider ID
      required: true
      schema:
        type: string
        format: uuid
    walletParam:
      in: path
      name: wallet
      description: Wallet Address
      required: true
      schema:
        type: string
    fileIdParam:
      in: path
      name: id
      description: File ID
      required: true
      schema:
        type: string
        format: uuid
    folderIdParam:
      in: path
      name: id
      description: Folder ID
      required: true
      schema:
        type: string
        format: uuid
    filterIdParam:
      in: path
      name: filterId
      description: Filter ID
      required: true
      schema:
        type: string
        format: uuid
    placeIdParam:
      in: path
      name: id
      description: Place ID
      required: true
      schema:
        type: string
        format: uuid
    productIdParam:
      in: path
      name: id
      description: Product ID
      required: true
      schema:
        type: string
        format: uuid
    tagIdParam:
      in: path
      name: id
      description: Tag ID
      required: true
      schema:
        type: string
        format: uuid
  requestBodies:
    ActivateAppBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - key
              - name
              - address
            properties:
              key:
                type: string
                description: App key
              name:
                type: string
                description: Service Unique Name
              address:
                type: string
                description: Service URL Address
    EmptyBody:
      content:
        application/json:
          schema:
            type: object
    SearchProvidersBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              isBlocked:
                type: boolean
                description: Filter by blocked status
              limit:
                type: number
                description: Number of return items
              offset:
                type: number
                description: Number of skip items
              sort:
                type: array
                items:
                  $ref: "#/components/schemas/SortModel"
    RegisterProviderRequestBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - name
              - address
              - callback
              - wallet
            properties:
              name:
                type: string
                description: Provider Name
              address:
                type: string
                description: Provider URL Address
              callback:
                type: string
                description: Provider Callback Address
              wallet:
                type: string
                description: TON Address who making request
    ProviderRequestBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - name
              - address
              - callback
            properties:
              name:
                type: string
                description: Provider Name
              address:
                type: string
                description: Provider URL Address
              callback:
                type: string
                description: Provider Callback Address
    SearchActivitiesBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              artefactId:
                type: string
                format: uuid
                description: Artefact ID
              providerId:
                type: string
                format: uuid
                description: Provider ID
              types:
                type: array
                items:
                  $ref: "#/components/schemas/ActivityType"
              limit:
                type: number
                description: Number of return items
              offset:
                type: number
                description: Number of skip items
              sort:
                type: array
                items:
                  $ref: "#/components/schemas/SortModel"
    CreateAdminAccessBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - wallet
            properties:
              wallet:
                type: string
                description: Wallet Address
                example: 0:c424531feb64afeb46607e0aff5609628207213308b62c123891d817389fc35b
    UploadFileBody:
      content:
        multipart/form-data:
          schema:
            type: object
            properties:
              id:
                type: string
                format: uuid
                description: If set and file exists then file content will be overwritten
              externalId:
                type: string
                format: uuid
                description: External file ID
              file:
                type: string
                format: binary
    CreateFolderBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
                description: Folder name
              photo:
                type: string
                description: Folder photo
              parentId:
                type: string
                nullable: true
                format: uuid
                description: Folder parent ID
              order:
                type: number
                description: Folder order
    EditFolderBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                description: Folder name
              photo:
                type: string
                description: Folder photo
    MoveFolderBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - id
            properties:
              id:
                type: string
                format: uuid
                description: Folder ID
              parentId:
                type: string
                nullable: true
                format: uuid
                description: Folder patent ID
              afterId:
                type: string
                format: uuid
                description: Should move after folder ID
              beforeId:
                type: string
                format: uuid
                description: Should move before folder ID
    MakePublicFolderBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              shouldCancel:
                type: boolean
                description: Available for `System Admin` and used to cancel user public request
    CreateFolderFilterBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - field
              - operator
              - value
            properties:
              field:
                type: string
                description: Formula attribute
              operator:
                $ref: "#/components/schemas/FolderFormulaOperator"
              value:
                type: string
                description: Formula value
              unit:
                type: string
                description: Formula unit
              order:
                type: number
                description: Filter order
    EditFolderFilterBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              field:
                type: string
                description: Formula attribute
              operator:
                $ref: "#/components/schemas/FolderFormulaOperator"
              value:
                type: string
                description: Formula value
              unit:
                type: string
                description: Formula unit
    SearchFoldersFiltersBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              searchTerm:
                type: string
                description: Search term
              limit:
                type: number
                description: Number of return items
              offset:
                type: number
                description: Number of skip items
              sort:
                type: array
                items:
                  $ref: "#/components/schemas/SortModel"
    MoveFolderFilterBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - id
              - filterId
            properties:
              filterId:
                type: string
                format: uuid
                description: Filter ID
              afterId:
                type: string
                format: uuid
                description: Should move after folder ID
              beforeId:
                type: string
                format: uuid
                description: Should move before folder ID
    CreatePlaceBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - name
              - type
              - lat
              - long
            properties:
              type:
                type: string
                enum:
                  - pick-up
                  - dispatch
                description: Place Type
              name:
                type: string
                description: Place name
              description:
                type: string
                description: Place description
              photos:
                type: array
                items:
                  type: string
                description: Place photos
              workHours:
                $ref: "#/components/schemas/PlaceWorkHours"
                description: Place working hours
              color:
                type: string
                description: Place color showing on map
              lat:
                type: number
                description: Place latitude coordinate
              long:
                type: number
                description: Place longitude coordinate
    EditPlaceBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                description: Place name
              description:
                type: string
                description: Place description
              photos:
                type: array
                items:
                  type: string
                description: Place photos
              workHours:
                $ref: "#/components/schemas/PlaceWorkHours"
                description: Place working hours
              color:
                type: string
                description: Place color showing on map
              lat:
                type: number
                description: Place latitude coordinate
              long:
                type: number
                description: Place longitude coordinate
    SearchProductsBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              searchTerm:
                type: string
                description: Search term
              folders:
                type: array
                items:
                  type: string
                  format: uuid
              limit:
                type: number
                description: Number of return items
              offset:
                type: number
                description: Number of skip items
              sort:
                type: array
                items:
                  $ref: "#/components/schemas/SortModel"
              filters:
                type: array
                items:
                  $ref: "#/components/schemas/ProductFilter"
    SearchProductSuggesterBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              searchTerm:
                type: string
                description: Search term
    SearchProductFiltersBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              folders:
                type: array
                items:
                  type: string
                  format: uuid
    ModifyProductBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              externalId:
                type: string
                format: uuid
                description: Product External ID form Provider
              name:
                type: string
                description: Product name
              description:
                type: string
                description: Product description
              photos:
                type: array
                items:
                  type: string
                description: Product photos
              videos:
                type: array
                items:
                  type: string
                description: Product videos
              tags:
                type: array
                items:
                  type: object
                  properties:
                    externalId:
                      type: string
                      format: uuid
                      description: Tag External ID form Provider
                    field:
                      type: string
                    value:
                      type: string
    UpdateProviderProfileBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
                description: Provider trade name shows in marketplace
              content:
                type: string
                description: Provider Profile context shows
              photos:
                type: array
                items:
                  type: string
                description: Provider Profile photos
              video:
                type: string
                description: Provider Profile intro video
              dispatchPlaceId:
                type: string
                format: uuid
                description: Dispatch place ID
              locationExternalId:
                type: string
                description: External ID of place where provider is mentioned
              locationLat:
                type: number
                description: Place latitude coordinate
              locationLong:
                type: number
                description: Place longitude coordinate
    SearchTagsBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              searchTerm:
                type: string
                description: Search term
              ids:
                type: array
                description: Tag ids
                items:
                  type: string
                  format: uuid
              fields:
                type: array
                description: Tag field
                items:
                  type: string
              values:
                type: array
                description: Tag value
                items:
                  type: string
              limit:
                type: number
                description: Number of return items
              offset:
                type: number
                description: Number of skip items
              sort:
                type: array
                items:
                  $ref: "#/components/schemas/SortModel"
  responses:
    AppData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/App"
    AppListData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/App"
    AppPublicData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/AppPublic"
    AppNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: app:404
            message: App not found
    AppRegistrationError:
      description: System error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: app:400-register
            message: Failure on app registration
    UserData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/User"
    UserNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: user:404
            message: User does not exist
    InvalidData:
      description: Invalid request data
    Unauthorized:
      description: Unauthorized
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: api:403
            message: You don't have access to this method
    ProviderData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Provider"
    ProviderWithSecretData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProviderWithSecret"
    SearchProvidersData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - total
              - items
            properties:
              total:
                type: number
              items:
                type: array
                items:
                  $ref: "#/components/schemas/Provider"
    ProviderNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: provider:404
            message: Provider not found
    SearchActivitiesData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - total
              - items
            properties:
              total:
                type: number
              items:
                type: array
                items:
                  $ref: "#/components/schemas/ActivityLog"
    CheckUserAccess:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - isAdmin
              - isWalletAdmin
            properties:
              isAdmin:
                type: boolean
                description: If `true` user has admin access
              isWalletAdmin:
                type: boolean
                description: If `true` user has wallet admin access
    SearchAdminAccess:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - total
              - items
            properties:
              total:
                type: number
              items:
                type: array
                items:
                  $ref: "#/components/schemas/AdminAccess"
    AdminAccessData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AdminAccess"
    AdminAccessExist:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: admin-access:400-exist
            message: User has admin access
    AdminAccessNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: admin-access:404
            message: User has no admin access
    FileBinary:
      description: Successful operation
      content:
        text/plain:
          schema:
            type: string
            format: binary
    FileData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/FileData"
    FileNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: file:404
            message: File not exist
    FolderData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Folder"
    FolderFullData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/FolderFullData"
    FolderTreeData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/FolderTreeItem"
    FolderNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: folder:404
            message: Folder not found
    ParentFolderNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: folder:404
            message: Parent folder not found
    FolderIsPublic:
      description: Folder is public
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: folder:400-public
            message: Folder is public
    FolderFilterData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/FolderFilter"
    FolderFilterNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            FolderNotFound:
              value:
                errorCode: folder:404
                message: Folder not found
            FilterNotFound:
              value:
                errorCode: folder:404-filter
                message: Folder filter not found
    SearchFolderFilterData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - total
              - items
            properties:
              total:
                type: number
              items:
                type: string
    CheckFolderReferenceData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - canCreate
              - addData
              - missedData
            properties:
              canCreate:
                type: boolean
              addData:
                type: array
                items:
                  type: object
                  required:
                    - field
                    - value
                  properties:
                    field:
                      type: string
                    fieldData:
                      $ref: "#/components/schemas/DictionaryWord"
                    value:
                      type: string
                    valueData:
                      $ref: "#/components/schemas/DictionaryWord"
              missedData:
                type: array
                items:
                  type: object
                  required:
                    - field
                    - options
                  properties:
                    field:
                      type: string
                    fieldData:
                      $ref: "#/components/schemas/DictionaryWord"
                    options:
                      type: array
                      items:
                        type: object
                        required:
                          - operator
                          - value
                        properties:
                          operator:
                            $ref: "#/components/schemas/FolderFormulaOperator"
                          value:
                            type: string
                          valueData:
                            $ref: "#/components/schemas/DictionaryWord"
    FoldersStatsData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            properties: null
            additionalProperties:
              type: object
              properties:
                productsCount:
                  type: number
    PlaceData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Place"
    SearchPlaceData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - total
              - items
            properties:
              total:
                type: number
              items:
                type: array
                items:
                  $ref: "#/components/schemas/Place"
    PlaceNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: place:404
            message: Place not found
    ProductData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Product"
    ProductFullData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProductFull"
    SearchProductData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - total
              - items
            properties:
              total:
                type: number
              items:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
    SearchProductSuggesterData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: array
            items:
              type: string
    SearchProductFiltersData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/ProductFilterOption"
    ProductNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: product:404
            message: Product not found
    ProviderProfileResponse:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProviderProfile"
    ProviderProfileWithDataResponse:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProviderProfileWithData"
    SearchTagsData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - total
              - items
            properties:
              total:
                type: number
              items:
                type: array
                items:
                  $ref: "#/components/schemas/Tag"
    TagData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Tag"
    TagNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: tag:404
            message: Tag not found
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Authorization using Auth routes
    ProviderClientId:
      type: apiKey
      name: client-id
      in: header
      description: Authorization for providers requests
    ProviderClientSecret:
      type: apiKey
      name: client-secret
      in: header
      description: Authorization for providers requests
    ProviderUserId:
      type: apiKey
      name: user-id
      in: header
      description: Authorization for providers requests
