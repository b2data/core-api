openapi: 3.0.0
info:
  title: REST API for B2Dictionary
  version: 1.0.0
servers:
  - url: https://dictionary.b2p.space/api
  - url: https://bets.dictionary.b2p.space/api
tags:
  - name: Auth
  - name: Activities
  - name: Admin Access
  - name: Complaints
  - name: Files
  - name: Folders
  - name: API Clients
  - name: Tags
  - name: Units
  - name: Users
  - name: Words
  - name: Available Public
    description: This methods does not require authorization
paths:
  /auth/start:
    post:
      tags:
        - Auth
        - Available Public
      summary: Start authentication process
      operationId: startAuth
      requestBody:
        $ref: "#/components/requestBodies/EmptyBody"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - proof
                properties:
                  proof:
                    type: string
  /auth/verify:
    post:
      tags:
        - Auth
        - Available Public
      summary: Verify authentication wallet
      operationId: verifyAuth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - proof
                - account
              properties:
                spaceId:
                  type: string
                  description: Selected Space ID
                proof:
                  type: object
                  required:
                    - payload
                    - signature
                    - timestamp
                    - domain
                  properties:
                    payload:
                      type: string
                      description: TON Connect payload
                    signature:
                      type: string
                      description: TON Connect signature
                    timestamp:
                      type: number
                      description: Timestamp of authentication
                    domain:
                      type: object
                      required:
                        - lengthBytes
                        - value
                      properties:
                        lengthBytes:
                          type: number
                        value:
                          type: string
                account:
                  type: object
                  required:
                    - address
                    - network
                    - publicKey
                    - walletStateInit
                  properties:
                    address:
                      type: string
                      description: Wallet Address
                      example: 0:c424531feb64afeb46607e0aff5609628207213308b62c123891d817389fc35b
                    network:
                      type: string
                      description: Blockchain chain
                    publicKey:
                      type: string
                      description: Wallet Public Key
                    walletStateInit:
                      type: string
                      description: Wallet Public Key
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - accessToken
                  - refreshToken
                  - profile
                properties:
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
                  profile:
                    $ref: "#/components/schemas/User"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                errorCode: auth:404
                message: The proof has not found
  /auth/refresh:
    post:
      tags:
        - Auth
      security:
        - BearerAuth: []
      summary: Refresh Access Token by Refresh token
      operationId: refreshToken
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - accessToken
                - refreshToken
              properties:
                spaceId:
                  type: string
                  description: Selected Space ID
                accessToken:
                  type: string
                refreshToken:
                  type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - accessToken
                  - refreshToken
                  - profile
                properties:
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
                  profile:
                    $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/UserNotFound"
  /auth/profile:
    get:
      tags:
        - Auth
      security:
        - BearerAuth: []
      summary: Get Profile
      operationId: getProfile
      responses:
        "200":
          $ref: "#/components/responses/UserFullData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/UserNotFound"
    patch:
      tags:
        - Auth
      security:
        - BearerAuth: []
      summary: Update Profile
      operationId: updateProfile
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  description: First Name
                lastName:
                  type: string
                  description: Last Name
                middleName:
                  type: string
                  description: Middle Name
                avatar:
                  type: string
                  description: Avatar
      responses:
        "200":
          $ref: "#/components/responses/UserFullData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/UserNotFound"
  /oauth/token:
    post:
      tags:
        - OAuth Client
        - Available Public
      summary: Exchange credentials, device_code, refresh_token for new tokens
      operationId: exchangeToken
      requestBody:
        $ref: "#/components/requestBodies/ApiClientExchangeTokenBody"
      responses:
        "200":
          $ref: "#/components/responses/ApiClientExchangeTokenData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/ApiClientNotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
  /oauth/device/code:
    post:
      tags:
        - OAuth Client
        - Available Public
      summary: Get device code for device authorization
      operationId: getDeviceCode
      requestBody:
        $ref: "#/components/requestBodies/ApiClientGetDeviceCodeBody"
      responses:
        "200":
          $ref: "#/components/responses/ApiClientGetDeviceCodeData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "404":
          $ref: "#/components/responses/ApiClientNotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
  /oauth/device/verification:
    post:
      tags:
        - OAuth Client
        - Available Public
      summary: Verify device code and get access token
      operationId: verifyDeviceCode
      responses:
        "501":
          $ref: "#/components/responses/NotImplemented"
  /oauth/device/authorize:
    get:
      tags:
        - OAuth Client
        - Available Public
      summary: Authorize device code
      operationId: authorizeDeviceCode
      responses:
        "501":
          $ref: "#/components/responses/NotImplemented"
  /oauth/introspect:
    get:
      tags:
        - OAuth Client
        - Available Public
      summary: Check token validity and info
      operationId: introspectToken
      responses:
        "200":
          $ref: "#/components/responses/ApiClientIntrospectData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/ApiClientNotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
  /oauth/info:
    get:
      tags:
        - OAuth Client
      security:
        - ApiClientAuth: []
      summary: Get OAuth client info
      operationId: getClientInfo
      responses:
        "200":
          $ref: "#/components/responses/ApiClientWithSecretData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/ApiClientNotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
  /oauth/revoke:
    post:
      tags:
        - OAuth Client
      security:
        - ApiClientAuth: []
      summary: Revoke access or refresh token
      operationId: revokeToken
      requestBody:
        $ref: "#/components/requestBodies/ApiClientRevokeTokenBody"
      responses:
        "200":
          $ref: "#/components/responses/ApiClientRevokeTokenData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "429":
          $ref: "#/components/responses/TooManyRequests"
  /oauth/logout:
    post:
      tags:
        - OAuth Client
      security:
        - ApiClientAuth: []
      summary: Logout and revoke tokens
      operationId: logoutToken
      requestBody:
        $ref: "#/components/requestBodies/ApiClientRevokeTokenBody"
      responses:
        "200":
          $ref: "#/components/responses/ApiClientRevokeTokenData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "429":
          $ref: "#/components/responses/TooManyRequests"
  /clients/search:
    post:
      tags:
        - API Clients
      security:
        - BearerAuth: []
      summary: Search API Clients
      operationId: searchApiClients
      requestBody:
        $ref: "#/components/requestBodies/ApiClientsSearchBody"
      responses:
        "200":
          $ref: "#/components/responses/ApiClientsListData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "429":
          $ref: "#/components/responses/TooManyRequests"
  /clients/register:
    post:
      tags:
        - API Clients
      security:
        - BearerAuth: []
      summary: Register a new API Client
      operationId: registerApiClient
      requestBody:
        $ref: "#/components/requestBodies/ApiClientRegisterBody"
      responses:
        "201":
          $ref: "#/components/responses/ApiClientWithSecretData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "429":
          $ref: "#/components/responses/TooManyRequests"
  "/clients/{id}":
    get:
      tags:
        - API Clients
      security:
        - BearerAuth: []
      summary: Get API client details
      operationId: getApiClient
      parameters:
        - $ref: "#/components/parameters/apiClientIdParam"
      responses:
        "200":
          $ref: "#/components/responses/ApiClientWithSecretData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/ApiClientNotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
    patch:
      tags:
        - API Clients
      security:
        - BearerAuth: []
      summary: Update API client
      operationId: updateApiClient
      parameters:
        - $ref: "#/components/parameters/apiClientIdParam"
      requestBody:
        $ref: "#/components/requestBodies/ApiClientModifyBody"
      responses:
        "200":
          $ref: "#/components/responses/ApiClientWithSecretData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/ApiClientNotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
    delete:
      tags:
        - API Clients
      security:
        - BearerAuth: []
      summary: Delete API client
      operationId: deleteApiClient
      parameters:
        - $ref: "#/components/parameters/apiClientIdParam"
      responses:
        "200":
          $ref: "#/components/responses/ApiClientData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/ApiClientNotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
  "/clients/{id}/revoke":
    post:
      tags:
        - API Clients
      security:
        - BearerAuth: []
      summary: Revoke API Client tokens
      parameters:
        - $ref: "#/components/parameters/apiClientIdParam"
      operationId: revokeApiClientToken
      requestBody:
        $ref: "#/components/requestBodies/ApiClientRevokeTokenBody"
      responses:
        "200":
          $ref: "#/components/responses/ApiClientRevokeTokenData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/ApiClientNotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
  "/clients/{id}/block":
    post:
      tags:
        - API Clients
      security:
        - BearerAuth: []
      summary: Block API Client
      parameters:
        - $ref: "#/components/parameters/apiClientIdParam"
      operationId: blockApiClient
      responses:
        "200":
          $ref: "#/components/responses/ApiClientData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/ApiClientNotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
  "/clients/{id}/unblock":
    post:
      tags:
        - API Clients
      security:
        - BearerAuth: []
      summary: Unblock API Client
      parameters:
        - $ref: "#/components/parameters/apiClientIdParam"
      operationId: unblockApiClient
      responses:
        "200":
          $ref: "#/components/responses/ApiClientData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/ApiClientNotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
  /activities/search:
    post:
      tags:
        - Activities
      security:
        - BearerAuth: []
        - ApiClientAuth: []
      summary: Search activities
      operationId: searchActivities
      requestBody:
        $ref: "#/components/requestBodies/SearchActivitiesBody"
      responses:
        "200":
          $ref: "#/components/responses/SearchActivitiesData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "429":
          $ref: "#/components/responses/TooManyRequests"
  /admin-access/check:
    get:
      tags:
        - Admin Access
      security:
        - BearerAuth: []
      summary: Check Admin Access
      operationId: checkAdminAccess
      responses:
        "200":
          $ref: "#/components/responses/CheckUserAccess"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "429":
          $ref: "#/components/responses/TooManyRequests"
  /admin-access/search:
    post:
      tags:
        - Admin Access
      security:
        - BearerAuth: []
      summary: Search System Admins
      description: Required `Wallet Admin` access
      operationId: searchAdminAccess
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchModel"
      responses:
        "200":
          $ref: "#/components/responses/SearchAdminAccess"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "429":
          $ref: "#/components/responses/TooManyRequests"
  /admin-access:
    post:
      tags:
        - Admin Access
      security:
        - BearerAuth: []
      summary: Add System Admin
      description: Required `Wallet Admin` access
      operationId: addAdminAccess
      requestBody:
        $ref: "#/components/requestBodies/CreateAdminAccessBody"
      responses:
        "200":
          $ref: "#/components/responses/AdminAccessData"
        "400":
          $ref: "#/components/responses/AdminAccessExist"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "429":
          $ref: "#/components/responses/TooManyRequests"
  "/admin-access/{wallet}":
    delete:
      tags:
        - Admin Access
      security:
        - BearerAuth: []
      summary: Delete System Admin
      description: Required `Wallet Admin` access
      operationId: deleteAdminAccess
      parameters:
        - $ref: "#/components/parameters/walletParam"
      responses:
        "200":
          $ref: "#/components/responses/AdminAccessData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/AdminAccessNotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
  /complaints/search:
    post:
      tags:
        - Complaints
      security:
        - BearerAuth: []
      summary: Search complaints
      description: Required `System Admin` access
      operationId: searchComplaints
      requestBody:
        $ref: "#/components/requestBodies/SearchComplaintsBody"
      responses:
        "200":
          $ref: "#/components/responses/SearchComplaintsData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "429":
          $ref: "#/components/responses/TooManyRequests"
  /complaints:
    post:
      tags:
        - Complaints
      security:
        - BearerAuth: []
      summary: Create complaints
      operationId: createComplaint
      requestBody:
        $ref: "#/components/requestBodies/CreateComplaintBody"
      responses:
        "200":
          $ref: "#/components/responses/ComplaintData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "429":
          $ref: "#/components/responses/TooManyRequests"
  "/complaints/{id}":
    patch:
      tags:
        - Complaints
      security:
        - BearerAuth: []
      summary: Edit complaints
      operationId: updateComplaint
      parameters:
        - $ref: "#/components/parameters/complaintIdParam"
      requestBody:
        $ref: "#/components/requestBodies/EditComplaintBody"
      responses:
        "200":
          $ref: "#/components/responses/ComplaintData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/ComplaintNotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
    delete:
      tags:
        - Complaints
      security:
        - BearerAuth: []
      summary: Delete complaints
      operationId: deleteComplaint
      parameters:
        - $ref: "#/components/parameters/complaintIdParam"
      responses:
        "200":
          $ref: "#/components/responses/ComplaintData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/ComplaintNotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
  /files:
    post:
      tags:
        - Files
      security:
        - BearerAuth: []
        - ApiClientAuth: []
      summary: Upload file
      operationId: uploadFile
      requestBody:
        $ref: "#/components/requestBodies/UploadFileBody"
      responses:
        "200":
          $ref: "#/components/responses/FileData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/FileNotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
  "/files/{id}":
    get:
      tags:
        - Files
      security:
        - BearerAuth: []
        - ApiClientAuth: []
      summary: Get file binary
      operationId: getFile
      parameters:
        - $ref: "#/components/parameters/fileIdParam"
      responses:
        "200":
          $ref: "#/components/responses/FileBinary"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/FileNotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
    delete:
      tags:
        - Files
      security:
        - BearerAuth: []
        - ApiClientAuth: []
      summary: Delete File
      operationId: deleteFile
      parameters:
        - $ref: "#/components/parameters/fileIdParam"
      responses:
        "200":
          $ref: "#/components/responses/FileData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/FileNotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
  "/files/{id}/info":
    get:
      tags:
        - Files
      security:
        - BearerAuth: []
        - ApiClientAuth: []
      summary: Get file info
      operationId: getFileInfo
      parameters:
        - $ref: "#/components/parameters/fileIdParam"
      responses:
        "200":
          $ref: "#/components/responses/FileData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/FileNotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
  /folders:
    post:
      tags:
        - Folders
      security:
        - BearerAuth: []
        - ApiClientAuth: []
      summary: Create folder
      operationId: createFolder
      requestBody:
        $ref: "#/components/requestBodies/CreateFolderBody"
      responses:
        "200":
          $ref: "#/components/responses/FolderData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/ParentFolderNotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
  "/folders/{id}":
    get:
      tags:
        - Folders
      security:
        - BearerAuth: []
        - ApiClientAuth: []
      summary: Get full folder data
      operationId: getFolder
      parameters:
        - $ref: "#/components/parameters/folderIdParam"
      responses:
        "200":
          $ref: "#/components/responses/FolderFullData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/FolderNotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
    patch:
      tags:
        - Folders
      security:
        - BearerAuth: []
        - ApiClientAuth: []
      summary: Update folder
      operationId: updateFolder
      parameters:
        - $ref: "#/components/parameters/folderIdParam"
      requestBody:
        $ref: "#/components/requestBodies/EditFolderBody"
      responses:
        "200":
          $ref: "#/components/responses/FolderData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/FolderNotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
    delete:
      tags:
        - Folders
      security:
        - BearerAuth: []
        - ApiClientAuth: []
      summary: Delete folder
      operationId: deleteFolder
      parameters:
        - $ref: "#/components/parameters/folderIdParam"
      responses:
        "200":
          $ref: "#/components/responses/FolderData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/FolderNotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
  /folders/search:
    post:
      tags:
        - Folders
      security:
        - BearerAuth: []
        - ApiClientAuth: []
      summary: Search folders
      operationId: searchFolders
      requestBody:
        $ref: "#/components/requestBodies/SearchFoldersBody"
      responses:
        "200":
          $ref: "#/components/responses/FolderTreeData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "429":
          $ref: "#/components/responses/TooManyRequests"
  /folders/move:
    put:
      tags:
        - Folders
      security:
        - BearerAuth: []
        - ApiClientAuth: []
      summary: Change folder order
      operationId: moveFolder
      requestBody:
        $ref: "#/components/requestBodies/MoveFolderBody"
      responses:
        "200":
          $ref: "#/components/responses/FolderData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/FolderNotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
  "/folders/{id}/make-public":
    post:
      tags:
        - Folders
      security:
        - BearerAuth: []
        - ApiClientAuth: []
      summary: Manage folder public status
      operationId: makeFolderPublic
      parameters:
        - $ref: "#/components/parameters/folderIdParam"
      requestBody:
        $ref: "#/components/requestBodies/MakePublicFolderBody"
      responses:
        "200":
          $ref: "#/components/responses/FolderData"
        "400":
          $ref: "#/components/responses/FolderIsPublic"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/FolderNotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
  "/folders/{id}/filters":
    post:
      tags:
        - Folders
      security:
        - BearerAuth: []
        - ApiClientAuth: []
      summary: Create folder filter
      operationId: createFolderFilter
      parameters:
        - $ref: "#/components/parameters/folderIdParam"
      requestBody:
        $ref: "#/components/requestBodies/CreateFolderFilterBody"
      responses:
        "200":
          $ref: "#/components/responses/FolderFilterData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/FolderNotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
  "/folders/{id}/filters/{filterId}":
    patch:
      tags:
        - Folders
      security:
        - BearerAuth: []
        - ApiClientAuth: []
      summary: Update folder filter
      operationId: updateFolderFilter
      parameters:
        - $ref: "#/components/parameters/folderIdParam"
        - $ref: "#/components/parameters/filterIdParam"
      requestBody:
        $ref: "#/components/requestBodies/EditFolderFilterBody"
      responses:
        "200":
          $ref: "#/components/responses/FolderFilterData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/FolderFilterNotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
    delete:
      tags:
        - Folders
      security:
        - BearerAuth: []
        - ApiClientAuth: []
      summary: Delete folder filter
      operationId: deleteFolderFilter
      parameters:
        - $ref: "#/components/parameters/folderIdParam"
        - $ref: "#/components/parameters/filterIdParam"
      responses:
        "200":
          $ref: "#/components/responses/FolderFilterData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/FolderFilterNotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
  /folders/filters/search:
    post:
      tags:
        - Folders
      security:
        - BearerAuth: []
        - ApiClientAuth: []
      summary: Search folders filters
      description: Return all filters values and tags that were created
      operationId: searchFoldersFilters
      requestBody:
        $ref: "#/components/requestBodies/SearchFoldersFiltersBody"
      responses:
        "200":
          $ref: "#/components/responses/SearchFolderFilterData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "429":
          $ref: "#/components/responses/TooManyRequests"
  "/folders/{id}/filters/move":
    put:
      tags:
        - Folders
      security:
        - BearerAuth: []
        - ApiClientAuth: []
      summary: Move folder filter
      operationId: moveFolderFilter
      parameters:
        - $ref: "#/components/parameters/folderIdParam"
      requestBody:
        $ref: "#/components/requestBodies/MoveFolderFilterBody"
      responses:
        "200":
          $ref: "#/components/responses/FolderFilterData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/FolderNotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
  "/folders/{id}/references/{refId}":
    post:
      tags:
        - Folders
      security:
        - BearerAuth: []
        - ApiClientAuth: []
      summary: Add reference to folder
      operationId: addFolderReference
      parameters:
        - $ref: "#/components/parameters/folderIdParam"
        - $ref: "#/components/parameters/folderRefIdParam"
      responses:
        "200":
          $ref: "#/components/responses/FolderReferenceData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/FolderNotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
    delete:
      tags:
        - Folders
      security:
        - BearerAuth: []
        - ApiClientAuth: []
      summary: Remove reference from folder
      operationId: removeFolderReference
      parameters:
        - $ref: "#/components/parameters/folderIdParam"
        - $ref: "#/components/parameters/folderRefIdParam"
      responses:
        "200":
          $ref: "#/components/responses/FolderReferenceData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/FolderNotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
  /units/non-system:
    get:
      tags:
        - Units
        - Available Public
      summary: Get non system units
      operationId: getNonSystemUnits
      responses:
        "200":
          $ref: "#/components/responses/SearchNonSystemUnitsData"
    post:
      tags:
        - Units
      security:
        - BearerAuth: []
      summary: Create non system unit
      description: Required `System Admin` access
      operationId: createNonSystemUnit
      requestBody:
        $ref: "#/components/requestBodies/ModifyNonSystemUnitBody"
      responses:
        "200":
          $ref: "#/components/responses/NonSystemUnitData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "429":
          $ref: "#/components/responses/TooManyRequests"
  "/units/non-system/{key}":
    delete:
      tags:
        - Units
      security:
        - BearerAuth: []
      summary: Delete non system unit
      description: Required `System Admin` access
      operationId: deleteNonSystemUnit
      parameters:
        - $ref: "#/components/parameters/nonSystemUnitKeyParam"
      responses:
        "200":
          $ref: "#/components/responses/NonSystemUnitData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NonSystemUnitNotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
  /norms:
    post:
      summary: Create a new norm
      tags:
        - Norms
      security:
        - BearerAuth: []
        - ApiClientAuth: []
      operationId: createNorm
      requestBody:
        $ref: "#/components/requestBodies/CreateNormBody"
      responses:
        "200":
          $ref: "#/components/responses/NormData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "429":
          $ref: "#/components/responses/TooManyRequests"
  /norms/search:
    post:
      summary: Search norms
      tags:
        - Norms
      security:
        - BearerAuth: []
        - ApiClientAuth: []
      operationId: searchNorms
      requestBody:
        $ref: "#/components/requestBodies/SearchNormsBody"
      responses:
        "200":
          $ref: "#/components/responses/SearchNormsData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "429":
          $ref: "#/components/responses/TooManyRequests"
  "/norms/{normId}":
    get:
      summary: Get norm by ID
      tags:
        - Norms
      security:
        - BearerAuth: []
        - ApiClientAuth: []
      operationId: getNorm
      parameters:
        - $ref: "#/components/parameters/normId"
      responses:
        "200":
          $ref: "#/components/responses/NormWithData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NormNotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
    patch:
      summary: Update norm
      tags:
        - Norms
      security:
        - BearerAuth: []
        - ApiClientAuth: []
      operationId: editNorm
      parameters:
        - $ref: "#/components/parameters/normId"
      requestBody:
        $ref: "#/components/requestBodies/EditNormBody"
      responses:
        "200":
          $ref: "#/components/responses/NormData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NormNotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
    delete:
      summary: Delete norm (soft delete)
      tags:
        - Norms
      security:
        - BearerAuth: []
        - ApiClientAuth: []
      parameters:
        - $ref: "#/components/parameters/normId"
      responses:
        "200":
          $ref: "#/components/responses/NormData"
        "400":
          $ref: "#/components/responses/NormAlreadyDeleted"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NormNotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
  "/norms/{normId}/resources/{resId}":
    post:
      summary: Add resource to norm
      tags:
        - Norms
      security:
        - BearerAuth: []
        - ApiClientAuth: []
      parameters:
        - $ref: "#/components/parameters/normId"
        - $ref: "#/components/parameters/resourceId"
      requestBody:
        $ref: "#/components/requestBodies/CreateNormResourceBody"
      responses:
        "200":
          $ref: "#/components/responses/NormResourceData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NormNotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
    patch:
      summary: Update norm resource
      tags:
        - Norms
      security:
        - BearerAuth: []
        - ApiClientAuth: []
      parameters:
        - $ref: "#/components/parameters/normId"
        - $ref: "#/components/parameters/resourceId"
      requestBody:
        $ref: "#/components/requestBodies/EditNormResourceBody"
      responses:
        "200":
          $ref: "#/components/responses/NormResourceData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NormResourceNotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
    delete:
      summary: Remove resource from norm
      tags:
        - Norms
      security:
        - BearerAuth: []
        - ApiClientAuth: []
      parameters:
        - $ref: "#/components/parameters/normId"
        - $ref: "#/components/parameters/resourceId"
      responses:
        "200":
          $ref: "#/components/responses/NormResourceData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NormResourceNotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
  /resources:
    post:
      summary: Create a new resource
      tags:
        - Resources
      security:
        - BearerAuth: []
        - ApiClientAuth: []
      operationId: createResource
      requestBody:
        $ref: "#/components/requestBodies/CreateResourceBody"
      responses:
        "200":
          $ref: "#/components/responses/ResourceData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "429":
          $ref: "#/components/responses/TooManyRequests"
  /resources/search:
    post:
      summary: Search resources
      tags:
        - Resources
      security:
        - BearerAuth: []
        - ApiClientAuth: []
      operationId: searchResources
      requestBody:
        $ref: "#/components/requestBodies/SearchResourcesBody"
      responses:
        "200":
          $ref: "#/components/responses/SearchResourcesData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "429":
          $ref: "#/components/responses/TooManyRequests"
  "/resources/{resId}":
    get:
      summary: Get resource by ID
      tags:
        - Resources
      security:
        - BearerAuth: []
        - ApiClientAuth: []
      operationId: getResource
      parameters:
        - $ref: "#/components/parameters/resourceId"
      responses:
        "200":
          $ref: "#/components/responses/ResourceWithData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/ResourceNotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
    patch:
      summary: Update resource
      tags:
        - Resources
      security:
        - BearerAuth: []
        - ApiClientAuth: []
      parameters:
        - $ref: "#/components/parameters/resourceId"
      requestBody:
        $ref: "#/components/requestBodies/EditResourceBody"
      responses:
        "200":
          $ref: "#/components/responses/ResourceData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/ResourceNotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
    delete:
      summary: Delete resource (soft delete)
      tags:
        - Resources
      security:
        - BearerAuth: []
        - ApiClientAuth: []
      parameters:
        - $ref: "#/components/parameters/resourceId"
      responses:
        "200":
          $ref: "#/components/responses/ResourceData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/ResourceNotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
  /units/system:
    get:
      tags:
        - Units
        - Available Public
      summary: Get system units
      operationId: getSystemUnits
      responses:
        "200":
          $ref: "#/components/responses/SearchSystemUnitsData"
    post:
      tags:
        - Units
      security:
        - BearerAuth: []
      summary: Create system unit
      description: Required `System Admin` access
      operationId: createSystemUnit
      requestBody:
        $ref: "#/components/requestBodies/ModifySystemUnitBody"
      responses:
        "200":
          $ref: "#/components/responses/SystemUnitData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "429":
          $ref: "#/components/responses/TooManyRequests"
  "/units/system/{key}":
    delete:
      tags:
        - Units
      security:
        - BearerAuth: []
      summary: Delete system unit
      description: Required `System Admin` access
      operationId: deleteSystemUnit
      parameters:
        - $ref: "#/components/parameters/systemUnitKeyParam"
      responses:
        "200":
          $ref: "#/components/responses/SystemUnitData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/SystemUnitNotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
  /tags/search:
    post:
      tags:
        - Tags
      security:
        - BearerAuth: []
        - ApiClientAuth: []
      summary: Search tags
      operationId: searchTags
      requestBody:
        $ref: "#/components/requestBodies/SearchTagsBody"
      responses:
        "200":
          $ref: "#/components/responses/SearchTagsData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "429":
          $ref: "#/components/responses/TooManyRequests"
  /tags:
    post:
      tags:
        - Tags
      security:
        - BearerAuth: []
        - ApiClientAuth: []
      summary: Crete tag
      operationId: createTag
      requestBody:
        $ref: "#/components/requestBodies/CreateTagBody"
      responses:
        "200":
          $ref: "#/components/responses/TagData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "429":
          $ref: "#/components/responses/TooManyRequests"
  "/tags/{id}":
    patch:
      tags:
        - Tags
      security:
        - BearerAuth: []
        - ApiClientAuth: []
      summary: Update tag
      operationId: updateTag
      parameters:
        - $ref: "#/components/parameters/tagIdParam"
      requestBody:
        $ref: "#/components/requestBodies/UpdateTagBody"
      responses:
        "200":
          $ref: "#/components/responses/TagData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/TagNotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
    delete:
      tags:
        - Tags
      security:
        - BearerAuth: []
        - ApiClientAuth: []
      summary: Delete tag
      operationId: deleteTag
      parameters:
        - $ref: "#/components/parameters/tagIdParam"
      responses:
        "200":
          $ref: "#/components/responses/TagData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/TagNotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
  /users/search:
    post:
      tags:
        - Users
      security:
        - BearerAuth: []
      summary: Search users
      description: Required `System Admin` access
      operationId: searchUsers
      requestBody:
        $ref: "#/components/requestBodies/SearchUsersBody"
      responses:
        "200":
          $ref: "#/components/responses/SearchUsersData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "429":
          $ref: "#/components/responses/TooManyRequests"
  "/users/blocked/{id}":
    post:
      tags:
        - Users
      security:
        - BearerAuth: []
      summary: Add user block
      description: Required `System Admin` access
      operationId: addUserBlock
      parameters:
        - $ref: "#/components/parameters/userIdParam"
      requestBody:
        $ref: "#/components/requestBodies/EmptyBody"
      responses:
        "200":
          $ref: "#/components/responses/UserRatingData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "429":
          $ref: "#/components/responses/TooManyRequests"
    delete:
      tags:
        - Users
      security:
        - BearerAuth: []
      summary: Delete user block
      description: Required `System Admin` access
      operationId: deleteUserBlock
      parameters:
        - $ref: "#/components/parameters/userIdParam"
      responses:
        "200":
          $ref: "#/components/responses/UserRatingData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "429":
          $ref: "#/components/responses/TooManyRequests"
  /words:
    post:
      tags:
        - Words
      security:
        - BearerAuth: []
        - ApiClientAuth: []
      summary: Create word
      operationId: createWord
      requestBody:
        $ref: "#/components/requestBodies/CreateWordBody"
      responses:
        "200":
          $ref: "#/components/responses/WordData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "429":
          $ref: "#/components/responses/TooManyRequests"
  "/words/{id}":
    get:
      tags:
        - Words
      security:
        - BearerAuth: []
        - ApiClientAuth: []
      summary: Get word full data
      operationId: getWord
      parameters:
        - $ref: "#/components/parameters/wordIdParam"
      responses:
        "200":
          $ref: "#/components/responses/WordFullData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/WordNotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
    patch:
      tags:
        - Words
      security:
        - BearerAuth: []
        - ApiClientAuth: []
      summary: Edit word data
      operationId: editWord
      parameters:
        - $ref: "#/components/parameters/wordIdParam"
      requestBody:
        $ref: "#/components/requestBodies/EditWordBody"
      responses:
        "200":
          $ref: "#/components/responses/WordFullData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/WordNotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
    delete:
      tags:
        - Words
      security:
        - BearerAuth: []
        - ApiClientAuth: []
      summary: Delete word
      operationId: deleteWord
      parameters:
        - $ref: "#/components/parameters/wordIdParam"
      responses:
        "200":
          $ref: "#/components/responses/WordData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/WordNotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
  /words/search:
    post:
      tags:
        - Words
      security:
        - BearerAuth: []
        - ApiClientAuth: []
      summary: Search words
      operationId: searchWords
      requestBody:
        $ref: "#/components/requestBodies/SearchWordsBody"
      responses:
        "200":
          $ref: "#/components/responses/SearchWordsData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "429":
          $ref: "#/components/responses/TooManyRequests"
  /words/search-context:
    post:
      tags:
        - Words
      security:
        - BearerAuth: []
        - ApiClientAuth: []
      summary: Search unique context in words
      operationId: searchWordsContext
      requestBody:
        $ref: "#/components/requestBodies/SearchWordsContextBody"
      responses:
        "200":
          $ref: "#/components/responses/SearchWordsContextData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "429":
          $ref: "#/components/responses/TooManyRequests"
  "/words/{id}/tags":
    put:
      tags:
        - Words
      security:
        - BearerAuth: []
        - ApiClientAuth: []
      summary: Edit word tags
      operationId: editWordTags
      parameters:
        - $ref: "#/components/parameters/wordIdParam"
      requestBody:
        $ref: "#/components/requestBodies/EditWordTagsBody"
      responses:
        "200":
          $ref: "#/components/responses/WordFullData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/WordNotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
  "/words/{id}/folders":
    post:
      tags:
        - Words
      security:
        - BearerAuth: []
        - ApiClientAuth: []
      summary: Add word to folders
      description: The word will get all folders filters value to have references to
        the folders
      operationId: addWordToFolders
      parameters:
        - $ref: "#/components/parameters/wordIdParam"
      requestBody:
        $ref: "#/components/requestBodies/AddWordFoldersBody"
      responses:
        "200":
          $ref: "#/components/responses/WordData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/WordNotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
  "/words/{id}/variants":
    post:
      tags:
        - Words
      security:
        - BearerAuth: []
        - ApiClientAuth: []
      summary: Create variant for word characteristic
      description: The word will get all folders filters value to have references to
        the folders
      operationId: crateWordVariant
      parameters:
        - $ref: "#/components/parameters/wordIdParam"
      requestBody:
        $ref: "#/components/requestBodies/CreateWordVariantBody"
      responses:
        "200":
          $ref: "#/components/responses/WordVariantData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/WordNotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
  "/words/{id}/variants/{field}":
    get:
      tags:
        - Words
      security:
        - BearerAuth: []
        - ApiClientAuth: []
      summary: Search variants of word characteristic
      operationId: searchWordVariants
      parameters:
        - $ref: "#/components/parameters/wordIdParam"
        - $ref: "#/components/parameters/variantFieldParam"
      responses:
        "200":
          $ref: "#/components/responses/WordVariantsListData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "404":
          $ref: "#/components/responses/WordNotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
  "/words/{id}/variants/{variantId}":
    patch:
      tags:
        - Words
      security:
        - BearerAuth: []
        - ApiClientAuth: []
      summary: Update word variant data
      operationId: updateWordVariant
      parameters:
        - $ref: "#/components/parameters/wordIdParam"
        - $ref: "#/components/parameters/variantIdParam"
      requestBody:
        $ref: "#/components/requestBodies/EditWordVariantBody"
      responses:
        "200":
          $ref: "#/components/responses/WordVariantData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/WordVariantNotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
    delete:
      tags:
        - Words
      security:
        - BearerAuth: []
        - ApiClientAuth: []
      summary: Delete word variant
      operationId: deleteWordVariant
      parameters:
        - $ref: "#/components/parameters/wordIdParam"
        - $ref: "#/components/parameters/variantIdParam"
      responses:
        "200":
          $ref: "#/components/responses/WordVariantData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/WordVariantNotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
  "/words/{id}/variants/{variantId}/votes":
    post:
      tags:
        - Words
      security:
        - BearerAuth: []
        - ApiClientAuth: []
      summary: Add vote to word variant
      operationId: addVoteToWordVariant
      parameters:
        - $ref: "#/components/parameters/wordIdParam"
        - $ref: "#/components/parameters/variantIdParam"
      requestBody:
        $ref: "#/components/requestBodies/EmptyBody"
      responses:
        "200":
          $ref: "#/components/responses/WordVariantData"
        "400":
          $ref: "#/components/responses/WordVariantVoteExist"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/WordVariantNotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
    delete:
      tags:
        - Words
      security:
        - BearerAuth: []
        - ApiClientAuth: []
      summary: Delete vote from word variant
      operationId: deleteVoteFromWordVariant
      parameters:
        - $ref: "#/components/parameters/wordIdParam"
        - $ref: "#/components/parameters/variantIdParam"
      responses:
        "200":
          $ref: "#/components/responses/WordVariantData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/WordVariantVoteNotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
  "/words/{id}/references/{type}/{refId}":
    post:
      tags:
        - Words
      security:
        - BearerAuth: []
        - ApiClientAuth: []
      summary: Create word reference
      operationId: createWordReference
      parameters:
        - $ref: "#/components/parameters/wordIdParam"
        - $ref: "#/components/parameters/wordRefTypeParam"
        - $ref: "#/components/parameters/wordRefIdParam"
      requestBody:
        $ref: "#/components/requestBodies/EmptyBody"
      responses:
        "200":
          $ref: "#/components/responses/WordReferenceData"
        "400":
          $ref: "#/components/responses/WordReferenceExist"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/WordNotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
    delete:
      tags:
        - Words
      security:
        - BearerAuth: []
        - ApiClientAuth: []
      summary: Delete word reference
      operationId: deleteWordReference
      parameters:
        - $ref: "#/components/parameters/wordIdParam"
        - $ref: "#/components/parameters/wordRefTypeParam"
        - $ref: "#/components/parameters/wordRefIdParam"
      responses:
        "200":
          $ref: "#/components/responses/WordReferenceData"
        "400":
          $ref: "#/components/responses/InvalidData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/WordReferenceNotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: User authorization
    ApiClientAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: API Client Authorization
  schemas:
    ErrorResponse:
      type: object
      required:
        - errorCode
        - message
      properties:
        errorCode:
          type: string
        message:
          type: string
    SortModel:
      type: object
      required:
        - field
      properties:
        field:
          type: string
          description: The field for sorting
        sort:
          type: string
          nullable: true
          enum:
            - asc
            - desc
          description: The sorting order
    SearchModel:
      type: object
      properties:
        limit:
          type: number
          description: Number of return items
        offset:
          type: number
          description: Number of skip items
        sort:
          type: array
          items:
            $ref: "#/components/schemas/SortModel"
    User:
      type: object
      required:
        - id
        - firstName
      properties:
        id:
          type: string
          description: Wallet Address
          example: 0:c424531feb64afeb46607e0aff5609628207213308b62c123891d817389fc35b
        firstName:
          type: string
          description: First Name
        lastName:
          type: string
          description: Last Name
        middleName:
          type: string
          description: Middle Name
        avatar:
          type: string
          description: Avatar
    TMAUser:
      type: object
      required:
        - id
        - firstName
      properties:
        id:
          type: number
          description: Telegram User ID
        firstName:
          type: string
          description: First Name
        lastName:
          type: string
          description: Last Name
        username:
          type: string
          description: Username
        isBot:
          type: boolean
          description: If `true` user is a bot
        isPremium:
          type: boolean
          description: If `true` user is a premium user
        languageCode:
          type: string
          description: Language Code
        photoUrl:
          type: string
          description: URL to User Photo
        addedToAttachmentMenu:
          type: boolean
          description: If `true` user has added the bot to attachment menu
        allowsWriteToPm:
          type: boolean
          description: If `true` user allows writing to PM
    UserFull:
      allOf:
        - $ref: "#/components/schemas/User"
        - type: object
          required:
            - createdAt
          properties:
            publicKeys:
              type: array
              items:
                type: string
              description: List of Public Keys
            tma:
              $ref: "#/components/schemas/TMAUser"
            createdAt:
              type: string
              format: date-time
              description: Date and time of creation
            updatedAt:
              type: string
              format: date-time
              description: Date and time of last update
    AuthErrorCodes:
      type: string
      enum:
        - api:403
        - api:403-system
        - auth:401
        - auth:403
        - auth:404
        - user:404
    ApiClientGrantType:
      type: string
      enum:
        - client_credentials
        - refresh_token
        - device_code
      description: Supported grant types for API clients
    ApiClientBase:
      type: object
      required:
        - id
        - name
        - status
        - createdBy
        - grantTypes
      properties:
        id:
          type: string
          format: uuid
          description: Client ID
        name:
          type: string
          description: Client name
        status:
          type: string
          enum:
            - active
            - inactive
          description: Indicates the status of the client
        grantTypes:
          type: array
          items:
            $ref: "#/components/schemas/ApiClientGrantType"
          description: Supported grant types
        createdBy:
          type: string
          description: Creator Wallet address
        sub:
          type: string
          description: Subject (sub) claim for the client
        scopes:
          type: array
          items:
            type: string
          description: List of scopes granted to the client
        webhookUrl:
          type: string
          description: Webhook URL to send notifications from the client
        lastUsedAt:
          type: string
          format: date-time
          description: Last used date
        blockedAt:
          type: string
          format: date-time
          description: Blocked date
    ApiClient:
      allOf:
        - $ref: "#/components/schemas/ApiClientBase"
        - type: object
          required:
            - createdAt
          properties:
            createdAt:
              type: string
              format: date-time
              description: Creation date
            updatedAt:
              type: string
              format: date-time
              description: Update date
    ApiClientWithSecret:
      allOf:
        - $ref: "#/components/schemas/ApiClient"
        - type: object
          required:
            - secret
          properties:
            secret:
              type: string
              description: Client secret
    ApiClientErrorCodes:
      type: string
      enum:
        - api-client:400-blocked
        - api-client:400-code-pending
        - api-client:400-inactive
        - api-client:400-invalid-jwt
        - api-client:400-not-blocked
        - api-client:400-unsupported-grant-type
        - api-client:400-unsupported-scope
        - api-client:401
        - api-client:403
        - api-client:404
        - api-client:404-oauth-public-key
    ActivityType:
      type: string
      description: Activity Type
      enum:
        - tagCreated
        - tagUpdated
        - tagDeleted
        - folderCreated
        - folderUpdated
        - folderMoved
        - folderDeleted
        - folderFilterCreated
        - folderFilterUpdated
        - folderFilterMoved
        - folderFilterDeleted
        - wordCreated
        - wordDeleted
        - wordTagsUpdated
        - wordVariantCreated
        - wordVariantUpdated
        - wordVariantDeleted
        - wordVariantVoteCreated
        - wordVariantVoteDeleted
        - wordReferenceCreated
        - wordReferenceDeleted
        - normCreated
        - normUpdated
        - normDeleted
        - normResourceCreated
        - normResourceUpdated
        - normResourceDeleted
    ActivityLog:
      type: object
      required:
        - id
        - type
        - userId
        - artefactId
        - data
      properties:
        id:
          type: string
          format: uuid
          description: Artefact ID
        type:
          $ref: "#/components/schemas/ActivityType"
        userId:
          type: string
          description: Wallet Address
          example: 0:c424531feb64afeb46607e0aff5609628207213308b62c123891d817389fc35b
        artefactId:
          type: string
          format: uuid
          description: Artefact ID
        clientId:
          type: string
          format: uuid
          description: API Client ID
        data:
          type: object
          description: Activity Data depends on type
        createdAt:
          type: string
          format: date-time
          description: Creation Date
    AdminAccess:
      type: object
      required:
        - wallet
        - createdAt
      properties:
        wallet:
          type: string
          description: Wallet Address
          example: 0:c424531feb64afeb46607e0aff5609628207213308b62c123891d817389fc35b
        createdAt:
          type: string
          format: date-time
          description: Creation Date
        userData:
          $ref: "#/components/schemas/User"
    ComplaintStatus:
      type: string
      description: Complaint Status
      enum:
        - open
        - accepted
        - declined
        - closed
    ComplaintType:
      type: string
      description: Complaint Type
      enum:
        - item
        - variant
        - reference
    Complaint:
      type: object
      required:
        - id
        - status
        - type
        - wordId
        - comment
        - createdBy
        - createdAt
      properties:
        id:
          type: string
          format: uuid
          description: Complaint ID
        status:
          $ref: "#/components/schemas/ComplaintStatus"
        type:
          $ref: "#/components/schemas/ComplaintType"
        wordId:
          type: string
          format: uuid
          description: Word ID
        variantId:
          type: string
          format: uuid
          description: Word variant ID
        refId:
          type: string
          format: uuid
          description: Word reference ID
        comment:
          type: string
          description: Complaint comment
        createdBy:
          type: string
          description: Wallet Address
          example: 0:c424531feb64afeb46607e0aff5609628207213308b62c123891d817389fc35b
        createdAt:
          type: string
          format: date-time
          description: Creation Date
        wordData:
          $ref: "#/components/schemas/Word"
        variantData:
          $ref: "#/components/schemas/WordVariant"
        referenceData:
          $ref: "#/components/schemas/WordReferencePreview"
        authorData:
          $ref: "#/components/schemas/User"
        createdByData:
          $ref: "#/components/schemas/User"
    FileData:
      type: object
      required:
        - id
        - name
        - mimeType
        - size
        - createdBy
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
          description: File ID
        name:
          type: string
          description: File name
        mimeType:
          type: string
          description: File mime type
        size:
          type: number
          description: File size in bytes
        createdBy:
          type: string
          description: Wallet Address
          example: 0:c424531feb64afeb46607e0aff5609628207213308b62c123891d817389fc35b
        clientId:
          type: string
          format: uuid
          description: API Client ID
        createdAt:
          type: string
          format: date-time
          description: Creation Date
        updatedAt:
          type: string
          format: date-time
          description: Last Updating Date
    FolderType:
      type: string
      description: Folder type
      enum:
        - norm
        - resource
        - word
    Folder:
      type: object
      required:
        - id
        - name
        - createdBy
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
          description: Folder ID
        parentId:
          type: string
          nullable: true
          format: uuid
          description: Folder parent ID
        type:
          $ref: "#/components/schemas/FolderType"
        name:
          type: string
          description: Folder name
        order:
          type: number
          description: Folder order
        isPublic:
          type: boolean
          description: If `true` - shows everyone, if `null` - on review to make public,
            if `false` - shows only for creator
        createdBy:
          type: string
          description: Wallet Address
          example: 0:c424531feb64afeb46607e0aff5609628207213308b62c123891d817389fc35b
        clientId:
          type: string
          format: uuid
          description: API Client ID
        createdAt:
          type: string
          format: date-time
          description: Creation Date
        updatedAt:
          type: string
          format: date-time
          description: Last Updating Date
    FolderFormulaOperator:
      type: string
      description: Formula operator
      enum:
        - equal
        - not_equal
    FolderFilter:
      type: object
      required:
        - id
        - folderId
        - field
        - operator
        - createdBy
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
          description: Filter ID
        folder:
          type: string
          format: uuid
          description: Folder ID
        field:
          type: string
          description: Formula attribute
        operator:
          $ref: "#/components/schemas/FolderFormulaOperator"
        value:
          type: string
          description: Formula value
        unit:
          type: string
          description: Formula unit
        order:
          type: number
          description: Filter order
        createdBy:
          type: string
          description: Wallet Address
          example: 0:c424531feb64afeb46607e0aff5609628207213308b62c123891d817389fc35b
        clientId:
          type: string
          format: uuid
          description: API Client ID
        createdAt:
          type: string
          format: date-time
          description: Creation Date
        updatedAt:
          type: string
          format: date-time
          description: Last Updating Date
    FolderTreeItem:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          format: uuid
          description: Folder ID
        parentId:
          type: string
          nullable: true
          format: uuid
          description: Folder parent ID
        name:
          type: string
          description: Folder name
        isPublic:
          type: boolean
          description: If `true` - shows everyone, if `null` - on review to make public,
            if `false` - shows only for creator
        hasAccess:
          type: boolean
          description: If `true` - has access to folder, if `false` - no access
        children:
          type: array
          items:
            type: string
            format: uuid
            description: Folder ID
    FolderFullData:
      allOf:
        - $ref: "#/components/schemas/Folder"
        - type: object
          required:
            - filters
          properties:
            createdByData:
              $ref: "#/components/schemas/User"
            filters:
              type: array
              items:
                $ref: "#/components/schemas/FolderFilter"
    FolderReference:
      type: object
      required:
        - folderId
        - isDirect
      properties:
        folderId:
          type: string
          format: uuid
          description: Folder ID
        isDirect:
          type: boolean
          description: If `true` - direct reference (manual deletion), if `false` -
            reference is smart-folder (auto-deletion by tags)
        wordId:
          type: string
          format: uuid
          description: Word ID
        normId:
          type: string
          format: uuid
          description: Norm ID
        resourceId:
          type: string
          format: uuid
          description: Resource ID
    NonSystemUnit:
      type: object
      required:
        - key
        - name
        - systemUnit
        - coeff
      properties:
        key:
          type: string
          description: Unique unit key
        name:
          type: object
          description: Localized unit name
          properties:
            ru:
              type: string
            en:
              type: string
        systemUnit:
          type: string
          description: System unit key
        coeff:
          type: number
          description: Coeff for transforming non-system unit into system unit
    NormBase:
      type: object
      required:
        - id
        - name
        - code
      properties:
        id:
          type: string
          format: uuid
          description: Norm ID
        name:
          type: string
          description: Norm name
        code:
          type: string
          description: Norm code
        workList:
          type: array
          items:
            type: string
          description: List of work items
        unit:
          type: string
          description: Unit of measurement
        systemUnit:
          type: string
          description: System unit of measurement
        coeff:
          type: number
          description: Coefficient
    Norm:
      allOf:
        - $ref: "#/components/schemas/NormBase"
        - type: object
          properties:
            clientId:
              type: string
              format: uuid
              description: API Client ID
            createdBy:
              type: string
              description: Wallet Address
              example: 0:c424531feb64afeb46607e0aff5609628207213308b62c123891d817389fc35b
            createdAt:
              type: string
              format: date-time
              description: Creation Date
            updatedAt:
              type: string
              format: date-time
              description: Last Updating Date
            deletedAt:
              type: string
              format: date-time
              description: Deletion Date
    NormResource:
      type: object
      required:
        - normId
        - resourceId
        - consumption
      properties:
        normId:
          type: string
          format: uuid
          description: Norm ID
        resourceId:
          type: string
          format: uuid
          description: Resource ID
        consumption:
          type: number
          description: Consumption amount
        wastePercent:
          type: number
          description: Waste percentage
        lossPercent:
          type: number
          description: Loss percentage
    NormResourceWithData:
      allOf:
        - $ref: "#/components/schemas/NormResource"
        - $ref: "#/components/schemas/ResourceBase"
    NormWithData:
      allOf:
        - $ref: "#/components/schemas/Norm"
        - type: object
          properties:
            resources:
              type: array
              items:
                $ref: "#/components/schemas/NormResourceWithData"
              description: List of norm resources
            createdByData:
              $ref: "#/components/schemas/User"
    ResourceType:
      type: string
      description: Resource Type
      enum:
        - material
        - mechanism
        - worker
        - animal
        - plant
        - fossil
        - workCenter
    ResourceBase:
      type: object
      required:
        - id
        - type
        - name
      properties:
        id:
          type: string
          format: uuid
          description: Resource ID
        type:
          $ref: "#/components/schemas/ResourceType"
          description: Resource type
        code:
          type: string
          description: Resource code
        name:
          type: string
          description: Resource name
        description:
          type: string
          description: Resource description
        photos:
          type: array
          items:
            type: string
          description: Resource photos
        unit:
          type: string
          description: Resource unit
        systemUnit:
          type: string
          description: Resource system unit
        coeff:
          type: number
          description: Resource coefficient
    Resource:
      allOf:
        - $ref: "#/components/schemas/ResourceBase"
        - type: object
          required:
            - createdAt
          properties:
            clientId:
              type: string
              format: uuid
              description: API Client ID
            createdBy:
              type: string
              description: Wallet Address
              example: 0:c424531feb64afeb46607e0aff5609628207213308b62c123891d817389fc35b
            createdAt:
              type: string
              format: date-time
              description: Creation Date
            updatedAt:
              type: string
              format: date-time
              description: Last Updating Date
            deletedAt:
              type: string
              format: date-time
              description: Deletion Date
    ResourceWithData:
      allOf:
        - $ref: "#/components/schemas/Resource"
        - type: object
          properties:
            createdByData:
              $ref: "#/components/schemas/User"
    SystemUnit:
      type: object
      required:
        - key
        - name
      properties:
        key:
          type: string
          description: Unique unit key
        name:
          type: object
          description: Localized unit name
          properties:
            ru:
              type: string
            en:
              type: string
    Tag:
      type: object
      required:
        - id
        - field
        - createdBy
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
          description: Tag ID
        field:
          type: string
          description: Tag name
        color:
          type: string
          description: Tag color
        createdBy:
          type: string
          description: Wallet Address
          example: 0:c424531feb64afeb46607e0aff5609628207213308b62c123891d817389fc35b
        clientId:
          type: string
          format: uuid
          description: API Client ID
        createdAt:
          type: string
          format: date-time
          description: Creation Date
        updatedAt:
          type: string
          format: date-time
          description: Last Updating Date
    UserWithRating:
      type: object
      required:
        - id
        - firstName
      properties:
        id:
          type: string
          description: Wallet Address
          example: 0:c424531feb64afeb46607e0aff5609628207213308b62c123891d817389fc35b
        firstName:
          type: string
          description: First Name
        lastName:
          type: string
          description: Last Name
        middleName:
          type: string
          description: Middle Name
        avatar:
          type: string
          description: Avatar
        isBlocked:
          type: boolean
          description: Is user access blocked
        wordsCreated:
          type: number
          description: Number of words created by user
        wordsParticipant:
          type: number
          description: Number of variants user created
        variantsLiked:
          type: number
          description: Number of likes user added
        complaintsCreated:
          type: number
          description: Number of complaints user created
    Word:
      type: object
      required:
        - id
        - name
        - createdBy
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
          description: Word ID
        name:
          type: string
          description: Word name
        context:
          type: array
          items:
            type: string
          description: Word context, used for define the scope
        shortName:
          type: string
          description: Word short name
        description:
          type: string
          description: Word description
        unit:
          type: string
          description: Word unit
        systemUnit:
          type: string
          description: System unit key
        coeff:
          type: number
          description: Coeff for mapping systemUnit with unit
        photo:
          type: string
          description: Word main photo
        video:
          type: string
          description: Word main video
        folders:
          type: array
          description: Word folders
          items:
            type: string
        clientId:
          type: string
          format: uuid
          description: API Client ID
        createdBy:
          type: string
          description: Wallet Address
          example: 0:c424531feb64afeb46607e0aff5609628207213308b62c123891d817389fc35b
        createdAt:
          type: string
          format: date-time
          description: Creation Date
        updatedAt:
          type: string
          format: date-time
          description: Last Updating Date
        deletedAt:
          type: string
          format: date-time
          description: Deleted Date
    WordWithData:
      type: object
      required:
        - id
        - name
        - createdBy
        - createdAt
        - updatedAt
        - createdByData
        - tags
        - synonyms
        - translations
      properties:
        id:
          type: string
          format: uuid
          description: Word ID
        name:
          type: string
          description: Word name
        context:
          type: array
          items:
            type: string
          description: Word context, used for define the scope
        shortName:
          type: string
          description: Word short name
        description:
          type: string
          description: Word description
        unit:
          type: string
          description: Word unit
        systemUnit:
          type: string
          description: System unit key
        coeff:
          type: number
          description: Coeff for mapping systemUnit with unit
        photo:
          type: string
          description: Word main photo
        video:
          type: string
          description: Word main video
        folders:
          type: array
          description: Word folders
          items:
            type: string
        clientId:
          type: string
          format: uuid
          description: API Client ID
        createdBy:
          type: string
          description: Wallet Address
          example: 0:c424531feb64afeb46607e0aff5609628207213308b62c123891d817389fc35b
        createdAt:
          type: string
          format: date-time
          description: Creation Date
        updatedAt:
          type: string
          format: date-time
          description: Last Updating Date
        deletedAt:
          type: string
          format: date-time
          description: Deleted Date
        createdByData:
          $ref: "#/components/schemas/User"
        tags:
          type: array
          items:
            $ref: "#/components/schemas/Tag"
        synonyms:
          type: array
          items:
            $ref: "#/components/schemas/WordReferencePreview"
        translations:
          type: array
          items:
            $ref: "#/components/schemas/WordReferencePreview"
    WordVariant:
      type: object
      required:
        - id
        - wordId
        - field
        - value
        - createdBy
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
          description: Variant ID
        wordId:
          type: string
          format: uuid
          description: Word ID
        field:
          type: string
          description: Variant field
        value:
          type: string
          description: Variant value
        votes:
          type: array
          description: Users ids who liked the variant
          items:
            type: string
        clientId:
          type: string
          format: uuid
          description: API Client ID
        createdBy:
          type: string
          description: Wallet Address
          example: 0:c424531feb64afeb46607e0aff5609628207213308b62c123891d817389fc35b
        createdAt:
          type: string
          format: date-time
          description: Creation Date
        updatedAt:
          type: string
          format: date-time
          description: Last Updating Date
        createdByData:
          $ref: "#/components/schemas/User"
    WordReferenceType:
      type: string
      description: Word Reference Type
      enum:
        - synonym
        - translate
    WordReference:
      type: object
      required:
        - wordId
        - type
        - refId
        - createdBy
        - createdAt
      properties:
        wordId:
          type: string
          format: uuid
          description: Word ID
        type:
          $ref: "#/components/schemas/WordReferenceType"
        refId:
          type: string
          format: uuid
          description: Word reference ID
        clientId:
          type: string
          format: uuid
          description: API Client ID
        createdBy:
          type: string
          description: Wallet Address
          example: 0:c424531feb64afeb46607e0aff5609628207213308b62c123891d817389fc35b
        createdAt:
          type: string
          format: date-time
          description: Creation Date
        createdByData:
          $ref: "#/components/schemas/User"
    WordReferencePreview:
      type: object
      required:
        - id
        - name
        - type
        - createdBy
      properties:
        id:
          type: string
          format: uuid
          description: Word ID
        name:
          type: string
          description: Word name
        type:
          $ref: "#/components/schemas/WordReferenceType"
        description:
          type: string
          description: Word description by most liked variant
        photo:
          type: string
          description: Word photo by most liked variant
        video:
          type: string
          description: Word video by most liked variant
        createdBy:
          type: string
          description: Wallet Address
          example: 0:c424531feb64afeb46607e0aff5609628207213308b62c123891d817389fc35b
        createdByData:
          $ref: "#/components/schemas/User"
  requestBodies:
    EmptyBody:
      content:
        application/json:
          schema:
            type: object
    ApiClientRegisterBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - name
              - grantTypes
            properties:
              name:
                type: string
                description: Client name
              grantTypes:
                type: array
                items:
                  $ref: "#/components/schemas/ApiClientGrantType"
                description: Supported grant types
              sub:
                type: string
                description: Subject (sub) claim for the client
              scopes:
                type: array
                items:
                  type: string
                description: Allowed scopes
              webhookUrl:
                type: string
                description: Webhook URL to send notifications from the client
    ApiClientModifyBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                description: Client name
              grantTypes:
                type: array
                items:
                  $ref: "#/components/schemas/ApiClientGrantType"
                description: Supported grant types
              sub:
                type: string
                description: Subject (sub) claim for the client
              scopes:
                type: array
                items:
                  type: string
                description: Allowed scopes
              webhookUrl:
                type: string
                description: Webhook URL to send notifications from the client
    ApiClientsSearchBody:
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/SearchModel"
              - type: object
                properties:
                  searchTerm:
                    type: string
                    description: Search term to filter clients by name
                  isActive:
                    type: boolean
                    description: Filter by client active/inactive status
                  isBlocked:
                    type: boolean
                    description: Filter by client blocked status
                  ids:
                    type: array
                    items:
                      type: string
                      format: uuid
                    description: Filter by specific client IDs
                  subs:
                    type: array
                    items:
                      type: string
                    description: Filter by client subject (sub) claims
                  createdBy:
                    type: array
                    items:
                      type: string
                    description: Filter by creator Wallet addresses
                  grandTypes:
                    type: array
                    items:
                      $ref: "#/components/schemas/ApiClientGrantType"
                    description: Filter by supported grant types
    ApiClientExchangeTokenBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - grantType
              - clientId
            properties:
              grantType:
                $ref: "#/components/schemas/ApiClientGrantType"
                description: Grant type for token exchange
              clientId:
                type: string
                description: Client ID
              clientSecret:
                type: string
                description: Client secret
              refreshToken:
                type: string
                description: Refresh token
              deviceCode:
                type: string
                description: Device code
              scope:
                type: string
                description: Requested scope
    ApiClientGetDeviceCodeBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - clientId
              - scope
            properties:
              clientId:
                type: string
                description: Client ID
              scope:
                type: string
                description: Requested scope
    ApiClientRevokeTokenBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              token:
                type: string
                description: Token to revoke (optional). If not provided, all tokens for the
                  client will be revoked
    SearchActivitiesBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              artefactId:
                type: string
                format: uuid
                description: Artefact ID
              clientId:
                type: string
                format: uuid
                description: API Client ID
              types:
                type: array
                items:
                  $ref: "#/components/schemas/ActivityType"
              limit:
                type: number
                description: Number of return items
              offset:
                type: number
                description: Number of skip items
              sort:
                type: array
                items:
                  $ref: "#/components/schemas/SortModel"
    CreateAdminAccessBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - wallet
            properties:
              wallet:
                type: string
                description: Wallet Address
                example: 0:c424531feb64afeb46607e0aff5609628207213308b62c123891d817389fc35b
    SearchComplaintsBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              statuses:
                type: array
                items:
                  $ref: "#/components/schemas/ComplaintStatus"
              types:
                type: array
                items:
                  $ref: "#/components/schemas/ComplaintType"
              limit:
                type: number
                description: Number of return items
              offset:
                type: number
                description: Number of skip items
              sort:
                type: array
                items:
                  $ref: "#/components/schemas/SortModel"
    CreateComplaintBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - wordId
              - comment
            properties:
              wordId:
                type: string
                format: uuid
                description: Word ID
              variantId:
                type: string
                format: uuid
                description: Word variant ID
              refId:
                type: string
                format: uuid
                description: Word reference ID
              comment:
                type: string
                description: Complaint comment
    EditComplaintBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              comment:
                type: string
                description: Complaint comment
              status:
                $ref: "#/components/schemas/ComplaintStatus"
    UploadFileBody:
      content:
        multipart/form-data:
          schema:
            type: object
            properties:
              id:
                type: string
                format: uuid
                description: If set and file exists then file content will be overwritten
              file:
                type: string
                format: binary
    SearchFoldersBody:
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/SearchModel"
              - type: object
                properties:
                  ids:
                    type: array
                    items:
                      type: string
                      format: uuid
                    description: Folder IDs
                  searchTerm:
                    type: string
                    description: Folder name
                  parentId:
                    type: string
                    nullable: true
                    format: uuid
                    description: Folder parent ID
                  type:
                    $ref: "#/components/schemas/FolderType"
                  isPublic:
                    type: boolean
                    description: If `true` - return only public folders
                  isPersonal:
                    type: boolean
                    description: If `true` - return only personal folders
                  isReview:
                    type: boolean
                    description: If `true` - return only folders on review
    CreateFolderBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
                description: Folder name
              parentId:
                type: string
                nullable: true
                format: uuid
                description: Folder parent ID
              order:
                type: number
                description: Folder order
    EditFolderBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                description: Folder name
    MoveFolderBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - id
            properties:
              id:
                type: string
                format: uuid
                description: Folder ID
              parentId:
                type: string
                nullable: true
                format: uuid
                description: Folder patent ID
              afterId:
                type: string
                format: uuid
                description: Should move after folder ID
              beforeId:
                type: string
                format: uuid
                description: Should move before folder ID
    MakePublicFolderBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              shouldCancel:
                type: boolean
                description: Available for `System Admin` and used to cancel user public request
    CreateFolderFilterBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - field
              - operator
              - value
            properties:
              field:
                type: string
                description: Formula attribute
              operator:
                $ref: "#/components/schemas/FolderFormulaOperator"
              value:
                type: string
                description: Formula value
              unit:
                type: string
                description: Formula unit
              order:
                type: number
                description: Filter order
    EditFolderFilterBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              field:
                type: string
                description: Formula attribute
              operator:
                $ref: "#/components/schemas/FolderFormulaOperator"
              value:
                type: string
                description: Formula value
              unit:
                type: string
                description: Formula unit
    SearchFoldersFiltersBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              searchTerm:
                type: string
                description: Search term
              limit:
                type: number
                description: Number of return items
              offset:
                type: number
                description: Number of skip items
              sort:
                type: array
                items:
                  $ref: "#/components/schemas/SortModel"
    MoveFolderFilterBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - id
              - filterId
            properties:
              filterId:
                type: string
                format: uuid
                description: Filter ID
              afterId:
                type: string
                format: uuid
                description: Should move after folder ID
              beforeId:
                type: string
                format: uuid
                description: Should move before folder ID
    ModifyNonSystemUnitBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NonSystemUnit"
    CreateNormBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - name
              - code
            properties:
              name:
                type: string
                description: Norm name
              code:
                type: string
                description: Norm code
              workList:
                type: array
                items:
                  type: string
                description: List of work items
              unit:
                type: string
                description: Unit of measurement
              systemUnit:
                type: string
                description: System unit of measurement
              coeff:
                type: number
                description: Coefficient
              resources:
                type: array
                items:
                  type: object
                  required:
                    - resourceId
                    - consumption
                  properties:
                    resourceId:
                      type: string
                      format: uuid
                      description: Resource ID
                    consumption:
                      type: number
                      description: Consumption amount
                    wastePercent:
                      type: number
                      description: Waste percentage
                    lossPercent:
                      type: number
                      description: Loss percentage
    EditNormBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                description: Norm name
              code:
                type: string
                description: Norm code
              workList:
                type: array
                items:
                  type: string
                description: List of work items
              unit:
                type: string
                description: Unit of measurement
              systemUnit:
                type: string
                description: System unit of measurement
              coeff:
                type: number
                description: Coefficient
    SearchNormsBody:
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/SearchModel"
              - type: object
                properties:
                  searchTerm:
                    type: string
                    description: Search term for name or code
                  clientId:
                    type: string
                    format: uuid
                    description: Client ID filter
                  createdBy:
                    type: string
                    description: Created by user ID filter
                  ids:
                    type: array
                    items:
                      type: string
                      format: uuid
                    description: List of norm IDs
                  folders:
                    type: array
                    items:
                      type: string
                      format: uuid
                    description: List of folder IDs
                  isDeleted:
                    type: boolean
                    description: Filter by deletion status
    CreateNormResourceBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - consumption
            properties:
              consumption:
                type: number
                description: Consumption amount
              wastePercent:
                type: number
                description: Waste percentage
              lossPercent:
                type: number
                description: Loss percentage
    EditNormResourceBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              consumption:
                type: number
                description: Consumption amount
              wastePercent:
                type: number
                description: Waste percentage
              lossPercent:
                type: number
                description: Loss percentage
    CreateResourceBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - type
              - name
            properties:
              type:
                $ref: "#/components/schemas/ResourceType"
              code:
                type: string
                description: Resource code
              name:
                type: string
                description: Resource name
              description:
                type: string
                description: Resource description
              photos:
                type: array
                items:
                  type: string
                description: Resource photos
              unit:
                type: string
                description: Resource unit
              systemUnit:
                type: string
                description: Resource system unit
              coeff:
                type: number
                description: Resource coefficient
    EditResourceBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              type:
                $ref: "#/components/schemas/ResourceType"
              code:
                type: string
                description: Resource code
              name:
                type: string
                description: Resource name
              description:
                type: string
                description: Resource description
              photos:
                type: array
                items:
                  type: string
                description: Resource photos
              unit:
                type: string
                description: Resource unit
              systemUnit:
                type: string
                description: Resource system unit
              coeff:
                type: number
                description: Resource coefficient
    SearchResourcesBody:
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/SearchModel"
              - type: object
                properties:
                  searchTerm:
                    type: string
                    description: Search term for name or description
                  types:
                    type: array
                    items:
                      $ref: "#/components/schemas/ResourceType"
                    description: Filter by resource types
                  clientId:
                    type: string
                    format: uuid
                    description: Client ID filter
                  createdBy:
                    type: string
                    description: Created by user ID filter
                  ids:
                    type: array
                    items:
                      type: string
                      format: uuid
                    description: List of resource IDs
                  isDeleted:
                    type: boolean
                    description: Filter by deletion status
    ModifySystemUnitBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SystemUnit"
    SearchTagsBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              searchTerm:
                type: string
                description: Search term
              ids:
                type: array
                description: Tag ids
                items:
                  type: string
                  format: uuid
              limit:
                type: number
                description: Number of return items
              offset:
                type: number
                description: Number of skip items
              sort:
                type: array
                items:
                  $ref: "#/components/schemas/SortModel"
    CreateTagBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - field
            properties:
              field:
                type: string
                description: Tag name
              color:
                type: string
                description: Tag color
    UpdateTagBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              field:
                type: string
                description: Tag name
              color:
                type: string
                description: Tag color
    SearchUsersBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              searchTerm:
                type: string
                description: Part of full name
              isBlocked:
                type: boolean
                description: Flag to filter blocked users
              limit:
                type: number
                description: Number of return items
              offset:
                type: number
                description: Number of skip items
              sort:
                type: array
                items:
                  $ref: "#/components/schemas/SortModel"
    SearchWordsBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              ids:
                type: array
                description: Search by ids
                items:
                  type: string
                  format: uuid
              context:
                type: array
                items:
                  type: string
                description: Word context, used for define the scope
              searchTerm:
                type: string
                description: Search term
              withUnit:
                type: boolean
                description: Return words with unit data
              withDeleted:
                type: boolean
                description: Skip deleted words filtration
              folders:
                type: array
                description: Folders ids
                items:
                  type: string
                  format: uuid
              limit:
                type: number
                description: Number of return items
              offset:
                type: number
                description: Number of skip items
              sort:
                type: array
                items:
                  $ref: "#/components/schemas/SortModel"
    SearchWordsContextBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              searchTerm:
                type: string
                description: Search term
              limit:
                type: number
                description: Number of return items
              offset:
                type: number
                description: Number of skip items
              sort:
                type: array
                items:
                  $ref: "#/components/schemas/SortModel"
    CreateWordBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
                description: Word name
              context:
                type: array
                items:
                  type: string
                description: Word context, used for define the scope
              shortName:
                type: string
                description: Word short name
              description:
                type: string
                description: Word description
              unit:
                type: string
                description: Word unit
              systemUnit:
                type: string
                description: System unit key
              coeff:
                type: number
                description: Coeff for mapping systemUnit with unit
              photos:
                type: array
                description: Word photos
                items:
                  type: string
              videos:
                type: array
                description: Word videos
                items:
                  type: string
    EditWordBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                description: Word name
              context:
                type: array
                items:
                  type: string
                description: Word context, used for define the scope
    EditWordTagsBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - tags
            properties:
              tags:
                type: array
                description: Tags ids
                items:
                  type: string
    AddWordFoldersBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - folders
            properties:
              folders:
                type: array
                description: Folders ids
                items:
                  type: string
    CreateWordVariantBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - field
              - value
            properties:
              field:
                type: string
                description: Variant field
              value:
                type: string
                description: Variant value
              systemUnit:
                type: string
                description: System unit key
              coeff:
                type: number
                description: Coeff for mapping systemUnit with unit
    EditWordVariantBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - value
            properties:
              value:
                type: string
                description: Variant value
              systemUnit:
                type: string
                description: System unit key
              coeff:
                type: number
                description: Coeff for mapping systemUnit with unit
  responses:
    InvalidData:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: norm:400
            message: Invalid data provided
    TooManyRequests:
      description: Too many requests
    NotImplemented:
      description: Not implemented
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: norm:401
            message: Unauthorized access
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: norm:403
            message: Access forbidden
    UserData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/User"
    UserFullData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UserFull"
    UserNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: user:404
            message: User does not exist
    ApiClientData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiClient"
    ApiClientWithSecretData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiClientWithSecret"
    ApiClientsListData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - items
              - total
            properties:
              items:
                type: array
                items:
                  $ref: "#/components/schemas/ApiClientBase"
              total:
                type: integer
    ApiClientExchangeTokenData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - accessToken
              - tokenType
              - expiresIn
            properties:
              accessToken:
                type: string
                description: Access token for the client
              tokenType:
                type: string
                enum:
                  - Bearer
                description: Type of the token
              expiresIn:
                type: integer
                description: Token expiration time in seconds
              refreshToken:
                type: string
                description: Refresh token for the client
              scopes:
                type: array
                items:
                  type: string
                description: Granted scopes for the token
    ApiClientGetDeviceCodeData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - deviceCode
              - userCode
              - verificationUrl
              - expiresIn
            properties:
              deviceCode:
                type: string
                description: Device code for the client
              userCode:
                type: string
                description: User code for the client
              verificationUrl:
                type: string
                description: URL for user verification
              expiresIn:
                type: integer
                description: Device code expiration time in seconds
    ApiClientIntrospectData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - active
              - clientId
            properties:
              active:
                type: boolean
                description: Indicates if the token is active
              clientId:
                type: string
                description: Client ID associated with the token
              scopes:
                type: array
                items:
                  type: string
                description: Scopes granted to the token
              iss:
                type: string
                description: Issuer of the token
              aud:
                type: string
                description: Audience of the token
              sub:
                type: string
                description: Subject (sub) claim of the token
              iat:
                type: integer
                description: Token issued at time in seconds
              exp:
                type: integer
                description: Token expiration time in seconds
    ApiClientRevokeTokenData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: array
            items:
              type: string
            description: List of revoked tokens
    ApiClientNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: client:404
            message: Client not found
    SearchActivitiesData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - total
              - items
            properties:
              total:
                type: number
              items:
                type: array
                items:
                  $ref: "#/components/schemas/ActivityLog"
    CheckUserAccess:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - isAdmin
              - isWalletAdmin
            properties:
              isAdmin:
                type: boolean
                description: If `true` user has admin access
              isWalletAdmin:
                type: boolean
                description: If `true` user has wallet admin access
    SearchAdminAccess:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - total
              - items
            properties:
              total:
                type: number
              items:
                type: array
                items:
                  $ref: "#/components/schemas/AdminAccess"
    AdminAccessData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AdminAccess"
    AdminAccessExist:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: admin-access:400-exist
            message: User has admin access
    AdminAccessNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: admin-access:404
            message: User has no admin access
    SearchComplaintsData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - total
              - items
            properties:
              total:
                type: number
              items:
                type: array
                items:
                  $ref: "#/components/schemas/Complaint"
    ComplaintData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Complaint"
    ComplaintNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: complaint:404
            message: Complain not found
    FileBinary:
      description: Successful operation
      content:
        text/plain:
          schema:
            type: string
            format: binary
    FileData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/FileData"
    FileNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: file:404
            message: File not exist
    FolderData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Folder"
    FolderFullData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/FolderFullData"
    FolderTreeData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            properties:
              total:
                type: number
              items:
                type: array
                items:
                  $ref: "#/components/schemas/FolderTreeItem"
    FolderReferenceData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/FolderReference"
    FolderNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: folder:404
            message: Folder not found
    ParentFolderNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: folder:404
            message: Parent folder not found
    FolderIsPublic:
      description: Folder is public
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: folder:400-public
            message: Folder is public
    FolderFilterData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/FolderFilter"
    FolderFilterNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            FolderNotFound:
              value:
                errorCode: folder:404
                message: Folder not found
            FilterNotFound:
              value:
                errorCode: folder:404-filter
                message: Folder filter not found
    SearchFolderFilterData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - total
              - items
            properties:
              total:
                type: number
              items:
                type: string
    SearchNonSystemUnitsData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/NonSystemUnit"
    NonSystemUnitData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NonSystemUnit"
    NonSystemUnitNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: unit:non-system:404
            message: Non system unit not found
    NormData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Norm"
    NormWithData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NormWithData"
    NormResourceData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NormResource"
    SearchNormsData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - total
              - items
            properties:
              total:
                type: number
                description: Total number of norms
              items:
                type: array
                items:
                  $ref: "#/components/schemas/NormBase"
                description: List of norms
    NormNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: norm:404
            message: Norm not found
    NormResourceNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: norm:404-resource
            message: Norm resource not found
    NormAlreadyDeleted:
      description: Norm is already deleted
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: norm:400-deleted
            message: Norm is already deleted
    ResourceAlreadyExists:
      description: Resource already exists in this norm
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: norm:409-resource
            message: Resource already exists in this norm
    ResourceData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Resource"
    ResourceWithData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ResourceWithData"
    SearchResourcesData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - total
              - items
            properties:
              total:
                type: number
                description: Total number of resources
              items:
                type: array
                items:
                  $ref: "#/components/schemas/ResourceBase"
                description: List of resources
    ResourceNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: resource:404
            message: Resource not found
    SearchSystemUnitsData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/SystemUnit"
    SystemUnitData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SystemUnit"
    SystemUnitNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: unit:system:404
            message: System unit not found
    SearchTagsData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - total
              - items
            properties:
              total:
                type: number
              items:
                type: array
                items:
                  $ref: "#/components/schemas/Tag"
    TagData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Tag"
    TagNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: tag:404
            message: Tag not found
    SearchUsersData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - total
              - items
            properties:
              total:
                type: number
              items:
                type: array
                items:
                  $ref: "#/components/schemas/UserWithRating"
    UserRatingData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UserWithRating"
    SearchWordsData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - total
              - items
            properties:
              total:
                type: number
              items:
                type: array
                items:
                  $ref: "#/components/schemas/Word"
    SearchWordsContextData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
              - total
              - items
            properties:
              total:
                type: number
              items:
                type: array
                items:
                  type: string
    WordData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Word"
    WordFullData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/WordWithData"
    WordVariantData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/WordVariant"
    WordVariantsListData:
      description: Successful operation
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/WordVariant"
    WordReferenceData:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/WordReference"
    WordNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: word:404
            message: Word not found
    WordVariantNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            WordNotFound:
              value:
                errorCode: word:404
                message: Word not found
            VariantNotFound:
              value:
                errorCode: word:404-variant
                message: Word variant not found
    WordVariantVoteExist:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: word:400-vote-exist
            message: Word variant vote exists
    WordVariantVoteNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            WordNotFound:
              value:
                errorCode: word:404
                message: Word not found
            VariantNotFound:
              value:
                errorCode: word:404-variant
                message: Word variant not found
            VoteNotFound:
              value:
                errorCode: word:404-vote
                message: Word variant vote not found
    WordReferenceExist:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errorCode: word:400-reference-exist
            message: Word reference exist
    WordReferenceNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            WordNotFound:
              value:
                errorCode: word:404
                message: Word not found
            ReferenceNotFound:
              value:
                errorCode: word:404-reference
                message: Word reference not found
  parameters:
    apiClientIdParam:
      in: path
      name: id
      description: Client ID
      required: true
      schema:
        type: string
    walletParam:
      in: path
      name: wallet
      description: Wallet Address
      required: true
      schema:
        type: string
    complaintIdParam:
      in: path
      name: id
      description: Complaint ID
      required: true
      schema:
        type: string
        format: uuid
    fileIdParam:
      in: path
      name: id
      description: File ID
      required: true
      schema:
        type: string
        format: uuid
    folderIdParam:
      in: path
      name: id
      description: Folder ID
      required: true
      schema:
        type: string
        format: uuid
    filterIdParam:
      in: path
      name: filterId
      description: Filter ID
      required: true
      schema:
        type: string
        format: uuid
    folderRefIdParam:
      in: path
      name: refId
      description: Folder reference ID
      required: true
      schema:
        type: string
        format: uuid
    nonSystemUnitKeyParam:
      in: path
      name: key
      description: Unit key
      required: true
      schema:
        type: string
    normId:
      name: normId
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: Norm ID
    resourceId:
      name: resId
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: Resource ID
    systemUnitKeyParam:
      in: path
      name: key
      description: System unit key
      required: true
      schema:
        type: string
    tagIdParam:
      in: path
      name: id
      description: Tag ID
      required: true
      schema:
        type: string
        format: uuid
    userIdParam:
      in: path
      name: id
      description: User ID
      required: true
      schema:
        type: string
    wordIdParam:
      in: path
      name: id
      description: Word ID
      required: true
      schema:
        type: string
        format: uuid
    variantIdParam:
      in: path
      name: variantId
      description: Variant ID
      required: true
      schema:
        type: string
        format: uuid
    variantFieldParam:
      in: path
      name: field
      description: The characteristic to get its variants
      required: true
      schema:
        type: string
    wordRefTypeParam:
      in: path
      name: type
      description: Reference type
      required: true
      schema:
        $ref: "#/components/schemas/WordReferenceType"
    wordRefIdParam:
      in: path
      name: refId
      description: Reference ID
      required: true
      schema:
        type: string
        format: uuid
